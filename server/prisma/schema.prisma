generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  userId Int @id @default(autoincrement())
  email String @unique
  password String
  username String @unique
  designation String
  phoneNumber String
  profilePictureId Int? @unique
  projects    Project[]  @relation("UserProjects")
  teams       Team[]     @relation("TeamMembers")
  roles       Role[]     @relation("UserRoles")
  resetPasswordOTP String?
  otpExpires String?
  createdAt DateTime @default(now())
  updatedAt  DateTime   @updatedAt
  idleTimeOut   String?
  allowSignout    Boolean?
  workingHours    String?
  pictureModification   Boolean?
  authoredTasks Task[] @relation("TaskAuthor")
  assignedTasks Task[] @relation("TaskAssignee")
  authoredSubTasks Subtask[] @relation("SubTaskAuthor")
  assignedSubTasks Subtask[] @relation("SubTaskAssignee")
  taskAssignment TaskAssignment[] 
  attachments Attachment[]
  comments Comment[]
  alert     Alert[]
  projectAttachments    ProjectAttachments[]

  teamMembers TeamMembers[]   @relation("TeamMembers")
  userProjects UserProjects[]     @relation("UserProjects")

  reportsTo   User?      @relation("ReportsTo", fields: [reportsToId], references: [userId])
  reportsToId Int?
  reports     User[]     @relation("ReportsTo")
  taskHistory       TaskHistory[]     @relation("TaskHistory")
  screenshot      Screenshots[]
  project       Project[]      @relation()
  autoReport       AutoReports[]      @relation()
  timesheet         Timesheet[]         @relation("Timesheet")
  profilePicture  ProfilePicture? @relation(fields: [profilePictureId], references: [id])
}

model Screenshots {
  id Int @id @default(autoincrement())
  username String 
  time String
  date DateTime?  @default(now())
  base64 String
  userId    Int
  user      User   @relation(fields: [userId], references: [userId])
}

model Attendance {
    id       Int     @id @default(autoincrement()) 
    userId    Int
    username    String?
    punchInTime   DateTime?
    punchOutTime    DateTime?
    date      DateTime

    @@unique([userId, date])
    breaks      Breaks[]
}

model BreakType {
    id       Int     @id @default(autoincrement()) 
    breakName    String
    breakCode   String  @unique
    breakDescription    String
    breakTimeInMinutes  String?

    breaks      Breaks[]
    teams       Team[]
}

model Breaks {
    id       Int     @id @default(autoincrement()) 
    userId    Int
    startTime   DateTime
    endTime    DateTime?
    date      DateTime
    attendanceId  Int
    breakTimeInMinutes  String?

    breakTypeCode   String
    breakTypeName     String
    breakTypeId     Int?

    attendance       Attendance? @relation(fields: [attendanceId], references: [id])
    breakType       BreakType? @relation(fields: [breakTypeId], references: [id])
  }

model ProfilePicture {
  id       Int     @id @default(autoincrement()) 
  base64   String  
  user     User?   @relation 
}

model Project {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  code        String?     @unique
  description String?
  projectManager      Int  
  startDate      String?
  endDate      String?
  status      String?
  clientName      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tasks        Task[]
  projectAttachments      ProjectAttachments[]
  // Many-to-many relationship between users and projects (a user can have many projects)
  sprints       Sprint[]
  users       User[]     @relation("UserProjects")
  userProjects UserProjects[]     @relation("UserProjects")
  user     User  @relation(fields: [projectManager], references: [userId])
  teams       Team[]
}

model ProjectAttachments {
  id        Int       @id @default(autoincrement())
  fileBase64      String
  fileName     String?
  projectId       Int?
  uploadedById    Int

  project       Project? @relation(fields: [projectId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [userId])
}

model Sprint {
  id              Int       @id @default(autoincrement())
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime
  projectId       Int

  project         Project   @relation(fields: [projectId], references: [id])
  tasks           Task[]    
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  code           String?    @unique
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  inProgressStartTime DateTime?
  inProgressTimeinMinutes String?
  points         Int?
  projectId      Int
  authorUserId   Int
  assignedUserId Int?
  sprintId          Int?

  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]

  taskHistory       TaskHistory[]     @relation("TaskHistory")
  taskActivity      TaskActivity[]    @relation("TaskActivity")
  subTasks          Subtask[]
  sprint            Sprint?        @relation(fields: [sprintId], references: [id])
}

model Subtask {
  id              Int       @id @default(autoincrement())
  title           String
  description     String?
  code           String?    @unique
  status          String?
  taskId          Int
  startDate      DateTime?
  dueDate        DateTime?
  authorUserId   Int
  assignedUserId Int?
  inProgressStartTime DateTime?
  inProgressTimeinMinutes String?

  attachments     Attachment[]
  assignee        User?            @relation("SubTaskAssignee", fields: [assignedUserId], references: [userId])
  author          User             @relation("SubTaskAuthor", fields: [authorUserId], references: [userId])
  task            Task      @relation(fields: [taskId], references: [id])
  comments        Comment[] // Comments related to the Subtask
  SubTaskActivity      SubTaskActivity[]    @relation("SubTaskActivity")
}

model TaskHistory{
  id             Int       @id @default(autoincrement())
  taskId         Int
  userId         Int
  startDate      DateTime
  endDate        DateTime?
  sprint          String?
  time            String?

  task            Task    @relation(fields: [taskId], references: [id], name: "TaskHistory")
  user            User    @relation(fields: [userId], references: [userId], name: "TaskHistory")
}

model TaskActivity{
  id             Int       @id @default(autoincrement())
  taskId         Int
  userId         Int?
  date      DateTime
  username        String?
  activity          String?

  task            Task    @relation(fields: [taskId], references: [id], name: "TaskActivity")
}

model SubTaskActivity{
  id             Int       @id @default(autoincrement())
  subTaskId         Int
  userId         Int?
  date      DateTime
  username        String?
  activity          String?

  subTask        Subtask    @relation(fields: [subTaskId], references: [id], name: "SubTaskActivity")
}

model Alert {
  id        Int   @id @default(autoincrement())
  title     String
  description   String
  triggeredDate     DateTime
  status        String?

  userId          Int?
  user         User?  @relation(fields: [userId], references: [userId])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int?
  userId Int
  username String
  commentTime DateTime
  subtaskId       Int? 

  task            Task?     @relation(fields: [taskId], references: [id])   // Relation to Task (optional)
  subtask         Subtask?  @relation(fields: [subtaskId], references: [id])
  user User @relation(fields: [userId], references: [userId])
}

model TaskAssignment {
  id     Int @id @default(autoincrement())
  userId Int
  taskId Int

  user User @relation(fields: [userId], references: [userId])
  task Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileBase64      String
  fileName     String?
  taskId       Int?
  subTaskId     Int?
  uploadedById Int

  task       Task? @relation(fields: [taskId], references: [id])
  subTask       Subtask? @relation(fields: [subTaskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [userId])
}

model UserProjects {
  userId      Int
  projectId   Int
  role        String    // This stores the user's role in the project

  user        User      @relation(fields: [userId], references: [userId ], name: "UserProjects")
  project     Project  @relation(fields: [projectId], references: [id], name: "UserProjects")

  @@id([userId, projectId]) // Composite primary key for the many-to-many relation
}

model Timesheet {
  id             Int       @id @default(autoincrement())
  projectId       Int?
  taskId      Int?
  taskCode      String?
  subTaskId      Int?
  subTaskCode      String?
  task         String
  taskName    String?
  projectName   String?
  completionPercentage      String?
  consumedHours       String
  approvedHours       String?
  ApprovedFlag      String
  userId         Int
  date      DateTime
  username        String?

  user            User    @relation(fields: [userId], references: [userId], name: "Timesheet")
  @@unique([taskId, date])
  @@unique([subTaskId, date])

}

model Team {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String
  teamLeaderName String?
  teamLeaderEmail String?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Many-to-many relationship between users and teams (a user can belong to many teams)
  members     User[]     @relation("TeamMembers")
  teamMembers    TeamMembers[]     @relation("TeamMembers")
  projects      Project[]
  breakTypes      BreakType[]
}

model TeamMembers {
  userId      Int
  teamId      Int
  role        String   // This stores the user's role in the team

  user        User     @relation(fields: [userId], references: [userId], name:"TeamMembers")
  team        Team     @relation(fields: [teamId], references: [id], name: "TeamMembers")

  @@id([userId, teamId]) // Composite primary key for the many-to-many relation
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  code        String       @unique 
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Many-to-many relationship between roles and users
  users       User[]       @relation("UserRoles")

  // Many-to-many relationship between roles and authorities
  authorities Authority[]  @relation("RoleAuthorities")

  // The reverse relation to RoleAuthorities
  roleAuthorities RoleAuthorities[]  @relation("RoleAuthorities")
}

model Authority {
  id          Int        @id @default(autoincrement())
  name        String     
  code        String     @unique 
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Many-to-many relationship between authorities and roles
  roles       Role[]     @relation("RoleAuthorities")

  // The reverse relation to RoleAuthorities (add this field)
  roleAuthorities RoleAuthorities[] @relation("RoleAuthorities")
}

model RoleAuthorities {
  roleId      Int
  authorityId Int

  role        Role       @relation(fields: [roleId], references: [id], name: "RoleAuthorities")
  authority   Authority  @relation(fields: [authorityId], references: [id], name: "RoleAuthorities")

  @@id([roleId, authorityId]) // Composite primary key for the many-to-many relation
}

model AutoReports {
  id       Int     @id @default(autoincrement()) 
  ReportName   String  
  ReportTime String 
  ReportDuration String
  ProjectTeam String
  userId    Int

  user            User    @relation(fields: [userId], references: [userId])
  @@unique([userId, ReportName,ProjectTeam])
}

model Customer {
  id       Int     @id @default(autoincrement()) 
  Cust_name   String  @unique
  Allowed_User_Count String 
  Plan String
  Field1  String?
  logoBase64  String?
}

