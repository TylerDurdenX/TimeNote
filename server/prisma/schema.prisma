generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  userId Int @id @default(autoincrement())
  email String @unique
  password String
  username String @unique
  designation String
  phoneNumber String
  profilePictureId Int? @unique
  projects    Project[]  @relation("UserProjects")
  teams       Team[]     @relation("TeamMembers")
  roles       Role[]     @relation("UserRoles")
  resetPasswordOTP String?
  otpExpires String?
  createdAt DateTime @default(now())
  updatedAt  DateTime   @updatedAt
  authoredTasks Task[] @relation("TaskAuthor")
  assignedTasks Task[] @relation("TaskAssignee")
  taskAssignment TaskAssignment[] 
  attachments Attachment[]
  comments Comment[]

  teamMembers TeamMembers[]   @relation("TeamMembers")
  userProjects UserProjects[]     @relation("UserProjects")

  reportsTo   User?      @relation("ReportsTo", fields: [reportsToId], references: [userId])
  reportsToId Int?
  reports     User[]     @relation("ReportsTo")
  taskHistory       TaskHistory[]     @relation("TaskHistory")

  profilePicture  ProfilePicture? @relation(fields: [profilePictureId], references: [id])
}

model ProfilePicture {
  id       Int     @id @default(autoincrement()) 
  base64   String  
  user     User?   @relation 
}

model Project {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  field1      String?
  field2      String?
  field3      String?
  field4      String?
  field5      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tasks        Task[]
  // Many-to-many relationship between users and projects (a user can have many projects)
  users       User[]     @relation("UserProjects")
  userProjects UserProjects[]     @relation("UserProjects")
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      Int
  authorUserId   Int
  assignedUserId Int?

  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]

  taskHistory       TaskHistory[]     @relation("TaskHistory")
}

model TaskHistory{
  id             Int       @id @default(autoincrement())
  taskId         Int
  userId         Int
  startDate      DateTime
  endDate        DateTime

  task            Task    @relation(fields: [taskId], references: [id], name: "TaskHistory")
  user            User    @relation(fields: [userId], references: [userId], name: "TaskHistory")
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int
  commentTime DateTime

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [userId])
}

model TaskAssignment {
  id     Int @id @default(autoincrement())
  userId Int
  taskId Int

  user User @relation(fields: [userId], references: [userId])
  task Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById Int

  task       Task @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [userId])
}

model UserProjects {
  userId      Int
  projectId   Int
  role        String    // This stores the user's role in the project

  user        User      @relation(fields: [userId], references: [userId ], name: "UserProjects")
  project     Project  @relation(fields: [projectId], references: [id], name: "UserProjects")

  @@id([userId, projectId]) // Composite primary key for the many-to-many relation
}

model Team {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Many-to-many relationship between users and teams (a user can belong to many teams)
  members     User[]     @relation("TeamMembers")
  teamMembers    TeamMembers[]     @relation("TeamMembers")
}

model TeamMembers {
  userId      Int
  teamId      Int
  role        String   // This stores the user's role in the team

  user        User     @relation(fields: [userId], references: [userId], name:"TeamMembers")
  team        Team     @relation(fields: [teamId], references: [id], name: "TeamMembers")

  @@id([userId, teamId]) // Composite primary key for the many-to-many relation
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       
  code        String       @unique 
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Many-to-many relationship between roles and users
  users       User[]       @relation("UserRoles")

  // Many-to-many relationship between roles and authorities
  authorities Authority[]  @relation("RoleAuthorities")

  // The reverse relation to RoleAuthorities
  roleAuthorities RoleAuthorities[]  @relation("RoleAuthorities")
}

model Authority {
  id          Int        @id @default(autoincrement())
  name        String     
  code        String     @unique 
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Many-to-many relationship between authorities and roles
  roles       Role[]     @relation("RoleAuthorities")

  // The reverse relation to RoleAuthorities (add this field)
  roleAuthorities RoleAuthorities[] @relation("RoleAuthorities")
}

model RoleAuthorities {
  roleId      Int
  authorityId Int

  role        Role       @relation(fields: [roleId], references: [id], name: "RoleAuthorities")
  authority   Authority  @relation(fields: [authorityId], references: [id], name: "RoleAuthorities")

  @@id([roleId, authorityId]) // Composite primary key for the many-to-many relation
}



model Customer {
  id       Int     @id @default(autoincrement()) 
  Cust_name   String  
  Allowed_User_Count String 
  Plan String
}

