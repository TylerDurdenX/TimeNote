
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.3.0
 * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
 */
Prisma.prismaVersion = {
  client: "6.3.0",
  engine: "acc0b9dd43eb689cbd20c9470515d719db10d0b0"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  userId: 'userId',
  email: 'email',
  password: 'password',
  username: 'username',
  designation: 'designation',
  phoneNumber: 'phoneNumber',
  profilePictureId: 'profilePictureId',
  resetPasswordOTP: 'resetPasswordOTP',
  otpExpires: 'otpExpires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reportsToId: 'reportsToId'
};

exports.Prisma.ScreenshotsScalarFieldEnum = {
  id: 'id',
  username: 'username',
  time: 'time',
  date: 'date',
  base64: 'base64',
  userId: 'userId'
};

exports.Prisma.ProfilePictureScalarFieldEnum = {
  id: 'id',
  base64: 'base64'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  projectManager: 'projectManager',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  clientName: 'clientName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectAttachmentsScalarFieldEnum = {
  id: 'id',
  fileBase64: 'fileBase64',
  fileName: 'fileName',
  projectId: 'projectId',
  uploadedById: 'uploadedById'
};

exports.Prisma.SprintScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  projectId: 'projectId'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  code: 'code',
  description: 'description',
  status: 'status',
  priority: 'priority',
  tags: 'tags',
  startDate: 'startDate',
  dueDate: 'dueDate',
  inProgressStartTime: 'inProgressStartTime',
  inProgressTimeinMinutes: 'inProgressTimeinMinutes',
  points: 'points',
  projectId: 'projectId',
  authorUserId: 'authorUserId',
  assignedUserId: 'assignedUserId',
  sprintId: 'sprintId'
};

exports.Prisma.SubtaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  taskId: 'taskId',
  startDate: 'startDate',
  dueDate: 'dueDate',
  authorUserId: 'authorUserId',
  assignedUserId: 'assignedUserId'
};

exports.Prisma.TaskHistoryScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  userId: 'userId',
  startDate: 'startDate',
  endDate: 'endDate',
  sprint: 'sprint',
  time: 'time'
};

exports.Prisma.TaskActivityScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  userId: 'userId',
  date: 'date',
  username: 'username',
  activity: 'activity'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  triggeredDate: 'triggeredDate',
  status: 'status',
  userId: 'userId'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  text: 'text',
  taskId: 'taskId',
  userId: 'userId',
  username: 'username',
  commentTime: 'commentTime',
  subtaskId: 'subtaskId'
};

exports.Prisma.TaskAssignmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  taskId: 'taskId'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  fileBase64: 'fileBase64',
  fileName: 'fileName',
  taskId: 'taskId',
  subTaskId: 'subTaskId',
  uploadedById: 'uploadedById'
};

exports.Prisma.UserProjectsScalarFieldEnum = {
  userId: 'userId',
  projectId: 'projectId',
  role: 'role'
};

exports.Prisma.TimesheetScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  taskId: 'taskId',
  taskCode: 'taskCode',
  task: 'task',
  completionPercentage: 'completionPercentage',
  consumedHours: 'consumedHours',
  ApprovedFlag: 'ApprovedFlag',
  userId: 'userId',
  date: 'date',
  username: 'username'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamMembersScalarFieldEnum = {
  userId: 'userId',
  teamId: 'teamId',
  role: 'role'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuthorityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleAuthoritiesScalarFieldEnum = {
  roleId: 'roleId',
  authorityId: 'authorityId'
};

exports.Prisma.AutoReportsScalarFieldEnum = {
  id: 'id',
  ReportName: 'ReportName',
  ReportTime: 'ReportTime',
  ReportDuration: 'ReportDuration',
  ProjectTeam: 'ProjectTeam',
  userId: 'userId'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  Cust_name: 'Cust_name',
  Allowed_User_Count: 'Allowed_User_Count',
  Plan: 'Plan'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Screenshots: 'Screenshots',
  ProfilePicture: 'ProfilePicture',
  Project: 'Project',
  ProjectAttachments: 'ProjectAttachments',
  Sprint: 'Sprint',
  Task: 'Task',
  Subtask: 'Subtask',
  TaskHistory: 'TaskHistory',
  TaskActivity: 'TaskActivity',
  Alert: 'Alert',
  Comment: 'Comment',
  TaskAssignment: 'TaskAssignment',
  Attachment: 'Attachment',
  UserProjects: 'UserProjects',
  Timesheet: 'Timesheet',
  Team: 'Team',
  TeamMembers: 'TeamMembers',
  Role: 'Role',
  Authority: 'Authority',
  RoleAuthorities: 'RoleAuthorities',
  AutoReports: 'AutoReports',
  Customer: 'Customer'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
