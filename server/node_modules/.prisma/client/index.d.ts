
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Screenshots
 * 
 */
export type Screenshots = $Result.DefaultSelection<Prisma.$ScreenshotsPayload>
/**
 * Model ProfilePicture
 * 
 */
export type ProfilePicture = $Result.DefaultSelection<Prisma.$ProfilePicturePayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Sprint
 * 
 */
export type Sprint = $Result.DefaultSelection<Prisma.$SprintPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model Subtask
 * 
 */
export type Subtask = $Result.DefaultSelection<Prisma.$SubtaskPayload>
/**
 * Model TaskHistory
 * 
 */
export type TaskHistory = $Result.DefaultSelection<Prisma.$TaskHistoryPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model TaskAssignment
 * 
 */
export type TaskAssignment = $Result.DefaultSelection<Prisma.$TaskAssignmentPayload>
/**
 * Model Attachment
 * 
 */
export type Attachment = $Result.DefaultSelection<Prisma.$AttachmentPayload>
/**
 * Model UserProjects
 * 
 */
export type UserProjects = $Result.DefaultSelection<Prisma.$UserProjectsPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model TeamMembers
 * 
 */
export type TeamMembers = $Result.DefaultSelection<Prisma.$TeamMembersPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Authority
 * 
 */
export type Authority = $Result.DefaultSelection<Prisma.$AuthorityPayload>
/**
 * Model RoleAuthorities
 * 
 */
export type RoleAuthorities = $Result.DefaultSelection<Prisma.$RoleAuthoritiesPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.screenshots`: Exposes CRUD operations for the **Screenshots** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Screenshots
    * const screenshots = await prisma.screenshots.findMany()
    * ```
    */
  get screenshots(): Prisma.ScreenshotsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profilePicture`: Exposes CRUD operations for the **ProfilePicture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfilePictures
    * const profilePictures = await prisma.profilePicture.findMany()
    * ```
    */
  get profilePicture(): Prisma.ProfilePictureDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sprint`: Exposes CRUD operations for the **Sprint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sprints
    * const sprints = await prisma.sprint.findMany()
    * ```
    */
  get sprint(): Prisma.SprintDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subtask`: Exposes CRUD operations for the **Subtask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subtasks
    * const subtasks = await prisma.subtask.findMany()
    * ```
    */
  get subtask(): Prisma.SubtaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.taskHistory`: Exposes CRUD operations for the **TaskHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TaskHistories
    * const taskHistories = await prisma.taskHistory.findMany()
    * ```
    */
  get taskHistory(): Prisma.TaskHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.taskAssignment`: Exposes CRUD operations for the **TaskAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TaskAssignments
    * const taskAssignments = await prisma.taskAssignment.findMany()
    * ```
    */
  get taskAssignment(): Prisma.TaskAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attachment`: Exposes CRUD operations for the **Attachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attachments
    * const attachments = await prisma.attachment.findMany()
    * ```
    */
  get attachment(): Prisma.AttachmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userProjects`: Exposes CRUD operations for the **UserProjects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProjects
    * const userProjects = await prisma.userProjects.findMany()
    * ```
    */
  get userProjects(): Prisma.UserProjectsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamMembers`: Exposes CRUD operations for the **TeamMembers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamMembers
    * const teamMembers = await prisma.teamMembers.findMany()
    * ```
    */
  get teamMembers(): Prisma.TeamMembersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.authority`: Exposes CRUD operations for the **Authority** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authorities
    * const authorities = await prisma.authority.findMany()
    * ```
    */
  get authority(): Prisma.AuthorityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roleAuthorities`: Exposes CRUD operations for the **RoleAuthorities** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoleAuthorities
    * const roleAuthorities = await prisma.roleAuthorities.findMany()
    * ```
    */
  get roleAuthorities(): Prisma.RoleAuthoritiesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.3.0
   * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Screenshots: 'Screenshots',
    ProfilePicture: 'ProfilePicture',
    Project: 'Project',
    Sprint: 'Sprint',
    Task: 'Task',
    Subtask: 'Subtask',
    TaskHistory: 'TaskHistory',
    Comment: 'Comment',
    TaskAssignment: 'TaskAssignment',
    Attachment: 'Attachment',
    UserProjects: 'UserProjects',
    Team: 'Team',
    TeamMembers: 'TeamMembers',
    Role: 'Role',
    Authority: 'Authority',
    RoleAuthorities: 'RoleAuthorities',
    Customer: 'Customer'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "screenshots" | "profilePicture" | "project" | "sprint" | "task" | "subtask" | "taskHistory" | "comment" | "taskAssignment" | "attachment" | "userProjects" | "team" | "teamMembers" | "role" | "authority" | "roleAuthorities" | "customer"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Screenshots: {
        payload: Prisma.$ScreenshotsPayload<ExtArgs>
        fields: Prisma.ScreenshotsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScreenshotsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScreenshotsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>
          }
          findFirst: {
            args: Prisma.ScreenshotsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScreenshotsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>
          }
          findMany: {
            args: Prisma.ScreenshotsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>[]
          }
          create: {
            args: Prisma.ScreenshotsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>
          }
          createMany: {
            args: Prisma.ScreenshotsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScreenshotsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>[]
          }
          delete: {
            args: Prisma.ScreenshotsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>
          }
          update: {
            args: Prisma.ScreenshotsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>
          }
          deleteMany: {
            args: Prisma.ScreenshotsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScreenshotsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScreenshotsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>[]
          }
          upsert: {
            args: Prisma.ScreenshotsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScreenshotsPayload>
          }
          aggregate: {
            args: Prisma.ScreenshotsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScreenshots>
          }
          groupBy: {
            args: Prisma.ScreenshotsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScreenshotsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScreenshotsCountArgs<ExtArgs>
            result: $Utils.Optional<ScreenshotsCountAggregateOutputType> | number
          }
        }
      }
      ProfilePicture: {
        payload: Prisma.$ProfilePicturePayload<ExtArgs>
        fields: Prisma.ProfilePictureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfilePictureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfilePictureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          findFirst: {
            args: Prisma.ProfilePictureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfilePictureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          findMany: {
            args: Prisma.ProfilePictureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>[]
          }
          create: {
            args: Prisma.ProfilePictureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          createMany: {
            args: Prisma.ProfilePictureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfilePictureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>[]
          }
          delete: {
            args: Prisma.ProfilePictureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          update: {
            args: Prisma.ProfilePictureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          deleteMany: {
            args: Prisma.ProfilePictureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfilePictureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfilePictureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>[]
          }
          upsert: {
            args: Prisma.ProfilePictureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          aggregate: {
            args: Prisma.ProfilePictureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfilePicture>
          }
          groupBy: {
            args: Prisma.ProfilePictureGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfilePictureGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfilePictureCountArgs<ExtArgs>
            result: $Utils.Optional<ProfilePictureCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Sprint: {
        payload: Prisma.$SprintPayload<ExtArgs>
        fields: Prisma.SprintFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SprintFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SprintFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>
          }
          findFirst: {
            args: Prisma.SprintFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SprintFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>
          }
          findMany: {
            args: Prisma.SprintFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>[]
          }
          create: {
            args: Prisma.SprintCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>
          }
          createMany: {
            args: Prisma.SprintCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SprintCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>[]
          }
          delete: {
            args: Prisma.SprintDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>
          }
          update: {
            args: Prisma.SprintUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>
          }
          deleteMany: {
            args: Prisma.SprintDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SprintUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SprintUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>[]
          }
          upsert: {
            args: Prisma.SprintUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SprintPayload>
          }
          aggregate: {
            args: Prisma.SprintAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSprint>
          }
          groupBy: {
            args: Prisma.SprintGroupByArgs<ExtArgs>
            result: $Utils.Optional<SprintGroupByOutputType>[]
          }
          count: {
            args: Prisma.SprintCountArgs<ExtArgs>
            result: $Utils.Optional<SprintCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      Subtask: {
        payload: Prisma.$SubtaskPayload<ExtArgs>
        fields: Prisma.SubtaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubtaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubtaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtaskPayload>
          }
          findFirst: {
            args: Prisma.SubtaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubtaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtaskPayload>
          }
          findMany: {
            args: Prisma.SubtaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtaskPayload>[]
          }
          create: {
            args: Prisma.SubtaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtaskPayload>
          }
          createMany: {
            args: Prisma.SubtaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubtaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtaskPayload>[]
          }
          delete: {
            args: Prisma.SubtaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtaskPayload>
          }
          update: {
            args: Prisma.SubtaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtaskPayload>
          }
          deleteMany: {
            args: Prisma.SubtaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubtaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubtaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtaskPayload>[]
          }
          upsert: {
            args: Prisma.SubtaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtaskPayload>
          }
          aggregate: {
            args: Prisma.SubtaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubtask>
          }
          groupBy: {
            args: Prisma.SubtaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubtaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubtaskCountArgs<ExtArgs>
            result: $Utils.Optional<SubtaskCountAggregateOutputType> | number
          }
        }
      }
      TaskHistory: {
        payload: Prisma.$TaskHistoryPayload<ExtArgs>
        fields: Prisma.TaskHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskHistoryPayload>
          }
          findFirst: {
            args: Prisma.TaskHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskHistoryPayload>
          }
          findMany: {
            args: Prisma.TaskHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskHistoryPayload>[]
          }
          create: {
            args: Prisma.TaskHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskHistoryPayload>
          }
          createMany: {
            args: Prisma.TaskHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskHistoryPayload>[]
          }
          delete: {
            args: Prisma.TaskHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskHistoryPayload>
          }
          update: {
            args: Prisma.TaskHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskHistoryPayload>
          }
          deleteMany: {
            args: Prisma.TaskHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskHistoryPayload>[]
          }
          upsert: {
            args: Prisma.TaskHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskHistoryPayload>
          }
          aggregate: {
            args: Prisma.TaskHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTaskHistory>
          }
          groupBy: {
            args: Prisma.TaskHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<TaskHistoryCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      TaskAssignment: {
        payload: Prisma.$TaskAssignmentPayload<ExtArgs>
        fields: Prisma.TaskAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>
          }
          findFirst: {
            args: Prisma.TaskAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>
          }
          findMany: {
            args: Prisma.TaskAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>[]
          }
          create: {
            args: Prisma.TaskAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>
          }
          createMany: {
            args: Prisma.TaskAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>[]
          }
          delete: {
            args: Prisma.TaskAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>
          }
          update: {
            args: Prisma.TaskAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.TaskAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.TaskAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskAssignmentPayload>
          }
          aggregate: {
            args: Prisma.TaskAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTaskAssignment>
          }
          groupBy: {
            args: Prisma.TaskAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<TaskAssignmentCountAggregateOutputType> | number
          }
        }
      }
      Attachment: {
        payload: Prisma.$AttachmentPayload<ExtArgs>
        fields: Prisma.AttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttachmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttachmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          findFirst: {
            args: Prisma.AttachmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttachmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          findMany: {
            args: Prisma.AttachmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          create: {
            args: Prisma.AttachmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          createMany: {
            args: Prisma.AttachmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttachmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          delete: {
            args: Prisma.AttachmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          update: {
            args: Prisma.AttachmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          deleteMany: {
            args: Prisma.AttachmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttachmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttachmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          upsert: {
            args: Prisma.AttachmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          aggregate: {
            args: Prisma.AttachmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttachment>
          }
          groupBy: {
            args: Prisma.AttachmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttachmentCountArgs<ExtArgs>
            result: $Utils.Optional<AttachmentCountAggregateOutputType> | number
          }
        }
      }
      UserProjects: {
        payload: Prisma.$UserProjectsPayload<ExtArgs>
        fields: Prisma.UserProjectsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProjectsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProjectsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectsPayload>
          }
          findFirst: {
            args: Prisma.UserProjectsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProjectsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectsPayload>
          }
          findMany: {
            args: Prisma.UserProjectsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectsPayload>[]
          }
          create: {
            args: Prisma.UserProjectsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectsPayload>
          }
          createMany: {
            args: Prisma.UserProjectsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProjectsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectsPayload>[]
          }
          delete: {
            args: Prisma.UserProjectsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectsPayload>
          }
          update: {
            args: Prisma.UserProjectsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectsPayload>
          }
          deleteMany: {
            args: Prisma.UserProjectsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProjectsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserProjectsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectsPayload>[]
          }
          upsert: {
            args: Prisma.UserProjectsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProjectsPayload>
          }
          aggregate: {
            args: Prisma.UserProjectsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProjects>
          }
          groupBy: {
            args: Prisma.UserProjectsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProjectsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProjectsCountArgs<ExtArgs>
            result: $Utils.Optional<UserProjectsCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      TeamMembers: {
        payload: Prisma.$TeamMembersPayload<ExtArgs>
        fields: Prisma.TeamMembersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamMembersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamMembersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>
          }
          findFirst: {
            args: Prisma.TeamMembersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamMembersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>
          }
          findMany: {
            args: Prisma.TeamMembersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>[]
          }
          create: {
            args: Prisma.TeamMembersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>
          }
          createMany: {
            args: Prisma.TeamMembersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamMembersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>[]
          }
          delete: {
            args: Prisma.TeamMembersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>
          }
          update: {
            args: Prisma.TeamMembersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>
          }
          deleteMany: {
            args: Prisma.TeamMembersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamMembersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamMembersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>[]
          }
          upsert: {
            args: Prisma.TeamMembersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMembersPayload>
          }
          aggregate: {
            args: Prisma.TeamMembersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamMembers>
          }
          groupBy: {
            args: Prisma.TeamMembersGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamMembersGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamMembersCountArgs<ExtArgs>
            result: $Utils.Optional<TeamMembersCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Authority: {
        payload: Prisma.$AuthorityPayload<ExtArgs>
        fields: Prisma.AuthorityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthorityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthorityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorityPayload>
          }
          findFirst: {
            args: Prisma.AuthorityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthorityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorityPayload>
          }
          findMany: {
            args: Prisma.AuthorityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorityPayload>[]
          }
          create: {
            args: Prisma.AuthorityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorityPayload>
          }
          createMany: {
            args: Prisma.AuthorityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuthorityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorityPayload>[]
          }
          delete: {
            args: Prisma.AuthorityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorityPayload>
          }
          update: {
            args: Prisma.AuthorityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorityPayload>
          }
          deleteMany: {
            args: Prisma.AuthorityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuthorityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuthorityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorityPayload>[]
          }
          upsert: {
            args: Prisma.AuthorityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorityPayload>
          }
          aggregate: {
            args: Prisma.AuthorityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuthority>
          }
          groupBy: {
            args: Prisma.AuthorityGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthorityGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthorityCountArgs<ExtArgs>
            result: $Utils.Optional<AuthorityCountAggregateOutputType> | number
          }
        }
      }
      RoleAuthorities: {
        payload: Prisma.$RoleAuthoritiesPayload<ExtArgs>
        fields: Prisma.RoleAuthoritiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleAuthoritiesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleAuthoritiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleAuthoritiesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleAuthoritiesPayload>
          }
          findFirst: {
            args: Prisma.RoleAuthoritiesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleAuthoritiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleAuthoritiesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleAuthoritiesPayload>
          }
          findMany: {
            args: Prisma.RoleAuthoritiesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleAuthoritiesPayload>[]
          }
          create: {
            args: Prisma.RoleAuthoritiesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleAuthoritiesPayload>
          }
          createMany: {
            args: Prisma.RoleAuthoritiesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleAuthoritiesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleAuthoritiesPayload>[]
          }
          delete: {
            args: Prisma.RoleAuthoritiesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleAuthoritiesPayload>
          }
          update: {
            args: Prisma.RoleAuthoritiesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleAuthoritiesPayload>
          }
          deleteMany: {
            args: Prisma.RoleAuthoritiesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleAuthoritiesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoleAuthoritiesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleAuthoritiesPayload>[]
          }
          upsert: {
            args: Prisma.RoleAuthoritiesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleAuthoritiesPayload>
          }
          aggregate: {
            args: Prisma.RoleAuthoritiesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoleAuthorities>
          }
          groupBy: {
            args: Prisma.RoleAuthoritiesGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleAuthoritiesGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleAuthoritiesCountArgs<ExtArgs>
            result: $Utils.Optional<RoleAuthoritiesCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    screenshots?: ScreenshotsOmit
    profilePicture?: ProfilePictureOmit
    project?: ProjectOmit
    sprint?: SprintOmit
    task?: TaskOmit
    subtask?: SubtaskOmit
    taskHistory?: TaskHistoryOmit
    comment?: CommentOmit
    taskAssignment?: TaskAssignmentOmit
    attachment?: AttachmentOmit
    userProjects?: UserProjectsOmit
    team?: TeamOmit
    teamMembers?: TeamMembersOmit
    role?: RoleOmit
    authority?: AuthorityOmit
    roleAuthorities?: RoleAuthoritiesOmit
    customer?: CustomerOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    projects: number
    teams: number
    roles: number
    authoredTasks: number
    assignedTasks: number
    authoredSubTasks: number
    assignedSubTasks: number
    taskAssignment: number
    attachments: number
    comments: number
    teamMembers: number
    userProjects: number
    reports: number
    taskHistory: number
    screenshot: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | UserCountOutputTypeCountProjectsArgs
    teams?: boolean | UserCountOutputTypeCountTeamsArgs
    roles?: boolean | UserCountOutputTypeCountRolesArgs
    authoredTasks?: boolean | UserCountOutputTypeCountAuthoredTasksArgs
    assignedTasks?: boolean | UserCountOutputTypeCountAssignedTasksArgs
    authoredSubTasks?: boolean | UserCountOutputTypeCountAuthoredSubTasksArgs
    assignedSubTasks?: boolean | UserCountOutputTypeCountAssignedSubTasksArgs
    taskAssignment?: boolean | UserCountOutputTypeCountTaskAssignmentArgs
    attachments?: boolean | UserCountOutputTypeCountAttachmentsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    teamMembers?: boolean | UserCountOutputTypeCountTeamMembersArgs
    userProjects?: boolean | UserCountOutputTypeCountUserProjectsArgs
    reports?: boolean | UserCountOutputTypeCountReportsArgs
    taskHistory?: boolean | UserCountOutputTypeCountTaskHistoryArgs
    screenshot?: boolean | UserCountOutputTypeCountScreenshotArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuthoredTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuthoredSubTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubtaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedSubTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubtaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTaskAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMembersWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProjectsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTaskHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountScreenshotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScreenshotsWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    tasks: number
    sprints: number
    users: number
    userProjects: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | ProjectCountOutputTypeCountTasksArgs
    sprints?: boolean | ProjectCountOutputTypeCountSprintsArgs
    users?: boolean | ProjectCountOutputTypeCountUsersArgs
    userProjects?: boolean | ProjectCountOutputTypeCountUserProjectsArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountSprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SprintWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountUserProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProjectsWhereInput
  }


  /**
   * Count Type SprintCountOutputType
   */

  export type SprintCountOutputType = {
    tasks: number
  }

  export type SprintCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | SprintCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * SprintCountOutputType without action
   */
  export type SprintCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SprintCountOutputType
     */
    select?: SprintCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SprintCountOutputType without action
   */
  export type SprintCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    taskAssignments: number
    attachments: number
    comments: number
    taskHistory: number
    subTasks: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    taskAssignments?: boolean | TaskCountOutputTypeCountTaskAssignmentsArgs
    attachments?: boolean | TaskCountOutputTypeCountAttachmentsArgs
    comments?: boolean | TaskCountOutputTypeCountCommentsArgs
    taskHistory?: boolean | TaskCountOutputTypeCountTaskHistoryArgs
    subTasks?: boolean | TaskCountOutputTypeCountSubTasksArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountTaskAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskAssignmentWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountTaskHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskHistoryWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountSubTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubtaskWhereInput
  }


  /**
   * Count Type SubtaskCountOutputType
   */

  export type SubtaskCountOutputType = {
    attachments: number
    comments: number
  }

  export type SubtaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attachments?: boolean | SubtaskCountOutputTypeCountAttachmentsArgs
    comments?: boolean | SubtaskCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * SubtaskCountOutputType without action
   */
  export type SubtaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubtaskCountOutputType
     */
    select?: SubtaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubtaskCountOutputType without action
   */
  export type SubtaskCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
  }

  /**
   * SubtaskCountOutputType without action
   */
  export type SubtaskCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    members: number
    teamMembers: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | TeamCountOutputTypeCountMembersArgs
    teamMembers?: boolean | TeamCountOutputTypeCountTeamMembersArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountTeamMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMembersWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
    authorities: number
    roleAuthorities: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
    authorities?: boolean | RoleCountOutputTypeCountAuthoritiesArgs
    roleAuthorities?: boolean | RoleCountOutputTypeCountRoleAuthoritiesArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountAuthoritiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthorityWhereInput
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountRoleAuthoritiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleAuthoritiesWhereInput
  }


  /**
   * Count Type AuthorityCountOutputType
   */

  export type AuthorityCountOutputType = {
    roles: number
    roleAuthorities: number
  }

  export type AuthorityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | AuthorityCountOutputTypeCountRolesArgs
    roleAuthorities?: boolean | AuthorityCountOutputTypeCountRoleAuthoritiesArgs
  }

  // Custom InputTypes
  /**
   * AuthorityCountOutputType without action
   */
  export type AuthorityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorityCountOutputType
     */
    select?: AuthorityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AuthorityCountOutputType without action
   */
  export type AuthorityCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
  }

  /**
   * AuthorityCountOutputType without action
   */
  export type AuthorityCountOutputTypeCountRoleAuthoritiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleAuthoritiesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    userId: number | null
    profilePictureId: number | null
    reportsToId: number | null
  }

  export type UserSumAggregateOutputType = {
    userId: number | null
    profilePictureId: number | null
    reportsToId: number | null
  }

  export type UserMinAggregateOutputType = {
    userId: number | null
    email: string | null
    password: string | null
    username: string | null
    designation: string | null
    phoneNumber: string | null
    profilePictureId: number | null
    resetPasswordOTP: string | null
    otpExpires: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reportsToId: number | null
  }

  export type UserMaxAggregateOutputType = {
    userId: number | null
    email: string | null
    password: string | null
    username: string | null
    designation: string | null
    phoneNumber: string | null
    profilePictureId: number | null
    resetPasswordOTP: string | null
    otpExpires: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reportsToId: number | null
  }

  export type UserCountAggregateOutputType = {
    userId: number
    email: number
    password: number
    username: number
    designation: number
    phoneNumber: number
    profilePictureId: number
    resetPasswordOTP: number
    otpExpires: number
    createdAt: number
    updatedAt: number
    reportsToId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    userId?: true
    profilePictureId?: true
    reportsToId?: true
  }

  export type UserSumAggregateInputType = {
    userId?: true
    profilePictureId?: true
    reportsToId?: true
  }

  export type UserMinAggregateInputType = {
    userId?: true
    email?: true
    password?: true
    username?: true
    designation?: true
    phoneNumber?: true
    profilePictureId?: true
    resetPasswordOTP?: true
    otpExpires?: true
    createdAt?: true
    updatedAt?: true
    reportsToId?: true
  }

  export type UserMaxAggregateInputType = {
    userId?: true
    email?: true
    password?: true
    username?: true
    designation?: true
    phoneNumber?: true
    profilePictureId?: true
    resetPasswordOTP?: true
    otpExpires?: true
    createdAt?: true
    updatedAt?: true
    reportsToId?: true
  }

  export type UserCountAggregateInputType = {
    userId?: true
    email?: true
    password?: true
    username?: true
    designation?: true
    phoneNumber?: true
    profilePictureId?: true
    resetPasswordOTP?: true
    otpExpires?: true
    createdAt?: true
    updatedAt?: true
    reportsToId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    userId: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId: number | null
    resetPasswordOTP: string | null
    otpExpires: string | null
    createdAt: Date
    updatedAt: Date
    reportsToId: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    email?: boolean
    password?: boolean
    username?: boolean
    designation?: boolean
    phoneNumber?: boolean
    profilePictureId?: boolean
    resetPasswordOTP?: boolean
    otpExpires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportsToId?: boolean
    projects?: boolean | User$projectsArgs<ExtArgs>
    teams?: boolean | User$teamsArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    authoredTasks?: boolean | User$authoredTasksArgs<ExtArgs>
    assignedTasks?: boolean | User$assignedTasksArgs<ExtArgs>
    authoredSubTasks?: boolean | User$authoredSubTasksArgs<ExtArgs>
    assignedSubTasks?: boolean | User$assignedSubTasksArgs<ExtArgs>
    taskAssignment?: boolean | User$taskAssignmentArgs<ExtArgs>
    attachments?: boolean | User$attachmentsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    teamMembers?: boolean | User$teamMembersArgs<ExtArgs>
    userProjects?: boolean | User$userProjectsArgs<ExtArgs>
    reportsTo?: boolean | User$reportsToArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    taskHistory?: boolean | User$taskHistoryArgs<ExtArgs>
    screenshot?: boolean | User$screenshotArgs<ExtArgs>
    project?: boolean | User$projectArgs<ExtArgs>
    profilePicture?: boolean | User$profilePictureArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    email?: boolean
    password?: boolean
    username?: boolean
    designation?: boolean
    phoneNumber?: boolean
    profilePictureId?: boolean
    resetPasswordOTP?: boolean
    otpExpires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportsToId?: boolean
    reportsTo?: boolean | User$reportsToArgs<ExtArgs>
    profilePicture?: boolean | User$profilePictureArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    email?: boolean
    password?: boolean
    username?: boolean
    designation?: boolean
    phoneNumber?: boolean
    profilePictureId?: boolean
    resetPasswordOTP?: boolean
    otpExpires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportsToId?: boolean
    reportsTo?: boolean | User$reportsToArgs<ExtArgs>
    profilePicture?: boolean | User$profilePictureArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    userId?: boolean
    email?: boolean
    password?: boolean
    username?: boolean
    designation?: boolean
    phoneNumber?: boolean
    profilePictureId?: boolean
    resetPasswordOTP?: boolean
    otpExpires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportsToId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "email" | "password" | "username" | "designation" | "phoneNumber" | "profilePictureId" | "resetPasswordOTP" | "otpExpires" | "createdAt" | "updatedAt" | "reportsToId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | User$projectsArgs<ExtArgs>
    teams?: boolean | User$teamsArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    authoredTasks?: boolean | User$authoredTasksArgs<ExtArgs>
    assignedTasks?: boolean | User$assignedTasksArgs<ExtArgs>
    authoredSubTasks?: boolean | User$authoredSubTasksArgs<ExtArgs>
    assignedSubTasks?: boolean | User$assignedSubTasksArgs<ExtArgs>
    taskAssignment?: boolean | User$taskAssignmentArgs<ExtArgs>
    attachments?: boolean | User$attachmentsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    teamMembers?: boolean | User$teamMembersArgs<ExtArgs>
    userProjects?: boolean | User$userProjectsArgs<ExtArgs>
    reportsTo?: boolean | User$reportsToArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    taskHistory?: boolean | User$taskHistoryArgs<ExtArgs>
    screenshot?: boolean | User$screenshotArgs<ExtArgs>
    project?: boolean | User$projectArgs<ExtArgs>
    profilePicture?: boolean | User$profilePictureArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportsTo?: boolean | User$reportsToArgs<ExtArgs>
    profilePicture?: boolean | User$profilePictureArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportsTo?: boolean | User$reportsToArgs<ExtArgs>
    profilePicture?: boolean | User$profilePictureArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      teams: Prisma.$TeamPayload<ExtArgs>[]
      roles: Prisma.$RolePayload<ExtArgs>[]
      authoredTasks: Prisma.$TaskPayload<ExtArgs>[]
      assignedTasks: Prisma.$TaskPayload<ExtArgs>[]
      authoredSubTasks: Prisma.$SubtaskPayload<ExtArgs>[]
      assignedSubTasks: Prisma.$SubtaskPayload<ExtArgs>[]
      taskAssignment: Prisma.$TaskAssignmentPayload<ExtArgs>[]
      attachments: Prisma.$AttachmentPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      teamMembers: Prisma.$TeamMembersPayload<ExtArgs>[]
      userProjects: Prisma.$UserProjectsPayload<ExtArgs>[]
      reportsTo: Prisma.$UserPayload<ExtArgs> | null
      reports: Prisma.$UserPayload<ExtArgs>[]
      taskHistory: Prisma.$TaskHistoryPayload<ExtArgs>[]
      screenshot: Prisma.$ScreenshotsPayload<ExtArgs>[]
      project: Prisma.$ProjectPayload<ExtArgs> | null
      profilePicture: Prisma.$ProfilePicturePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      email: string
      password: string
      username: string
      designation: string
      phoneNumber: string
      profilePictureId: number | null
      resetPasswordOTP: string | null
      otpExpires: string | null
      createdAt: Date
      updatedAt: Date
      reportsToId: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userWithUserIdOnly = await prisma.user.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `userId`
     * const userWithUserIdOnly = await prisma.user.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `userId`
     * const userWithUserIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projects<T extends User$projectsArgs<ExtArgs> = {}>(args?: Subset<T, User$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    teams<T extends User$teamsArgs<ExtArgs> = {}>(args?: Subset<T, User$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    roles<T extends User$rolesArgs<ExtArgs> = {}>(args?: Subset<T, User$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    authoredTasks<T extends User$authoredTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$authoredTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    assignedTasks<T extends User$assignedTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    authoredSubTasks<T extends User$authoredSubTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$authoredSubTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    assignedSubTasks<T extends User$assignedSubTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedSubTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    taskAssignment<T extends User$taskAssignmentArgs<ExtArgs> = {}>(args?: Subset<T, User$taskAssignmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    attachments<T extends User$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    teamMembers<T extends User$teamMembersArgs<ExtArgs> = {}>(args?: Subset<T, User$teamMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    userProjects<T extends User$userProjectsArgs<ExtArgs> = {}>(args?: Subset<T, User$userProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProjectsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    reportsTo<T extends User$reportsToArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    reports<T extends User$reportsArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    taskHistory<T extends User$taskHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$taskHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskHistoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    screenshot<T extends User$screenshotArgs<ExtArgs> = {}>(args?: Subset<T, User$screenshotArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    project<T extends User$projectArgs<ExtArgs> = {}>(args?: Subset<T, User$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    profilePicture<T extends User$profilePictureArgs<ExtArgs> = {}>(args?: Subset<T, User$profilePictureArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly userId: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly designation: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly profilePictureId: FieldRef<"User", 'Int'>
    readonly resetPasswordOTP: FieldRef<"User", 'String'>
    readonly otpExpires: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly reportsToId: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.projects
   */
  export type User$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.teams
   */
  export type User$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * User.roles
   */
  export type User$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    cursor?: RoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * User.authoredTasks
   */
  export type User$authoredTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * User.assignedTasks
   */
  export type User$assignedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * User.authoredSubTasks
   */
  export type User$authoredSubTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
    where?: SubtaskWhereInput
    orderBy?: SubtaskOrderByWithRelationInput | SubtaskOrderByWithRelationInput[]
    cursor?: SubtaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubtaskScalarFieldEnum | SubtaskScalarFieldEnum[]
  }

  /**
   * User.assignedSubTasks
   */
  export type User$assignedSubTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
    where?: SubtaskWhereInput
    orderBy?: SubtaskOrderByWithRelationInput | SubtaskOrderByWithRelationInput[]
    cursor?: SubtaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubtaskScalarFieldEnum | SubtaskScalarFieldEnum[]
  }

  /**
   * User.taskAssignment
   */
  export type User$taskAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    where?: TaskAssignmentWhereInput
    orderBy?: TaskAssignmentOrderByWithRelationInput | TaskAssignmentOrderByWithRelationInput[]
    cursor?: TaskAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskAssignmentScalarFieldEnum | TaskAssignmentScalarFieldEnum[]
  }

  /**
   * User.attachments
   */
  export type User$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    cursor?: AttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.teamMembers
   */
  export type User$teamMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    where?: TeamMembersWhereInput
    orderBy?: TeamMembersOrderByWithRelationInput | TeamMembersOrderByWithRelationInput[]
    cursor?: TeamMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * User.userProjects
   */
  export type User$userProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProjects
     */
    select?: UserProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProjects
     */
    omit?: UserProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectsInclude<ExtArgs> | null
    where?: UserProjectsWhereInput
    orderBy?: UserProjectsOrderByWithRelationInput | UserProjectsOrderByWithRelationInput[]
    cursor?: UserProjectsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserProjectsScalarFieldEnum | UserProjectsScalarFieldEnum[]
  }

  /**
   * User.reportsTo
   */
  export type User$reportsToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.reports
   */
  export type User$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.taskHistory
   */
  export type User$taskHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskHistory
     */
    select?: TaskHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskHistory
     */
    omit?: TaskHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskHistoryInclude<ExtArgs> | null
    where?: TaskHistoryWhereInput
    orderBy?: TaskHistoryOrderByWithRelationInput | TaskHistoryOrderByWithRelationInput[]
    cursor?: TaskHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskHistoryScalarFieldEnum | TaskHistoryScalarFieldEnum[]
  }

  /**
   * User.screenshot
   */
  export type User$screenshotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    where?: ScreenshotsWhereInput
    orderBy?: ScreenshotsOrderByWithRelationInput | ScreenshotsOrderByWithRelationInput[]
    cursor?: ScreenshotsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScreenshotsScalarFieldEnum | ScreenshotsScalarFieldEnum[]
  }

  /**
   * User.project
   */
  export type User$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * User.profilePicture
   */
  export type User$profilePictureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    where?: ProfilePictureWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Screenshots
   */

  export type AggregateScreenshots = {
    _count: ScreenshotsCountAggregateOutputType | null
    _avg: ScreenshotsAvgAggregateOutputType | null
    _sum: ScreenshotsSumAggregateOutputType | null
    _min: ScreenshotsMinAggregateOutputType | null
    _max: ScreenshotsMaxAggregateOutputType | null
  }

  export type ScreenshotsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ScreenshotsSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ScreenshotsMinAggregateOutputType = {
    id: number | null
    username: string | null
    time: string | null
    date: Date | null
    base64: string | null
    userId: number | null
  }

  export type ScreenshotsMaxAggregateOutputType = {
    id: number | null
    username: string | null
    time: string | null
    date: Date | null
    base64: string | null
    userId: number | null
  }

  export type ScreenshotsCountAggregateOutputType = {
    id: number
    username: number
    time: number
    date: number
    base64: number
    userId: number
    _all: number
  }


  export type ScreenshotsAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ScreenshotsSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ScreenshotsMinAggregateInputType = {
    id?: true
    username?: true
    time?: true
    date?: true
    base64?: true
    userId?: true
  }

  export type ScreenshotsMaxAggregateInputType = {
    id?: true
    username?: true
    time?: true
    date?: true
    base64?: true
    userId?: true
  }

  export type ScreenshotsCountAggregateInputType = {
    id?: true
    username?: true
    time?: true
    date?: true
    base64?: true
    userId?: true
    _all?: true
  }

  export type ScreenshotsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Screenshots to aggregate.
     */
    where?: ScreenshotsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Screenshots to fetch.
     */
    orderBy?: ScreenshotsOrderByWithRelationInput | ScreenshotsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScreenshotsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Screenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Screenshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Screenshots
    **/
    _count?: true | ScreenshotsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScreenshotsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScreenshotsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScreenshotsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScreenshotsMaxAggregateInputType
  }

  export type GetScreenshotsAggregateType<T extends ScreenshotsAggregateArgs> = {
        [P in keyof T & keyof AggregateScreenshots]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScreenshots[P]>
      : GetScalarType<T[P], AggregateScreenshots[P]>
  }




  export type ScreenshotsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScreenshotsWhereInput
    orderBy?: ScreenshotsOrderByWithAggregationInput | ScreenshotsOrderByWithAggregationInput[]
    by: ScreenshotsScalarFieldEnum[] | ScreenshotsScalarFieldEnum
    having?: ScreenshotsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScreenshotsCountAggregateInputType | true
    _avg?: ScreenshotsAvgAggregateInputType
    _sum?: ScreenshotsSumAggregateInputType
    _min?: ScreenshotsMinAggregateInputType
    _max?: ScreenshotsMaxAggregateInputType
  }

  export type ScreenshotsGroupByOutputType = {
    id: number
    username: string
    time: string
    date: Date | null
    base64: string
    userId: number
    _count: ScreenshotsCountAggregateOutputType | null
    _avg: ScreenshotsAvgAggregateOutputType | null
    _sum: ScreenshotsSumAggregateOutputType | null
    _min: ScreenshotsMinAggregateOutputType | null
    _max: ScreenshotsMaxAggregateOutputType | null
  }

  type GetScreenshotsGroupByPayload<T extends ScreenshotsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScreenshotsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScreenshotsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScreenshotsGroupByOutputType[P]>
            : GetScalarType<T[P], ScreenshotsGroupByOutputType[P]>
        }
      >
    >


  export type ScreenshotsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    time?: boolean
    date?: boolean
    base64?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["screenshots"]>

  export type ScreenshotsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    time?: boolean
    date?: boolean
    base64?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["screenshots"]>

  export type ScreenshotsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    time?: boolean
    date?: boolean
    base64?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["screenshots"]>

  export type ScreenshotsSelectScalar = {
    id?: boolean
    username?: boolean
    time?: boolean
    date?: boolean
    base64?: boolean
    userId?: boolean
  }

  export type ScreenshotsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "time" | "date" | "base64" | "userId", ExtArgs["result"]["screenshots"]>
  export type ScreenshotsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ScreenshotsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ScreenshotsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ScreenshotsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Screenshots"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      time: string
      date: Date | null
      base64: string
      userId: number
    }, ExtArgs["result"]["screenshots"]>
    composites: {}
  }

  type ScreenshotsGetPayload<S extends boolean | null | undefined | ScreenshotsDefaultArgs> = $Result.GetResult<Prisma.$ScreenshotsPayload, S>

  type ScreenshotsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScreenshotsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScreenshotsCountAggregateInputType | true
    }

  export interface ScreenshotsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Screenshots'], meta: { name: 'Screenshots' } }
    /**
     * Find zero or one Screenshots that matches the filter.
     * @param {ScreenshotsFindUniqueArgs} args - Arguments to find a Screenshots
     * @example
     * // Get one Screenshots
     * const screenshots = await prisma.screenshots.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScreenshotsFindUniqueArgs>(args: SelectSubset<T, ScreenshotsFindUniqueArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Screenshots that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScreenshotsFindUniqueOrThrowArgs} args - Arguments to find a Screenshots
     * @example
     * // Get one Screenshots
     * const screenshots = await prisma.screenshots.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScreenshotsFindUniqueOrThrowArgs>(args: SelectSubset<T, ScreenshotsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Screenshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScreenshotsFindFirstArgs} args - Arguments to find a Screenshots
     * @example
     * // Get one Screenshots
     * const screenshots = await prisma.screenshots.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScreenshotsFindFirstArgs>(args?: SelectSubset<T, ScreenshotsFindFirstArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Screenshots that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScreenshotsFindFirstOrThrowArgs} args - Arguments to find a Screenshots
     * @example
     * // Get one Screenshots
     * const screenshots = await prisma.screenshots.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScreenshotsFindFirstOrThrowArgs>(args?: SelectSubset<T, ScreenshotsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Screenshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScreenshotsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Screenshots
     * const screenshots = await prisma.screenshots.findMany()
     * 
     * // Get first 10 Screenshots
     * const screenshots = await prisma.screenshots.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const screenshotsWithIdOnly = await prisma.screenshots.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScreenshotsFindManyArgs>(args?: SelectSubset<T, ScreenshotsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Screenshots.
     * @param {ScreenshotsCreateArgs} args - Arguments to create a Screenshots.
     * @example
     * // Create one Screenshots
     * const Screenshots = await prisma.screenshots.create({
     *   data: {
     *     // ... data to create a Screenshots
     *   }
     * })
     * 
     */
    create<T extends ScreenshotsCreateArgs>(args: SelectSubset<T, ScreenshotsCreateArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Screenshots.
     * @param {ScreenshotsCreateManyArgs} args - Arguments to create many Screenshots.
     * @example
     * // Create many Screenshots
     * const screenshots = await prisma.screenshots.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScreenshotsCreateManyArgs>(args?: SelectSubset<T, ScreenshotsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Screenshots and returns the data saved in the database.
     * @param {ScreenshotsCreateManyAndReturnArgs} args - Arguments to create many Screenshots.
     * @example
     * // Create many Screenshots
     * const screenshots = await prisma.screenshots.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Screenshots and only return the `id`
     * const screenshotsWithIdOnly = await prisma.screenshots.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScreenshotsCreateManyAndReturnArgs>(args?: SelectSubset<T, ScreenshotsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Screenshots.
     * @param {ScreenshotsDeleteArgs} args - Arguments to delete one Screenshots.
     * @example
     * // Delete one Screenshots
     * const Screenshots = await prisma.screenshots.delete({
     *   where: {
     *     // ... filter to delete one Screenshots
     *   }
     * })
     * 
     */
    delete<T extends ScreenshotsDeleteArgs>(args: SelectSubset<T, ScreenshotsDeleteArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Screenshots.
     * @param {ScreenshotsUpdateArgs} args - Arguments to update one Screenshots.
     * @example
     * // Update one Screenshots
     * const screenshots = await prisma.screenshots.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScreenshotsUpdateArgs>(args: SelectSubset<T, ScreenshotsUpdateArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Screenshots.
     * @param {ScreenshotsDeleteManyArgs} args - Arguments to filter Screenshots to delete.
     * @example
     * // Delete a few Screenshots
     * const { count } = await prisma.screenshots.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScreenshotsDeleteManyArgs>(args?: SelectSubset<T, ScreenshotsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Screenshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScreenshotsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Screenshots
     * const screenshots = await prisma.screenshots.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScreenshotsUpdateManyArgs>(args: SelectSubset<T, ScreenshotsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Screenshots and returns the data updated in the database.
     * @param {ScreenshotsUpdateManyAndReturnArgs} args - Arguments to update many Screenshots.
     * @example
     * // Update many Screenshots
     * const screenshots = await prisma.screenshots.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Screenshots and only return the `id`
     * const screenshotsWithIdOnly = await prisma.screenshots.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScreenshotsUpdateManyAndReturnArgs>(args: SelectSubset<T, ScreenshotsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Screenshots.
     * @param {ScreenshotsUpsertArgs} args - Arguments to update or create a Screenshots.
     * @example
     * // Update or create a Screenshots
     * const screenshots = await prisma.screenshots.upsert({
     *   create: {
     *     // ... data to create a Screenshots
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Screenshots we want to update
     *   }
     * })
     */
    upsert<T extends ScreenshotsUpsertArgs>(args: SelectSubset<T, ScreenshotsUpsertArgs<ExtArgs>>): Prisma__ScreenshotsClient<$Result.GetResult<Prisma.$ScreenshotsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Screenshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScreenshotsCountArgs} args - Arguments to filter Screenshots to count.
     * @example
     * // Count the number of Screenshots
     * const count = await prisma.screenshots.count({
     *   where: {
     *     // ... the filter for the Screenshots we want to count
     *   }
     * })
    **/
    count<T extends ScreenshotsCountArgs>(
      args?: Subset<T, ScreenshotsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScreenshotsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Screenshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScreenshotsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScreenshotsAggregateArgs>(args: Subset<T, ScreenshotsAggregateArgs>): Prisma.PrismaPromise<GetScreenshotsAggregateType<T>>

    /**
     * Group by Screenshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScreenshotsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScreenshotsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScreenshotsGroupByArgs['orderBy'] }
        : { orderBy?: ScreenshotsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScreenshotsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScreenshotsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Screenshots model
   */
  readonly fields: ScreenshotsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Screenshots.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScreenshotsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Screenshots model
   */ 
  interface ScreenshotsFieldRefs {
    readonly id: FieldRef<"Screenshots", 'Int'>
    readonly username: FieldRef<"Screenshots", 'String'>
    readonly time: FieldRef<"Screenshots", 'String'>
    readonly date: FieldRef<"Screenshots", 'DateTime'>
    readonly base64: FieldRef<"Screenshots", 'String'>
    readonly userId: FieldRef<"Screenshots", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Screenshots findUnique
   */
  export type ScreenshotsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * Filter, which Screenshots to fetch.
     */
    where: ScreenshotsWhereUniqueInput
  }

  /**
   * Screenshots findUniqueOrThrow
   */
  export type ScreenshotsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * Filter, which Screenshots to fetch.
     */
    where: ScreenshotsWhereUniqueInput
  }

  /**
   * Screenshots findFirst
   */
  export type ScreenshotsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * Filter, which Screenshots to fetch.
     */
    where?: ScreenshotsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Screenshots to fetch.
     */
    orderBy?: ScreenshotsOrderByWithRelationInput | ScreenshotsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Screenshots.
     */
    cursor?: ScreenshotsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Screenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Screenshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Screenshots.
     */
    distinct?: ScreenshotsScalarFieldEnum | ScreenshotsScalarFieldEnum[]
  }

  /**
   * Screenshots findFirstOrThrow
   */
  export type ScreenshotsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * Filter, which Screenshots to fetch.
     */
    where?: ScreenshotsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Screenshots to fetch.
     */
    orderBy?: ScreenshotsOrderByWithRelationInput | ScreenshotsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Screenshots.
     */
    cursor?: ScreenshotsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Screenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Screenshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Screenshots.
     */
    distinct?: ScreenshotsScalarFieldEnum | ScreenshotsScalarFieldEnum[]
  }

  /**
   * Screenshots findMany
   */
  export type ScreenshotsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * Filter, which Screenshots to fetch.
     */
    where?: ScreenshotsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Screenshots to fetch.
     */
    orderBy?: ScreenshotsOrderByWithRelationInput | ScreenshotsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Screenshots.
     */
    cursor?: ScreenshotsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Screenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Screenshots.
     */
    skip?: number
    distinct?: ScreenshotsScalarFieldEnum | ScreenshotsScalarFieldEnum[]
  }

  /**
   * Screenshots create
   */
  export type ScreenshotsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * The data needed to create a Screenshots.
     */
    data: XOR<ScreenshotsCreateInput, ScreenshotsUncheckedCreateInput>
  }

  /**
   * Screenshots createMany
   */
  export type ScreenshotsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Screenshots.
     */
    data: ScreenshotsCreateManyInput | ScreenshotsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Screenshots createManyAndReturn
   */
  export type ScreenshotsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * The data used to create many Screenshots.
     */
    data: ScreenshotsCreateManyInput | ScreenshotsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Screenshots update
   */
  export type ScreenshotsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * The data needed to update a Screenshots.
     */
    data: XOR<ScreenshotsUpdateInput, ScreenshotsUncheckedUpdateInput>
    /**
     * Choose, which Screenshots to update.
     */
    where: ScreenshotsWhereUniqueInput
  }

  /**
   * Screenshots updateMany
   */
  export type ScreenshotsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Screenshots.
     */
    data: XOR<ScreenshotsUpdateManyMutationInput, ScreenshotsUncheckedUpdateManyInput>
    /**
     * Filter which Screenshots to update
     */
    where?: ScreenshotsWhereInput
    /**
     * Limit how many Screenshots to update.
     */
    limit?: number
  }

  /**
   * Screenshots updateManyAndReturn
   */
  export type ScreenshotsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * The data used to update Screenshots.
     */
    data: XOR<ScreenshotsUpdateManyMutationInput, ScreenshotsUncheckedUpdateManyInput>
    /**
     * Filter which Screenshots to update
     */
    where?: ScreenshotsWhereInput
    /**
     * Limit how many Screenshots to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Screenshots upsert
   */
  export type ScreenshotsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * The filter to search for the Screenshots to update in case it exists.
     */
    where: ScreenshotsWhereUniqueInput
    /**
     * In case the Screenshots found by the `where` argument doesn't exist, create a new Screenshots with this data.
     */
    create: XOR<ScreenshotsCreateInput, ScreenshotsUncheckedCreateInput>
    /**
     * In case the Screenshots was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScreenshotsUpdateInput, ScreenshotsUncheckedUpdateInput>
  }

  /**
   * Screenshots delete
   */
  export type ScreenshotsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
    /**
     * Filter which Screenshots to delete.
     */
    where: ScreenshotsWhereUniqueInput
  }

  /**
   * Screenshots deleteMany
   */
  export type ScreenshotsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Screenshots to delete
     */
    where?: ScreenshotsWhereInput
    /**
     * Limit how many Screenshots to delete.
     */
    limit?: number
  }

  /**
   * Screenshots without action
   */
  export type ScreenshotsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Screenshots
     */
    select?: ScreenshotsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Screenshots
     */
    omit?: ScreenshotsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScreenshotsInclude<ExtArgs> | null
  }


  /**
   * Model ProfilePicture
   */

  export type AggregateProfilePicture = {
    _count: ProfilePictureCountAggregateOutputType | null
    _avg: ProfilePictureAvgAggregateOutputType | null
    _sum: ProfilePictureSumAggregateOutputType | null
    _min: ProfilePictureMinAggregateOutputType | null
    _max: ProfilePictureMaxAggregateOutputType | null
  }

  export type ProfilePictureAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfilePictureSumAggregateOutputType = {
    id: number | null
  }

  export type ProfilePictureMinAggregateOutputType = {
    id: number | null
    base64: string | null
  }

  export type ProfilePictureMaxAggregateOutputType = {
    id: number | null
    base64: string | null
  }

  export type ProfilePictureCountAggregateOutputType = {
    id: number
    base64: number
    _all: number
  }


  export type ProfilePictureAvgAggregateInputType = {
    id?: true
  }

  export type ProfilePictureSumAggregateInputType = {
    id?: true
  }

  export type ProfilePictureMinAggregateInputType = {
    id?: true
    base64?: true
  }

  export type ProfilePictureMaxAggregateInputType = {
    id?: true
    base64?: true
  }

  export type ProfilePictureCountAggregateInputType = {
    id?: true
    base64?: true
    _all?: true
  }

  export type ProfilePictureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfilePicture to aggregate.
     */
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     */
    orderBy?: ProfilePictureOrderByWithRelationInput | ProfilePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfilePictures
    **/
    _count?: true | ProfilePictureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfilePictureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfilePictureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfilePictureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfilePictureMaxAggregateInputType
  }

  export type GetProfilePictureAggregateType<T extends ProfilePictureAggregateArgs> = {
        [P in keyof T & keyof AggregateProfilePicture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfilePicture[P]>
      : GetScalarType<T[P], AggregateProfilePicture[P]>
  }




  export type ProfilePictureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilePictureWhereInput
    orderBy?: ProfilePictureOrderByWithAggregationInput | ProfilePictureOrderByWithAggregationInput[]
    by: ProfilePictureScalarFieldEnum[] | ProfilePictureScalarFieldEnum
    having?: ProfilePictureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfilePictureCountAggregateInputType | true
    _avg?: ProfilePictureAvgAggregateInputType
    _sum?: ProfilePictureSumAggregateInputType
    _min?: ProfilePictureMinAggregateInputType
    _max?: ProfilePictureMaxAggregateInputType
  }

  export type ProfilePictureGroupByOutputType = {
    id: number
    base64: string
    _count: ProfilePictureCountAggregateOutputType | null
    _avg: ProfilePictureAvgAggregateOutputType | null
    _sum: ProfilePictureSumAggregateOutputType | null
    _min: ProfilePictureMinAggregateOutputType | null
    _max: ProfilePictureMaxAggregateOutputType | null
  }

  type GetProfilePictureGroupByPayload<T extends ProfilePictureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfilePictureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfilePictureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfilePictureGroupByOutputType[P]>
            : GetScalarType<T[P], ProfilePictureGroupByOutputType[P]>
        }
      >
    >


  export type ProfilePictureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    base64?: boolean
    user?: boolean | ProfilePicture$userArgs<ExtArgs>
  }, ExtArgs["result"]["profilePicture"]>

  export type ProfilePictureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    base64?: boolean
  }, ExtArgs["result"]["profilePicture"]>

  export type ProfilePictureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    base64?: boolean
  }, ExtArgs["result"]["profilePicture"]>

  export type ProfilePictureSelectScalar = {
    id?: boolean
    base64?: boolean
  }

  export type ProfilePictureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "base64", ExtArgs["result"]["profilePicture"]>
  export type ProfilePictureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | ProfilePicture$userArgs<ExtArgs>
  }
  export type ProfilePictureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProfilePictureIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProfilePicturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfilePicture"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      base64: string
    }, ExtArgs["result"]["profilePicture"]>
    composites: {}
  }

  type ProfilePictureGetPayload<S extends boolean | null | undefined | ProfilePictureDefaultArgs> = $Result.GetResult<Prisma.$ProfilePicturePayload, S>

  type ProfilePictureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfilePictureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfilePictureCountAggregateInputType | true
    }

  export interface ProfilePictureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfilePicture'], meta: { name: 'ProfilePicture' } }
    /**
     * Find zero or one ProfilePicture that matches the filter.
     * @param {ProfilePictureFindUniqueArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfilePictureFindUniqueArgs>(args: SelectSubset<T, ProfilePictureFindUniqueArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ProfilePicture that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfilePictureFindUniqueOrThrowArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfilePictureFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfilePictureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ProfilePicture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureFindFirstArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfilePictureFindFirstArgs>(args?: SelectSubset<T, ProfilePictureFindFirstArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ProfilePicture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureFindFirstOrThrowArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfilePictureFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfilePictureFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ProfilePictures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfilePictures
     * const profilePictures = await prisma.profilePicture.findMany()
     * 
     * // Get first 10 ProfilePictures
     * const profilePictures = await prisma.profilePicture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profilePictureWithIdOnly = await prisma.profilePicture.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfilePictureFindManyArgs>(args?: SelectSubset<T, ProfilePictureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ProfilePicture.
     * @param {ProfilePictureCreateArgs} args - Arguments to create a ProfilePicture.
     * @example
     * // Create one ProfilePicture
     * const ProfilePicture = await prisma.profilePicture.create({
     *   data: {
     *     // ... data to create a ProfilePicture
     *   }
     * })
     * 
     */
    create<T extends ProfilePictureCreateArgs>(args: SelectSubset<T, ProfilePictureCreateArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ProfilePictures.
     * @param {ProfilePictureCreateManyArgs} args - Arguments to create many ProfilePictures.
     * @example
     * // Create many ProfilePictures
     * const profilePicture = await prisma.profilePicture.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfilePictureCreateManyArgs>(args?: SelectSubset<T, ProfilePictureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProfilePictures and returns the data saved in the database.
     * @param {ProfilePictureCreateManyAndReturnArgs} args - Arguments to create many ProfilePictures.
     * @example
     * // Create many ProfilePictures
     * const profilePicture = await prisma.profilePicture.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProfilePictures and only return the `id`
     * const profilePictureWithIdOnly = await prisma.profilePicture.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfilePictureCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfilePictureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ProfilePicture.
     * @param {ProfilePictureDeleteArgs} args - Arguments to delete one ProfilePicture.
     * @example
     * // Delete one ProfilePicture
     * const ProfilePicture = await prisma.profilePicture.delete({
     *   where: {
     *     // ... filter to delete one ProfilePicture
     *   }
     * })
     * 
     */
    delete<T extends ProfilePictureDeleteArgs>(args: SelectSubset<T, ProfilePictureDeleteArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ProfilePicture.
     * @param {ProfilePictureUpdateArgs} args - Arguments to update one ProfilePicture.
     * @example
     * // Update one ProfilePicture
     * const profilePicture = await prisma.profilePicture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfilePictureUpdateArgs>(args: SelectSubset<T, ProfilePictureUpdateArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ProfilePictures.
     * @param {ProfilePictureDeleteManyArgs} args - Arguments to filter ProfilePictures to delete.
     * @example
     * // Delete a few ProfilePictures
     * const { count } = await prisma.profilePicture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfilePictureDeleteManyArgs>(args?: SelectSubset<T, ProfilePictureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfilePictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfilePictures
     * const profilePicture = await prisma.profilePicture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfilePictureUpdateManyArgs>(args: SelectSubset<T, ProfilePictureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfilePictures and returns the data updated in the database.
     * @param {ProfilePictureUpdateManyAndReturnArgs} args - Arguments to update many ProfilePictures.
     * @example
     * // Update many ProfilePictures
     * const profilePicture = await prisma.profilePicture.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProfilePictures and only return the `id`
     * const profilePictureWithIdOnly = await prisma.profilePicture.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfilePictureUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfilePictureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ProfilePicture.
     * @param {ProfilePictureUpsertArgs} args - Arguments to update or create a ProfilePicture.
     * @example
     * // Update or create a ProfilePicture
     * const profilePicture = await prisma.profilePicture.upsert({
     *   create: {
     *     // ... data to create a ProfilePicture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfilePicture we want to update
     *   }
     * })
     */
    upsert<T extends ProfilePictureUpsertArgs>(args: SelectSubset<T, ProfilePictureUpsertArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ProfilePictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureCountArgs} args - Arguments to filter ProfilePictures to count.
     * @example
     * // Count the number of ProfilePictures
     * const count = await prisma.profilePicture.count({
     *   where: {
     *     // ... the filter for the ProfilePictures we want to count
     *   }
     * })
    **/
    count<T extends ProfilePictureCountArgs>(
      args?: Subset<T, ProfilePictureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfilePictureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfilePicture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfilePictureAggregateArgs>(args: Subset<T, ProfilePictureAggregateArgs>): Prisma.PrismaPromise<GetProfilePictureAggregateType<T>>

    /**
     * Group by ProfilePicture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfilePictureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfilePictureGroupByArgs['orderBy'] }
        : { orderBy?: ProfilePictureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfilePictureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfilePictureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfilePicture model
   */
  readonly fields: ProfilePictureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfilePicture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfilePictureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends ProfilePicture$userArgs<ExtArgs> = {}>(args?: Subset<T, ProfilePicture$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfilePicture model
   */ 
  interface ProfilePictureFieldRefs {
    readonly id: FieldRef<"ProfilePicture", 'Int'>
    readonly base64: FieldRef<"ProfilePicture", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProfilePicture findUnique
   */
  export type ProfilePictureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePicture to fetch.
     */
    where: ProfilePictureWhereUniqueInput
  }

  /**
   * ProfilePicture findUniqueOrThrow
   */
  export type ProfilePictureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePicture to fetch.
     */
    where: ProfilePictureWhereUniqueInput
  }

  /**
   * ProfilePicture findFirst
   */
  export type ProfilePictureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePicture to fetch.
     */
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     */
    orderBy?: ProfilePictureOrderByWithRelationInput | ProfilePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilePictures.
     */
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilePictures.
     */
    distinct?: ProfilePictureScalarFieldEnum | ProfilePictureScalarFieldEnum[]
  }

  /**
   * ProfilePicture findFirstOrThrow
   */
  export type ProfilePictureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePicture to fetch.
     */
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     */
    orderBy?: ProfilePictureOrderByWithRelationInput | ProfilePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilePictures.
     */
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilePictures.
     */
    distinct?: ProfilePictureScalarFieldEnum | ProfilePictureScalarFieldEnum[]
  }

  /**
   * ProfilePicture findMany
   */
  export type ProfilePictureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePictures to fetch.
     */
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     */
    orderBy?: ProfilePictureOrderByWithRelationInput | ProfilePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfilePictures.
     */
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     */
    skip?: number
    distinct?: ProfilePictureScalarFieldEnum | ProfilePictureScalarFieldEnum[]
  }

  /**
   * ProfilePicture create
   */
  export type ProfilePictureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfilePicture.
     */
    data: XOR<ProfilePictureCreateInput, ProfilePictureUncheckedCreateInput>
  }

  /**
   * ProfilePicture createMany
   */
  export type ProfilePictureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfilePictures.
     */
    data: ProfilePictureCreateManyInput | ProfilePictureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfilePicture createManyAndReturn
   */
  export type ProfilePictureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * The data used to create many ProfilePictures.
     */
    data: ProfilePictureCreateManyInput | ProfilePictureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfilePicture update
   */
  export type ProfilePictureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfilePicture.
     */
    data: XOR<ProfilePictureUpdateInput, ProfilePictureUncheckedUpdateInput>
    /**
     * Choose, which ProfilePicture to update.
     */
    where: ProfilePictureWhereUniqueInput
  }

  /**
   * ProfilePicture updateMany
   */
  export type ProfilePictureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfilePictures.
     */
    data: XOR<ProfilePictureUpdateManyMutationInput, ProfilePictureUncheckedUpdateManyInput>
    /**
     * Filter which ProfilePictures to update
     */
    where?: ProfilePictureWhereInput
    /**
     * Limit how many ProfilePictures to update.
     */
    limit?: number
  }

  /**
   * ProfilePicture updateManyAndReturn
   */
  export type ProfilePictureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * The data used to update ProfilePictures.
     */
    data: XOR<ProfilePictureUpdateManyMutationInput, ProfilePictureUncheckedUpdateManyInput>
    /**
     * Filter which ProfilePictures to update
     */
    where?: ProfilePictureWhereInput
    /**
     * Limit how many ProfilePictures to update.
     */
    limit?: number
  }

  /**
   * ProfilePicture upsert
   */
  export type ProfilePictureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfilePicture to update in case it exists.
     */
    where: ProfilePictureWhereUniqueInput
    /**
     * In case the ProfilePicture found by the `where` argument doesn't exist, create a new ProfilePicture with this data.
     */
    create: XOR<ProfilePictureCreateInput, ProfilePictureUncheckedCreateInput>
    /**
     * In case the ProfilePicture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfilePictureUpdateInput, ProfilePictureUncheckedUpdateInput>
  }

  /**
   * ProfilePicture delete
   */
  export type ProfilePictureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter which ProfilePicture to delete.
     */
    where: ProfilePictureWhereUniqueInput
  }

  /**
   * ProfilePicture deleteMany
   */
  export type ProfilePictureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfilePictures to delete
     */
    where?: ProfilePictureWhereInput
    /**
     * Limit how many ProfilePictures to delete.
     */
    limit?: number
  }

  /**
   * ProfilePicture.user
   */
  export type ProfilePicture$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ProfilePicture without action
   */
  export type ProfilePictureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    id: number | null
    projectManager: number | null
  }

  export type ProjectSumAggregateOutputType = {
    id: number | null
    projectManager: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    projectManager: number | null
    startDate: string | null
    endDate: string | null
    status: string | null
    field5: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    projectManager: number | null
    startDate: string | null
    endDate: string | null
    status: string | null
    field5: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    projectManager: number
    startDate: number
    endDate: number
    status: number
    field5: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    id?: true
    projectManager?: true
  }

  export type ProjectSumAggregateInputType = {
    id?: true
    projectManager?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    projectManager?: true
    startDate?: true
    endDate?: true
    status?: true
    field5?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    projectManager?: true
    startDate?: true
    endDate?: true
    status?: true
    field5?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    projectManager?: true
    startDate?: true
    endDate?: true
    status?: true
    field5?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: number
    name: string
    description: string | null
    projectManager: number
    startDate: string | null
    endDate: string | null
    status: string | null
    field5: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    projectManager?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    field5?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tasks?: boolean | Project$tasksArgs<ExtArgs>
    sprints?: boolean | Project$sprintsArgs<ExtArgs>
    users?: boolean | Project$usersArgs<ExtArgs>
    userProjects?: boolean | Project$userProjectsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    projectManager?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    field5?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    projectManager?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    field5?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    projectManager?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    field5?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "projectManager" | "startDate" | "endDate" | "status" | "field5" | "createdAt" | "updatedAt", ExtArgs["result"]["project"]>
  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | Project$tasksArgs<ExtArgs>
    sprints?: boolean | Project$sprintsArgs<ExtArgs>
    users?: boolean | Project$usersArgs<ExtArgs>
    userProjects?: boolean | Project$userProjectsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      sprints: Prisma.$SprintPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      userProjects: Prisma.$UserProjectsPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      projectManager: number
      startDate: string | null
      endDate: string | null
      status: string | null
      field5: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects and returns the data updated in the database.
     * @param {ProjectUpdateManyAndReturnArgs} args - Arguments to update many Projects.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tasks<T extends Project$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Project$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    sprints<T extends Project$sprintsArgs<ExtArgs> = {}>(args?: Subset<T, Project$sprintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    users<T extends Project$usersArgs<ExtArgs> = {}>(args?: Subset<T, Project$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    userProjects<T extends Project$userProjectsArgs<ExtArgs> = {}>(args?: Subset<T, Project$userProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProjectsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'Int'>
    readonly name: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly projectManager: FieldRef<"Project", 'Int'>
    readonly startDate: FieldRef<"Project", 'String'>
    readonly endDate: FieldRef<"Project", 'String'>
    readonly status: FieldRef<"Project", 'String'>
    readonly field5: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project updateManyAndReturn
   */
  export type ProjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Project.tasks
   */
  export type Project$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Project.sprints
   */
  export type Project$sprintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    where?: SprintWhereInput
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[]
    cursor?: SprintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SprintScalarFieldEnum | SprintScalarFieldEnum[]
  }

  /**
   * Project.users
   */
  export type Project$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Project.userProjects
   */
  export type Project$userProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProjects
     */
    select?: UserProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProjects
     */
    omit?: UserProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectsInclude<ExtArgs> | null
    where?: UserProjectsWhereInput
    orderBy?: UserProjectsOrderByWithRelationInput | UserProjectsOrderByWithRelationInput[]
    cursor?: UserProjectsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserProjectsScalarFieldEnum | UserProjectsScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Sprint
   */

  export type AggregateSprint = {
    _count: SprintCountAggregateOutputType | null
    _avg: SprintAvgAggregateOutputType | null
    _sum: SprintSumAggregateOutputType | null
    _min: SprintMinAggregateOutputType | null
    _max: SprintMaxAggregateOutputType | null
  }

  export type SprintAvgAggregateOutputType = {
    id: number | null
    projectId: number | null
  }

  export type SprintSumAggregateOutputType = {
    id: number | null
    projectId: number | null
  }

  export type SprintMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    projectId: number | null
  }

  export type SprintMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    projectId: number | null
  }

  export type SprintCountAggregateOutputType = {
    id: number
    title: number
    description: number
    startDate: number
    endDate: number
    projectId: number
    _all: number
  }


  export type SprintAvgAggregateInputType = {
    id?: true
    projectId?: true
  }

  export type SprintSumAggregateInputType = {
    id?: true
    projectId?: true
  }

  export type SprintMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    projectId?: true
  }

  export type SprintMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    projectId?: true
  }

  export type SprintCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    projectId?: true
    _all?: true
  }

  export type SprintAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sprint to aggregate.
     */
    where?: SprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sprints
    **/
    _count?: true | SprintCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SprintAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SprintSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SprintMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SprintMaxAggregateInputType
  }

  export type GetSprintAggregateType<T extends SprintAggregateArgs> = {
        [P in keyof T & keyof AggregateSprint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSprint[P]>
      : GetScalarType<T[P], AggregateSprint[P]>
  }




  export type SprintGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SprintWhereInput
    orderBy?: SprintOrderByWithAggregationInput | SprintOrderByWithAggregationInput[]
    by: SprintScalarFieldEnum[] | SprintScalarFieldEnum
    having?: SprintScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SprintCountAggregateInputType | true
    _avg?: SprintAvgAggregateInputType
    _sum?: SprintSumAggregateInputType
    _min?: SprintMinAggregateInputType
    _max?: SprintMaxAggregateInputType
  }

  export type SprintGroupByOutputType = {
    id: number
    title: string
    description: string | null
    startDate: Date
    endDate: Date
    projectId: number
    _count: SprintCountAggregateOutputType | null
    _avg: SprintAvgAggregateOutputType | null
    _sum: SprintSumAggregateOutputType | null
    _min: SprintMinAggregateOutputType | null
    _max: SprintMaxAggregateOutputType | null
  }

  type GetSprintGroupByPayload<T extends SprintGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SprintGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SprintGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SprintGroupByOutputType[P]>
            : GetScalarType<T[P], SprintGroupByOutputType[P]>
        }
      >
    >


  export type SprintSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    tasks?: boolean | Sprint$tasksArgs<ExtArgs>
    _count?: boolean | SprintCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sprint"]>

  export type SprintSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sprint"]>

  export type SprintSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sprint"]>

  export type SprintSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    projectId?: boolean
  }

  export type SprintOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "startDate" | "endDate" | "projectId", ExtArgs["result"]["sprint"]>
  export type SprintInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    tasks?: boolean | Sprint$tasksArgs<ExtArgs>
    _count?: boolean | SprintCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SprintIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type SprintIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $SprintPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sprint"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      tasks: Prisma.$TaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string | null
      startDate: Date
      endDate: Date
      projectId: number
    }, ExtArgs["result"]["sprint"]>
    composites: {}
  }

  type SprintGetPayload<S extends boolean | null | undefined | SprintDefaultArgs> = $Result.GetResult<Prisma.$SprintPayload, S>

  type SprintCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SprintFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SprintCountAggregateInputType | true
    }

  export interface SprintDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sprint'], meta: { name: 'Sprint' } }
    /**
     * Find zero or one Sprint that matches the filter.
     * @param {SprintFindUniqueArgs} args - Arguments to find a Sprint
     * @example
     * // Get one Sprint
     * const sprint = await prisma.sprint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SprintFindUniqueArgs>(args: SelectSubset<T, SprintFindUniqueArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Sprint that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SprintFindUniqueOrThrowArgs} args - Arguments to find a Sprint
     * @example
     * // Get one Sprint
     * const sprint = await prisma.sprint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SprintFindUniqueOrThrowArgs>(args: SelectSubset<T, SprintFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Sprint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintFindFirstArgs} args - Arguments to find a Sprint
     * @example
     * // Get one Sprint
     * const sprint = await prisma.sprint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SprintFindFirstArgs>(args?: SelectSubset<T, SprintFindFirstArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Sprint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintFindFirstOrThrowArgs} args - Arguments to find a Sprint
     * @example
     * // Get one Sprint
     * const sprint = await prisma.sprint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SprintFindFirstOrThrowArgs>(args?: SelectSubset<T, SprintFindFirstOrThrowArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Sprints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sprints
     * const sprints = await prisma.sprint.findMany()
     * 
     * // Get first 10 Sprints
     * const sprints = await prisma.sprint.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sprintWithIdOnly = await prisma.sprint.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SprintFindManyArgs>(args?: SelectSubset<T, SprintFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Sprint.
     * @param {SprintCreateArgs} args - Arguments to create a Sprint.
     * @example
     * // Create one Sprint
     * const Sprint = await prisma.sprint.create({
     *   data: {
     *     // ... data to create a Sprint
     *   }
     * })
     * 
     */
    create<T extends SprintCreateArgs>(args: SelectSubset<T, SprintCreateArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Sprints.
     * @param {SprintCreateManyArgs} args - Arguments to create many Sprints.
     * @example
     * // Create many Sprints
     * const sprint = await prisma.sprint.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SprintCreateManyArgs>(args?: SelectSubset<T, SprintCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sprints and returns the data saved in the database.
     * @param {SprintCreateManyAndReturnArgs} args - Arguments to create many Sprints.
     * @example
     * // Create many Sprints
     * const sprint = await prisma.sprint.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sprints and only return the `id`
     * const sprintWithIdOnly = await prisma.sprint.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SprintCreateManyAndReturnArgs>(args?: SelectSubset<T, SprintCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Sprint.
     * @param {SprintDeleteArgs} args - Arguments to delete one Sprint.
     * @example
     * // Delete one Sprint
     * const Sprint = await prisma.sprint.delete({
     *   where: {
     *     // ... filter to delete one Sprint
     *   }
     * })
     * 
     */
    delete<T extends SprintDeleteArgs>(args: SelectSubset<T, SprintDeleteArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Sprint.
     * @param {SprintUpdateArgs} args - Arguments to update one Sprint.
     * @example
     * // Update one Sprint
     * const sprint = await prisma.sprint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SprintUpdateArgs>(args: SelectSubset<T, SprintUpdateArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Sprints.
     * @param {SprintDeleteManyArgs} args - Arguments to filter Sprints to delete.
     * @example
     * // Delete a few Sprints
     * const { count } = await prisma.sprint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SprintDeleteManyArgs>(args?: SelectSubset<T, SprintDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sprints
     * const sprint = await prisma.sprint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SprintUpdateManyArgs>(args: SelectSubset<T, SprintUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sprints and returns the data updated in the database.
     * @param {SprintUpdateManyAndReturnArgs} args - Arguments to update many Sprints.
     * @example
     * // Update many Sprints
     * const sprint = await prisma.sprint.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sprints and only return the `id`
     * const sprintWithIdOnly = await prisma.sprint.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SprintUpdateManyAndReturnArgs>(args: SelectSubset<T, SprintUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Sprint.
     * @param {SprintUpsertArgs} args - Arguments to update or create a Sprint.
     * @example
     * // Update or create a Sprint
     * const sprint = await prisma.sprint.upsert({
     *   create: {
     *     // ... data to create a Sprint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sprint we want to update
     *   }
     * })
     */
    upsert<T extends SprintUpsertArgs>(args: SelectSubset<T, SprintUpsertArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Sprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintCountArgs} args - Arguments to filter Sprints to count.
     * @example
     * // Count the number of Sprints
     * const count = await prisma.sprint.count({
     *   where: {
     *     // ... the filter for the Sprints we want to count
     *   }
     * })
    **/
    count<T extends SprintCountArgs>(
      args?: Subset<T, SprintCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SprintCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sprint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SprintAggregateArgs>(args: Subset<T, SprintAggregateArgs>): Prisma.PrismaPromise<GetSprintAggregateType<T>>

    /**
     * Group by Sprint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SprintGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SprintGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SprintGroupByArgs['orderBy'] }
        : { orderBy?: SprintGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SprintGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSprintGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sprint model
   */
  readonly fields: SprintFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sprint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SprintClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    tasks<T extends Sprint$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Sprint$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sprint model
   */ 
  interface SprintFieldRefs {
    readonly id: FieldRef<"Sprint", 'Int'>
    readonly title: FieldRef<"Sprint", 'String'>
    readonly description: FieldRef<"Sprint", 'String'>
    readonly startDate: FieldRef<"Sprint", 'DateTime'>
    readonly endDate: FieldRef<"Sprint", 'DateTime'>
    readonly projectId: FieldRef<"Sprint", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Sprint findUnique
   */
  export type SprintFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * Filter, which Sprint to fetch.
     */
    where: SprintWhereUniqueInput
  }

  /**
   * Sprint findUniqueOrThrow
   */
  export type SprintFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * Filter, which Sprint to fetch.
     */
    where: SprintWhereUniqueInput
  }

  /**
   * Sprint findFirst
   */
  export type SprintFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * Filter, which Sprint to fetch.
     */
    where?: SprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sprints.
     */
    cursor?: SprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sprints.
     */
    distinct?: SprintScalarFieldEnum | SprintScalarFieldEnum[]
  }

  /**
   * Sprint findFirstOrThrow
   */
  export type SprintFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * Filter, which Sprint to fetch.
     */
    where?: SprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sprints.
     */
    cursor?: SprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sprints.
     */
    distinct?: SprintScalarFieldEnum | SprintScalarFieldEnum[]
  }

  /**
   * Sprint findMany
   */
  export type SprintFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * Filter, which Sprints to fetch.
     */
    where?: SprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sprints to fetch.
     */
    orderBy?: SprintOrderByWithRelationInput | SprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sprints.
     */
    cursor?: SprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sprints.
     */
    skip?: number
    distinct?: SprintScalarFieldEnum | SprintScalarFieldEnum[]
  }

  /**
   * Sprint create
   */
  export type SprintCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * The data needed to create a Sprint.
     */
    data: XOR<SprintCreateInput, SprintUncheckedCreateInput>
  }

  /**
   * Sprint createMany
   */
  export type SprintCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sprints.
     */
    data: SprintCreateManyInput | SprintCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sprint createManyAndReturn
   */
  export type SprintCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * The data used to create many Sprints.
     */
    data: SprintCreateManyInput | SprintCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sprint update
   */
  export type SprintUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * The data needed to update a Sprint.
     */
    data: XOR<SprintUpdateInput, SprintUncheckedUpdateInput>
    /**
     * Choose, which Sprint to update.
     */
    where: SprintWhereUniqueInput
  }

  /**
   * Sprint updateMany
   */
  export type SprintUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sprints.
     */
    data: XOR<SprintUpdateManyMutationInput, SprintUncheckedUpdateManyInput>
    /**
     * Filter which Sprints to update
     */
    where?: SprintWhereInput
    /**
     * Limit how many Sprints to update.
     */
    limit?: number
  }

  /**
   * Sprint updateManyAndReturn
   */
  export type SprintUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * The data used to update Sprints.
     */
    data: XOR<SprintUpdateManyMutationInput, SprintUncheckedUpdateManyInput>
    /**
     * Filter which Sprints to update
     */
    where?: SprintWhereInput
    /**
     * Limit how many Sprints to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sprint upsert
   */
  export type SprintUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * The filter to search for the Sprint to update in case it exists.
     */
    where: SprintWhereUniqueInput
    /**
     * In case the Sprint found by the `where` argument doesn't exist, create a new Sprint with this data.
     */
    create: XOR<SprintCreateInput, SprintUncheckedCreateInput>
    /**
     * In case the Sprint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SprintUpdateInput, SprintUncheckedUpdateInput>
  }

  /**
   * Sprint delete
   */
  export type SprintDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    /**
     * Filter which Sprint to delete.
     */
    where: SprintWhereUniqueInput
  }

  /**
   * Sprint deleteMany
   */
  export type SprintDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sprints to delete
     */
    where?: SprintWhereInput
    /**
     * Limit how many Sprints to delete.
     */
    limit?: number
  }

  /**
   * Sprint.tasks
   */
  export type Sprint$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Sprint without action
   */
  export type SprintDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    id: number | null
    points: number | null
    projectId: number | null
    authorUserId: number | null
    assignedUserId: number | null
    sprintId: number | null
  }

  export type TaskSumAggregateOutputType = {
    id: number | null
    points: number | null
    projectId: number | null
    authorUserId: number | null
    assignedUserId: number | null
    sprintId: number | null
  }

  export type TaskMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    status: string | null
    priority: string | null
    tags: string | null
    startDate: Date | null
    dueDate: Date | null
    points: number | null
    projectId: number | null
    authorUserId: number | null
    assignedUserId: number | null
    sprintId: number | null
  }

  export type TaskMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    status: string | null
    priority: string | null
    tags: string | null
    startDate: Date | null
    dueDate: Date | null
    points: number | null
    projectId: number | null
    authorUserId: number | null
    assignedUserId: number | null
    sprintId: number | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    priority: number
    tags: number
    startDate: number
    dueDate: number
    points: number
    projectId: number
    authorUserId: number
    assignedUserId: number
    sprintId: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    id?: true
    points?: true
    projectId?: true
    authorUserId?: true
    assignedUserId?: true
    sprintId?: true
  }

  export type TaskSumAggregateInputType = {
    id?: true
    points?: true
    projectId?: true
    authorUserId?: true
    assignedUserId?: true
    sprintId?: true
  }

  export type TaskMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    tags?: true
    startDate?: true
    dueDate?: true
    points?: true
    projectId?: true
    authorUserId?: true
    assignedUserId?: true
    sprintId?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    tags?: true
    startDate?: true
    dueDate?: true
    points?: true
    projectId?: true
    authorUserId?: true
    assignedUserId?: true
    sprintId?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    tags?: true
    startDate?: true
    dueDate?: true
    points?: true
    projectId?: true
    authorUserId?: true
    assignedUserId?: true
    sprintId?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: number
    title: string
    description: string | null
    status: string | null
    priority: string | null
    tags: string | null
    startDate: Date | null
    dueDate: Date | null
    points: number | null
    projectId: number
    authorUserId: number
    assignedUserId: number | null
    sprintId: number | null
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    tags?: boolean
    startDate?: boolean
    dueDate?: boolean
    points?: boolean
    projectId?: boolean
    authorUserId?: boolean
    assignedUserId?: boolean
    sprintId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    taskAssignments?: boolean | Task$taskAssignmentsArgs<ExtArgs>
    attachments?: boolean | Task$attachmentsArgs<ExtArgs>
    comments?: boolean | Task$commentsArgs<ExtArgs>
    taskHistory?: boolean | Task$taskHistoryArgs<ExtArgs>
    subTasks?: boolean | Task$subTasksArgs<ExtArgs>
    sprint?: boolean | Task$sprintArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    tags?: boolean
    startDate?: boolean
    dueDate?: boolean
    points?: boolean
    projectId?: boolean
    authorUserId?: boolean
    assignedUserId?: boolean
    sprintId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    sprint?: boolean | Task$sprintArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    tags?: boolean
    startDate?: boolean
    dueDate?: boolean
    points?: boolean
    projectId?: boolean
    authorUserId?: boolean
    assignedUserId?: boolean
    sprintId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    sprint?: boolean | Task$sprintArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    tags?: boolean
    startDate?: boolean
    dueDate?: boolean
    points?: boolean
    projectId?: boolean
    authorUserId?: boolean
    assignedUserId?: boolean
    sprintId?: boolean
  }

  export type TaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "status" | "priority" | "tags" | "startDate" | "dueDate" | "points" | "projectId" | "authorUserId" | "assignedUserId" | "sprintId", ExtArgs["result"]["task"]>
  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    taskAssignments?: boolean | Task$taskAssignmentsArgs<ExtArgs>
    attachments?: boolean | Task$attachmentsArgs<ExtArgs>
    comments?: boolean | Task$commentsArgs<ExtArgs>
    taskHistory?: boolean | Task$taskHistoryArgs<ExtArgs>
    subTasks?: boolean | Task$subTasksArgs<ExtArgs>
    sprint?: boolean | Task$sprintArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    sprint?: boolean | Task$sprintArgs<ExtArgs>
  }
  export type TaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    sprint?: boolean | Task$sprintArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      author: Prisma.$UserPayload<ExtArgs>
      assignee: Prisma.$UserPayload<ExtArgs> | null
      taskAssignments: Prisma.$TaskAssignmentPayload<ExtArgs>[]
      attachments: Prisma.$AttachmentPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      taskHistory: Prisma.$TaskHistoryPayload<ExtArgs>[]
      subTasks: Prisma.$SubtaskPayload<ExtArgs>[]
      sprint: Prisma.$SprintPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string | null
      status: string | null
      priority: string | null
      tags: string | null
      startDate: Date | null
      dueDate: Date | null
      points: number | null
      projectId: number
      authorUserId: number
      assignedUserId: number | null
      sprintId: number | null
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    assignee<T extends Task$assigneeArgs<ExtArgs> = {}>(args?: Subset<T, Task$assigneeArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    taskAssignments<T extends Task$taskAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Task$taskAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    attachments<T extends Task$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Task$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    comments<T extends Task$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Task$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    taskHistory<T extends Task$taskHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Task$taskHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskHistoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    subTasks<T extends Task$subTasksArgs<ExtArgs> = {}>(args?: Subset<T, Task$subTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    sprint<T extends Task$sprintArgs<ExtArgs> = {}>(args?: Subset<T, Task$sprintArgs<ExtArgs>>): Prisma__SprintClient<$Result.GetResult<Prisma.$SprintPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */ 
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'Int'>
    readonly title: FieldRef<"Task", 'String'>
    readonly description: FieldRef<"Task", 'String'>
    readonly status: FieldRef<"Task", 'String'>
    readonly priority: FieldRef<"Task", 'String'>
    readonly tags: FieldRef<"Task", 'String'>
    readonly startDate: FieldRef<"Task", 'DateTime'>
    readonly dueDate: FieldRef<"Task", 'DateTime'>
    readonly points: FieldRef<"Task", 'Int'>
    readonly projectId: FieldRef<"Task", 'Int'>
    readonly authorUserId: FieldRef<"Task", 'Int'>
    readonly assignedUserId: FieldRef<"Task", 'Int'>
    readonly sprintId: FieldRef<"Task", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
  }

  /**
   * Task updateManyAndReturn
   */
  export type TaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to delete.
     */
    limit?: number
  }

  /**
   * Task.assignee
   */
  export type Task$assigneeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Task.taskAssignments
   */
  export type Task$taskAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    where?: TaskAssignmentWhereInput
    orderBy?: TaskAssignmentOrderByWithRelationInput | TaskAssignmentOrderByWithRelationInput[]
    cursor?: TaskAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskAssignmentScalarFieldEnum | TaskAssignmentScalarFieldEnum[]
  }

  /**
   * Task.attachments
   */
  export type Task$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    cursor?: AttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Task.comments
   */
  export type Task$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Task.taskHistory
   */
  export type Task$taskHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskHistory
     */
    select?: TaskHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskHistory
     */
    omit?: TaskHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskHistoryInclude<ExtArgs> | null
    where?: TaskHistoryWhereInput
    orderBy?: TaskHistoryOrderByWithRelationInput | TaskHistoryOrderByWithRelationInput[]
    cursor?: TaskHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskHistoryScalarFieldEnum | TaskHistoryScalarFieldEnum[]
  }

  /**
   * Task.subTasks
   */
  export type Task$subTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
    where?: SubtaskWhereInput
    orderBy?: SubtaskOrderByWithRelationInput | SubtaskOrderByWithRelationInput[]
    cursor?: SubtaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubtaskScalarFieldEnum | SubtaskScalarFieldEnum[]
  }

  /**
   * Task.sprint
   */
  export type Task$sprintArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sprint
     */
    select?: SprintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sprint
     */
    omit?: SprintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SprintInclude<ExtArgs> | null
    where?: SprintWhereInput
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model Subtask
   */

  export type AggregateSubtask = {
    _count: SubtaskCountAggregateOutputType | null
    _avg: SubtaskAvgAggregateOutputType | null
    _sum: SubtaskSumAggregateOutputType | null
    _min: SubtaskMinAggregateOutputType | null
    _max: SubtaskMaxAggregateOutputType | null
  }

  export type SubtaskAvgAggregateOutputType = {
    id: number | null
    taskId: number | null
    authorUserId: number | null
    assignedUserId: number | null
  }

  export type SubtaskSumAggregateOutputType = {
    id: number | null
    taskId: number | null
    authorUserId: number | null
    assignedUserId: number | null
  }

  export type SubtaskMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    status: string | null
    taskId: number | null
    startDate: Date | null
    dueDate: Date | null
    authorUserId: number | null
    assignedUserId: number | null
  }

  export type SubtaskMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    status: string | null
    taskId: number | null
    startDate: Date | null
    dueDate: Date | null
    authorUserId: number | null
    assignedUserId: number | null
  }

  export type SubtaskCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    taskId: number
    startDate: number
    dueDate: number
    authorUserId: number
    assignedUserId: number
    _all: number
  }


  export type SubtaskAvgAggregateInputType = {
    id?: true
    taskId?: true
    authorUserId?: true
    assignedUserId?: true
  }

  export type SubtaskSumAggregateInputType = {
    id?: true
    taskId?: true
    authorUserId?: true
    assignedUserId?: true
  }

  export type SubtaskMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    taskId?: true
    startDate?: true
    dueDate?: true
    authorUserId?: true
    assignedUserId?: true
  }

  export type SubtaskMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    taskId?: true
    startDate?: true
    dueDate?: true
    authorUserId?: true
    assignedUserId?: true
  }

  export type SubtaskCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    taskId?: true
    startDate?: true
    dueDate?: true
    authorUserId?: true
    assignedUserId?: true
    _all?: true
  }

  export type SubtaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subtask to aggregate.
     */
    where?: SubtaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subtasks to fetch.
     */
    orderBy?: SubtaskOrderByWithRelationInput | SubtaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubtaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subtasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subtasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subtasks
    **/
    _count?: true | SubtaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubtaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubtaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubtaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubtaskMaxAggregateInputType
  }

  export type GetSubtaskAggregateType<T extends SubtaskAggregateArgs> = {
        [P in keyof T & keyof AggregateSubtask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubtask[P]>
      : GetScalarType<T[P], AggregateSubtask[P]>
  }




  export type SubtaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubtaskWhereInput
    orderBy?: SubtaskOrderByWithAggregationInput | SubtaskOrderByWithAggregationInput[]
    by: SubtaskScalarFieldEnum[] | SubtaskScalarFieldEnum
    having?: SubtaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubtaskCountAggregateInputType | true
    _avg?: SubtaskAvgAggregateInputType
    _sum?: SubtaskSumAggregateInputType
    _min?: SubtaskMinAggregateInputType
    _max?: SubtaskMaxAggregateInputType
  }

  export type SubtaskGroupByOutputType = {
    id: number
    title: string
    description: string | null
    status: string | null
    taskId: number
    startDate: Date | null
    dueDate: Date | null
    authorUserId: number
    assignedUserId: number | null
    _count: SubtaskCountAggregateOutputType | null
    _avg: SubtaskAvgAggregateOutputType | null
    _sum: SubtaskSumAggregateOutputType | null
    _min: SubtaskMinAggregateOutputType | null
    _max: SubtaskMaxAggregateOutputType | null
  }

  type GetSubtaskGroupByPayload<T extends SubtaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubtaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubtaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubtaskGroupByOutputType[P]>
            : GetScalarType<T[P], SubtaskGroupByOutputType[P]>
        }
      >
    >


  export type SubtaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    taskId?: boolean
    startDate?: boolean
    dueDate?: boolean
    authorUserId?: boolean
    assignedUserId?: boolean
    attachments?: boolean | Subtask$attachmentsArgs<ExtArgs>
    assignee?: boolean | Subtask$assigneeArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
    comments?: boolean | Subtask$commentsArgs<ExtArgs>
    _count?: boolean | SubtaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subtask"]>

  export type SubtaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    taskId?: boolean
    startDate?: boolean
    dueDate?: boolean
    authorUserId?: boolean
    assignedUserId?: boolean
    assignee?: boolean | Subtask$assigneeArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subtask"]>

  export type SubtaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    taskId?: boolean
    startDate?: boolean
    dueDate?: boolean
    authorUserId?: boolean
    assignedUserId?: boolean
    assignee?: boolean | Subtask$assigneeArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subtask"]>

  export type SubtaskSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    taskId?: boolean
    startDate?: boolean
    dueDate?: boolean
    authorUserId?: boolean
    assignedUserId?: boolean
  }

  export type SubtaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "status" | "taskId" | "startDate" | "dueDate" | "authorUserId" | "assignedUserId", ExtArgs["result"]["subtask"]>
  export type SubtaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attachments?: boolean | Subtask$attachmentsArgs<ExtArgs>
    assignee?: boolean | Subtask$assigneeArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
    comments?: boolean | Subtask$commentsArgs<ExtArgs>
    _count?: boolean | SubtaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubtaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignee?: boolean | Subtask$assigneeArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }
  export type SubtaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignee?: boolean | Subtask$assigneeArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }

  export type $SubtaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subtask"
    objects: {
      attachments: Prisma.$AttachmentPayload<ExtArgs>[]
      assignee: Prisma.$UserPayload<ExtArgs> | null
      author: Prisma.$UserPayload<ExtArgs>
      task: Prisma.$TaskPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string | null
      status: string | null
      taskId: number
      startDate: Date | null
      dueDate: Date | null
      authorUserId: number
      assignedUserId: number | null
    }, ExtArgs["result"]["subtask"]>
    composites: {}
  }

  type SubtaskGetPayload<S extends boolean | null | undefined | SubtaskDefaultArgs> = $Result.GetResult<Prisma.$SubtaskPayload, S>

  type SubtaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubtaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubtaskCountAggregateInputType | true
    }

  export interface SubtaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subtask'], meta: { name: 'Subtask' } }
    /**
     * Find zero or one Subtask that matches the filter.
     * @param {SubtaskFindUniqueArgs} args - Arguments to find a Subtask
     * @example
     * // Get one Subtask
     * const subtask = await prisma.subtask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubtaskFindUniqueArgs>(args: SelectSubset<T, SubtaskFindUniqueArgs<ExtArgs>>): Prisma__SubtaskClient<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Subtask that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubtaskFindUniqueOrThrowArgs} args - Arguments to find a Subtask
     * @example
     * // Get one Subtask
     * const subtask = await prisma.subtask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubtaskFindUniqueOrThrowArgs>(args: SelectSubset<T, SubtaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubtaskClient<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Subtask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtaskFindFirstArgs} args - Arguments to find a Subtask
     * @example
     * // Get one Subtask
     * const subtask = await prisma.subtask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubtaskFindFirstArgs>(args?: SelectSubset<T, SubtaskFindFirstArgs<ExtArgs>>): Prisma__SubtaskClient<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Subtask that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtaskFindFirstOrThrowArgs} args - Arguments to find a Subtask
     * @example
     * // Get one Subtask
     * const subtask = await prisma.subtask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubtaskFindFirstOrThrowArgs>(args?: SelectSubset<T, SubtaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubtaskClient<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Subtasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subtasks
     * const subtasks = await prisma.subtask.findMany()
     * 
     * // Get first 10 Subtasks
     * const subtasks = await prisma.subtask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subtaskWithIdOnly = await prisma.subtask.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubtaskFindManyArgs>(args?: SelectSubset<T, SubtaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Subtask.
     * @param {SubtaskCreateArgs} args - Arguments to create a Subtask.
     * @example
     * // Create one Subtask
     * const Subtask = await prisma.subtask.create({
     *   data: {
     *     // ... data to create a Subtask
     *   }
     * })
     * 
     */
    create<T extends SubtaskCreateArgs>(args: SelectSubset<T, SubtaskCreateArgs<ExtArgs>>): Prisma__SubtaskClient<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Subtasks.
     * @param {SubtaskCreateManyArgs} args - Arguments to create many Subtasks.
     * @example
     * // Create many Subtasks
     * const subtask = await prisma.subtask.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubtaskCreateManyArgs>(args?: SelectSubset<T, SubtaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subtasks and returns the data saved in the database.
     * @param {SubtaskCreateManyAndReturnArgs} args - Arguments to create many Subtasks.
     * @example
     * // Create many Subtasks
     * const subtask = await prisma.subtask.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subtasks and only return the `id`
     * const subtaskWithIdOnly = await prisma.subtask.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubtaskCreateManyAndReturnArgs>(args?: SelectSubset<T, SubtaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Subtask.
     * @param {SubtaskDeleteArgs} args - Arguments to delete one Subtask.
     * @example
     * // Delete one Subtask
     * const Subtask = await prisma.subtask.delete({
     *   where: {
     *     // ... filter to delete one Subtask
     *   }
     * })
     * 
     */
    delete<T extends SubtaskDeleteArgs>(args: SelectSubset<T, SubtaskDeleteArgs<ExtArgs>>): Prisma__SubtaskClient<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Subtask.
     * @param {SubtaskUpdateArgs} args - Arguments to update one Subtask.
     * @example
     * // Update one Subtask
     * const subtask = await prisma.subtask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubtaskUpdateArgs>(args: SelectSubset<T, SubtaskUpdateArgs<ExtArgs>>): Prisma__SubtaskClient<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Subtasks.
     * @param {SubtaskDeleteManyArgs} args - Arguments to filter Subtasks to delete.
     * @example
     * // Delete a few Subtasks
     * const { count } = await prisma.subtask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubtaskDeleteManyArgs>(args?: SelectSubset<T, SubtaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subtasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subtasks
     * const subtask = await prisma.subtask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubtaskUpdateManyArgs>(args: SelectSubset<T, SubtaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subtasks and returns the data updated in the database.
     * @param {SubtaskUpdateManyAndReturnArgs} args - Arguments to update many Subtasks.
     * @example
     * // Update many Subtasks
     * const subtask = await prisma.subtask.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subtasks and only return the `id`
     * const subtaskWithIdOnly = await prisma.subtask.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubtaskUpdateManyAndReturnArgs>(args: SelectSubset<T, SubtaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Subtask.
     * @param {SubtaskUpsertArgs} args - Arguments to update or create a Subtask.
     * @example
     * // Update or create a Subtask
     * const subtask = await prisma.subtask.upsert({
     *   create: {
     *     // ... data to create a Subtask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subtask we want to update
     *   }
     * })
     */
    upsert<T extends SubtaskUpsertArgs>(args: SelectSubset<T, SubtaskUpsertArgs<ExtArgs>>): Prisma__SubtaskClient<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Subtasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtaskCountArgs} args - Arguments to filter Subtasks to count.
     * @example
     * // Count the number of Subtasks
     * const count = await prisma.subtask.count({
     *   where: {
     *     // ... the filter for the Subtasks we want to count
     *   }
     * })
    **/
    count<T extends SubtaskCountArgs>(
      args?: Subset<T, SubtaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubtaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subtask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubtaskAggregateArgs>(args: Subset<T, SubtaskAggregateArgs>): Prisma.PrismaPromise<GetSubtaskAggregateType<T>>

    /**
     * Group by Subtask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubtaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubtaskGroupByArgs['orderBy'] }
        : { orderBy?: SubtaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubtaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubtaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subtask model
   */
  readonly fields: SubtaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subtask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubtaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attachments<T extends Subtask$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Subtask$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    assignee<T extends Subtask$assigneeArgs<ExtArgs> = {}>(args?: Subset<T, Subtask$assigneeArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    comments<T extends Subtask$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Subtask$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subtask model
   */ 
  interface SubtaskFieldRefs {
    readonly id: FieldRef<"Subtask", 'Int'>
    readonly title: FieldRef<"Subtask", 'String'>
    readonly description: FieldRef<"Subtask", 'String'>
    readonly status: FieldRef<"Subtask", 'String'>
    readonly taskId: FieldRef<"Subtask", 'Int'>
    readonly startDate: FieldRef<"Subtask", 'DateTime'>
    readonly dueDate: FieldRef<"Subtask", 'DateTime'>
    readonly authorUserId: FieldRef<"Subtask", 'Int'>
    readonly assignedUserId: FieldRef<"Subtask", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Subtask findUnique
   */
  export type SubtaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
    /**
     * Filter, which Subtask to fetch.
     */
    where: SubtaskWhereUniqueInput
  }

  /**
   * Subtask findUniqueOrThrow
   */
  export type SubtaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
    /**
     * Filter, which Subtask to fetch.
     */
    where: SubtaskWhereUniqueInput
  }

  /**
   * Subtask findFirst
   */
  export type SubtaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
    /**
     * Filter, which Subtask to fetch.
     */
    where?: SubtaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subtasks to fetch.
     */
    orderBy?: SubtaskOrderByWithRelationInput | SubtaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subtasks.
     */
    cursor?: SubtaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subtasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subtasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subtasks.
     */
    distinct?: SubtaskScalarFieldEnum | SubtaskScalarFieldEnum[]
  }

  /**
   * Subtask findFirstOrThrow
   */
  export type SubtaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
    /**
     * Filter, which Subtask to fetch.
     */
    where?: SubtaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subtasks to fetch.
     */
    orderBy?: SubtaskOrderByWithRelationInput | SubtaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subtasks.
     */
    cursor?: SubtaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subtasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subtasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subtasks.
     */
    distinct?: SubtaskScalarFieldEnum | SubtaskScalarFieldEnum[]
  }

  /**
   * Subtask findMany
   */
  export type SubtaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
    /**
     * Filter, which Subtasks to fetch.
     */
    where?: SubtaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subtasks to fetch.
     */
    orderBy?: SubtaskOrderByWithRelationInput | SubtaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subtasks.
     */
    cursor?: SubtaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subtasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subtasks.
     */
    skip?: number
    distinct?: SubtaskScalarFieldEnum | SubtaskScalarFieldEnum[]
  }

  /**
   * Subtask create
   */
  export type SubtaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Subtask.
     */
    data: XOR<SubtaskCreateInput, SubtaskUncheckedCreateInput>
  }

  /**
   * Subtask createMany
   */
  export type SubtaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subtasks.
     */
    data: SubtaskCreateManyInput | SubtaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subtask createManyAndReturn
   */
  export type SubtaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * The data used to create many Subtasks.
     */
    data: SubtaskCreateManyInput | SubtaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subtask update
   */
  export type SubtaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Subtask.
     */
    data: XOR<SubtaskUpdateInput, SubtaskUncheckedUpdateInput>
    /**
     * Choose, which Subtask to update.
     */
    where: SubtaskWhereUniqueInput
  }

  /**
   * Subtask updateMany
   */
  export type SubtaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subtasks.
     */
    data: XOR<SubtaskUpdateManyMutationInput, SubtaskUncheckedUpdateManyInput>
    /**
     * Filter which Subtasks to update
     */
    where?: SubtaskWhereInput
    /**
     * Limit how many Subtasks to update.
     */
    limit?: number
  }

  /**
   * Subtask updateManyAndReturn
   */
  export type SubtaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * The data used to update Subtasks.
     */
    data: XOR<SubtaskUpdateManyMutationInput, SubtaskUncheckedUpdateManyInput>
    /**
     * Filter which Subtasks to update
     */
    where?: SubtaskWhereInput
    /**
     * Limit how many Subtasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subtask upsert
   */
  export type SubtaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Subtask to update in case it exists.
     */
    where: SubtaskWhereUniqueInput
    /**
     * In case the Subtask found by the `where` argument doesn't exist, create a new Subtask with this data.
     */
    create: XOR<SubtaskCreateInput, SubtaskUncheckedCreateInput>
    /**
     * In case the Subtask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubtaskUpdateInput, SubtaskUncheckedUpdateInput>
  }

  /**
   * Subtask delete
   */
  export type SubtaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
    /**
     * Filter which Subtask to delete.
     */
    where: SubtaskWhereUniqueInput
  }

  /**
   * Subtask deleteMany
   */
  export type SubtaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subtasks to delete
     */
    where?: SubtaskWhereInput
    /**
     * Limit how many Subtasks to delete.
     */
    limit?: number
  }

  /**
   * Subtask.attachments
   */
  export type Subtask$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    cursor?: AttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Subtask.assignee
   */
  export type Subtask$assigneeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Subtask.comments
   */
  export type Subtask$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Subtask without action
   */
  export type SubtaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
  }


  /**
   * Model TaskHistory
   */

  export type AggregateTaskHistory = {
    _count: TaskHistoryCountAggregateOutputType | null
    _avg: TaskHistoryAvgAggregateOutputType | null
    _sum: TaskHistorySumAggregateOutputType | null
    _min: TaskHistoryMinAggregateOutputType | null
    _max: TaskHistoryMaxAggregateOutputType | null
  }

  export type TaskHistoryAvgAggregateOutputType = {
    id: number | null
    taskId: number | null
    userId: number | null
  }

  export type TaskHistorySumAggregateOutputType = {
    id: number | null
    taskId: number | null
    userId: number | null
  }

  export type TaskHistoryMinAggregateOutputType = {
    id: number | null
    taskId: number | null
    userId: number | null
    startDate: Date | null
    endDate: Date | null
    sprint: string | null
  }

  export type TaskHistoryMaxAggregateOutputType = {
    id: number | null
    taskId: number | null
    userId: number | null
    startDate: Date | null
    endDate: Date | null
    sprint: string | null
  }

  export type TaskHistoryCountAggregateOutputType = {
    id: number
    taskId: number
    userId: number
    startDate: number
    endDate: number
    sprint: number
    _all: number
  }


  export type TaskHistoryAvgAggregateInputType = {
    id?: true
    taskId?: true
    userId?: true
  }

  export type TaskHistorySumAggregateInputType = {
    id?: true
    taskId?: true
    userId?: true
  }

  export type TaskHistoryMinAggregateInputType = {
    id?: true
    taskId?: true
    userId?: true
    startDate?: true
    endDate?: true
    sprint?: true
  }

  export type TaskHistoryMaxAggregateInputType = {
    id?: true
    taskId?: true
    userId?: true
    startDate?: true
    endDate?: true
    sprint?: true
  }

  export type TaskHistoryCountAggregateInputType = {
    id?: true
    taskId?: true
    userId?: true
    startDate?: true
    endDate?: true
    sprint?: true
    _all?: true
  }

  export type TaskHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskHistory to aggregate.
     */
    where?: TaskHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskHistories to fetch.
     */
    orderBy?: TaskHistoryOrderByWithRelationInput | TaskHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TaskHistories
    **/
    _count?: true | TaskHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskHistoryMaxAggregateInputType
  }

  export type GetTaskHistoryAggregateType<T extends TaskHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateTaskHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskHistory[P]>
      : GetScalarType<T[P], AggregateTaskHistory[P]>
  }




  export type TaskHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskHistoryWhereInput
    orderBy?: TaskHistoryOrderByWithAggregationInput | TaskHistoryOrderByWithAggregationInput[]
    by: TaskHistoryScalarFieldEnum[] | TaskHistoryScalarFieldEnum
    having?: TaskHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskHistoryCountAggregateInputType | true
    _avg?: TaskHistoryAvgAggregateInputType
    _sum?: TaskHistorySumAggregateInputType
    _min?: TaskHistoryMinAggregateInputType
    _max?: TaskHistoryMaxAggregateInputType
  }

  export type TaskHistoryGroupByOutputType = {
    id: number
    taskId: number
    userId: number
    startDate: Date
    endDate: Date
    sprint: string
    _count: TaskHistoryCountAggregateOutputType | null
    _avg: TaskHistoryAvgAggregateOutputType | null
    _sum: TaskHistorySumAggregateOutputType | null
    _min: TaskHistoryMinAggregateOutputType | null
    _max: TaskHistoryMaxAggregateOutputType | null
  }

  type GetTaskHistoryGroupByPayload<T extends TaskHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], TaskHistoryGroupByOutputType[P]>
        }
      >
    >


  export type TaskHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    userId?: boolean
    startDate?: boolean
    endDate?: boolean
    sprint?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskHistory"]>

  export type TaskHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    userId?: boolean
    startDate?: boolean
    endDate?: boolean
    sprint?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskHistory"]>

  export type TaskHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    userId?: boolean
    startDate?: boolean
    endDate?: boolean
    sprint?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskHistory"]>

  export type TaskHistorySelectScalar = {
    id?: boolean
    taskId?: boolean
    userId?: boolean
    startDate?: boolean
    endDate?: boolean
    sprint?: boolean
  }

  export type TaskHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "taskId" | "userId" | "startDate" | "endDate" | "sprint", ExtArgs["result"]["taskHistory"]>
  export type TaskHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TaskHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TaskHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TaskHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TaskHistory"
    objects: {
      task: Prisma.$TaskPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      taskId: number
      userId: number
      startDate: Date
      endDate: Date
      sprint: string
    }, ExtArgs["result"]["taskHistory"]>
    composites: {}
  }

  type TaskHistoryGetPayload<S extends boolean | null | undefined | TaskHistoryDefaultArgs> = $Result.GetResult<Prisma.$TaskHistoryPayload, S>

  type TaskHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskHistoryCountAggregateInputType | true
    }

  export interface TaskHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TaskHistory'], meta: { name: 'TaskHistory' } }
    /**
     * Find zero or one TaskHistory that matches the filter.
     * @param {TaskHistoryFindUniqueArgs} args - Arguments to find a TaskHistory
     * @example
     * // Get one TaskHistory
     * const taskHistory = await prisma.taskHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskHistoryFindUniqueArgs>(args: SelectSubset<T, TaskHistoryFindUniqueArgs<ExtArgs>>): Prisma__TaskHistoryClient<$Result.GetResult<Prisma.$TaskHistoryPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one TaskHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskHistoryFindUniqueOrThrowArgs} args - Arguments to find a TaskHistory
     * @example
     * // Get one TaskHistory
     * const taskHistory = await prisma.taskHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskHistoryClient<$Result.GetResult<Prisma.$TaskHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first TaskHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskHistoryFindFirstArgs} args - Arguments to find a TaskHistory
     * @example
     * // Get one TaskHistory
     * const taskHistory = await prisma.taskHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskHistoryFindFirstArgs>(args?: SelectSubset<T, TaskHistoryFindFirstArgs<ExtArgs>>): Prisma__TaskHistoryClient<$Result.GetResult<Prisma.$TaskHistoryPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first TaskHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskHistoryFindFirstOrThrowArgs} args - Arguments to find a TaskHistory
     * @example
     * // Get one TaskHistory
     * const taskHistory = await prisma.taskHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskHistoryClient<$Result.GetResult<Prisma.$TaskHistoryPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more TaskHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskHistories
     * const taskHistories = await prisma.taskHistory.findMany()
     * 
     * // Get first 10 TaskHistories
     * const taskHistories = await prisma.taskHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskHistoryWithIdOnly = await prisma.taskHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskHistoryFindManyArgs>(args?: SelectSubset<T, TaskHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskHistoryPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a TaskHistory.
     * @param {TaskHistoryCreateArgs} args - Arguments to create a TaskHistory.
     * @example
     * // Create one TaskHistory
     * const TaskHistory = await prisma.taskHistory.create({
     *   data: {
     *     // ... data to create a TaskHistory
     *   }
     * })
     * 
     */
    create<T extends TaskHistoryCreateArgs>(args: SelectSubset<T, TaskHistoryCreateArgs<ExtArgs>>): Prisma__TaskHistoryClient<$Result.GetResult<Prisma.$TaskHistoryPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many TaskHistories.
     * @param {TaskHistoryCreateManyArgs} args - Arguments to create many TaskHistories.
     * @example
     * // Create many TaskHistories
     * const taskHistory = await prisma.taskHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskHistoryCreateManyArgs>(args?: SelectSubset<T, TaskHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TaskHistories and returns the data saved in the database.
     * @param {TaskHistoryCreateManyAndReturnArgs} args - Arguments to create many TaskHistories.
     * @example
     * // Create many TaskHistories
     * const taskHistory = await prisma.taskHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TaskHistories and only return the `id`
     * const taskHistoryWithIdOnly = await prisma.taskHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskHistoryPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a TaskHistory.
     * @param {TaskHistoryDeleteArgs} args - Arguments to delete one TaskHistory.
     * @example
     * // Delete one TaskHistory
     * const TaskHistory = await prisma.taskHistory.delete({
     *   where: {
     *     // ... filter to delete one TaskHistory
     *   }
     * })
     * 
     */
    delete<T extends TaskHistoryDeleteArgs>(args: SelectSubset<T, TaskHistoryDeleteArgs<ExtArgs>>): Prisma__TaskHistoryClient<$Result.GetResult<Prisma.$TaskHistoryPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one TaskHistory.
     * @param {TaskHistoryUpdateArgs} args - Arguments to update one TaskHistory.
     * @example
     * // Update one TaskHistory
     * const taskHistory = await prisma.taskHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskHistoryUpdateArgs>(args: SelectSubset<T, TaskHistoryUpdateArgs<ExtArgs>>): Prisma__TaskHistoryClient<$Result.GetResult<Prisma.$TaskHistoryPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more TaskHistories.
     * @param {TaskHistoryDeleteManyArgs} args - Arguments to filter TaskHistories to delete.
     * @example
     * // Delete a few TaskHistories
     * const { count } = await prisma.taskHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskHistoryDeleteManyArgs>(args?: SelectSubset<T, TaskHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskHistories
     * const taskHistory = await prisma.taskHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskHistoryUpdateManyArgs>(args: SelectSubset<T, TaskHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskHistories and returns the data updated in the database.
     * @param {TaskHistoryUpdateManyAndReturnArgs} args - Arguments to update many TaskHistories.
     * @example
     * // Update many TaskHistories
     * const taskHistory = await prisma.taskHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TaskHistories and only return the `id`
     * const taskHistoryWithIdOnly = await prisma.taskHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskHistoryPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one TaskHistory.
     * @param {TaskHistoryUpsertArgs} args - Arguments to update or create a TaskHistory.
     * @example
     * // Update or create a TaskHistory
     * const taskHistory = await prisma.taskHistory.upsert({
     *   create: {
     *     // ... data to create a TaskHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskHistory we want to update
     *   }
     * })
     */
    upsert<T extends TaskHistoryUpsertArgs>(args: SelectSubset<T, TaskHistoryUpsertArgs<ExtArgs>>): Prisma__TaskHistoryClient<$Result.GetResult<Prisma.$TaskHistoryPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of TaskHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskHistoryCountArgs} args - Arguments to filter TaskHistories to count.
     * @example
     * // Count the number of TaskHistories
     * const count = await prisma.taskHistory.count({
     *   where: {
     *     // ... the filter for the TaskHistories we want to count
     *   }
     * })
    **/
    count<T extends TaskHistoryCountArgs>(
      args?: Subset<T, TaskHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TaskHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskHistoryAggregateArgs>(args: Subset<T, TaskHistoryAggregateArgs>): Prisma.PrismaPromise<GetTaskHistoryAggregateType<T>>

    /**
     * Group by TaskHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskHistoryGroupByArgs['orderBy'] }
        : { orderBy?: TaskHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TaskHistory model
   */
  readonly fields: TaskHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TaskHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TaskHistory model
   */ 
  interface TaskHistoryFieldRefs {
    readonly id: FieldRef<"TaskHistory", 'Int'>
    readonly taskId: FieldRef<"TaskHistory", 'Int'>
    readonly userId: FieldRef<"TaskHistory", 'Int'>
    readonly startDate: FieldRef<"TaskHistory", 'DateTime'>
    readonly endDate: FieldRef<"TaskHistory", 'DateTime'>
    readonly sprint: FieldRef<"TaskHistory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TaskHistory findUnique
   */
  export type TaskHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskHistory
     */
    select?: TaskHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskHistory
     */
    omit?: TaskHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TaskHistory to fetch.
     */
    where: TaskHistoryWhereUniqueInput
  }

  /**
   * TaskHistory findUniqueOrThrow
   */
  export type TaskHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskHistory
     */
    select?: TaskHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskHistory
     */
    omit?: TaskHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TaskHistory to fetch.
     */
    where: TaskHistoryWhereUniqueInput
  }

  /**
   * TaskHistory findFirst
   */
  export type TaskHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskHistory
     */
    select?: TaskHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskHistory
     */
    omit?: TaskHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TaskHistory to fetch.
     */
    where?: TaskHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskHistories to fetch.
     */
    orderBy?: TaskHistoryOrderByWithRelationInput | TaskHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskHistories.
     */
    cursor?: TaskHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskHistories.
     */
    distinct?: TaskHistoryScalarFieldEnum | TaskHistoryScalarFieldEnum[]
  }

  /**
   * TaskHistory findFirstOrThrow
   */
  export type TaskHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskHistory
     */
    select?: TaskHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskHistory
     */
    omit?: TaskHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TaskHistory to fetch.
     */
    where?: TaskHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskHistories to fetch.
     */
    orderBy?: TaskHistoryOrderByWithRelationInput | TaskHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskHistories.
     */
    cursor?: TaskHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskHistories.
     */
    distinct?: TaskHistoryScalarFieldEnum | TaskHistoryScalarFieldEnum[]
  }

  /**
   * TaskHistory findMany
   */
  export type TaskHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskHistory
     */
    select?: TaskHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskHistory
     */
    omit?: TaskHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskHistoryInclude<ExtArgs> | null
    /**
     * Filter, which TaskHistories to fetch.
     */
    where?: TaskHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskHistories to fetch.
     */
    orderBy?: TaskHistoryOrderByWithRelationInput | TaskHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TaskHistories.
     */
    cursor?: TaskHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskHistories.
     */
    skip?: number
    distinct?: TaskHistoryScalarFieldEnum | TaskHistoryScalarFieldEnum[]
  }

  /**
   * TaskHistory create
   */
  export type TaskHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskHistory
     */
    select?: TaskHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskHistory
     */
    omit?: TaskHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a TaskHistory.
     */
    data: XOR<TaskHistoryCreateInput, TaskHistoryUncheckedCreateInput>
  }

  /**
   * TaskHistory createMany
   */
  export type TaskHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TaskHistories.
     */
    data: TaskHistoryCreateManyInput | TaskHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TaskHistory createManyAndReturn
   */
  export type TaskHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskHistory
     */
    select?: TaskHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskHistory
     */
    omit?: TaskHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many TaskHistories.
     */
    data: TaskHistoryCreateManyInput | TaskHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskHistory update
   */
  export type TaskHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskHistory
     */
    select?: TaskHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskHistory
     */
    omit?: TaskHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a TaskHistory.
     */
    data: XOR<TaskHistoryUpdateInput, TaskHistoryUncheckedUpdateInput>
    /**
     * Choose, which TaskHistory to update.
     */
    where: TaskHistoryWhereUniqueInput
  }

  /**
   * TaskHistory updateMany
   */
  export type TaskHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TaskHistories.
     */
    data: XOR<TaskHistoryUpdateManyMutationInput, TaskHistoryUncheckedUpdateManyInput>
    /**
     * Filter which TaskHistories to update
     */
    where?: TaskHistoryWhereInput
    /**
     * Limit how many TaskHistories to update.
     */
    limit?: number
  }

  /**
   * TaskHistory updateManyAndReturn
   */
  export type TaskHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskHistory
     */
    select?: TaskHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskHistory
     */
    omit?: TaskHistoryOmit<ExtArgs> | null
    /**
     * The data used to update TaskHistories.
     */
    data: XOR<TaskHistoryUpdateManyMutationInput, TaskHistoryUncheckedUpdateManyInput>
    /**
     * Filter which TaskHistories to update
     */
    where?: TaskHistoryWhereInput
    /**
     * Limit how many TaskHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskHistory upsert
   */
  export type TaskHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskHistory
     */
    select?: TaskHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskHistory
     */
    omit?: TaskHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the TaskHistory to update in case it exists.
     */
    where: TaskHistoryWhereUniqueInput
    /**
     * In case the TaskHistory found by the `where` argument doesn't exist, create a new TaskHistory with this data.
     */
    create: XOR<TaskHistoryCreateInput, TaskHistoryUncheckedCreateInput>
    /**
     * In case the TaskHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskHistoryUpdateInput, TaskHistoryUncheckedUpdateInput>
  }

  /**
   * TaskHistory delete
   */
  export type TaskHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskHistory
     */
    select?: TaskHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskHistory
     */
    omit?: TaskHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskHistoryInclude<ExtArgs> | null
    /**
     * Filter which TaskHistory to delete.
     */
    where: TaskHistoryWhereUniqueInput
  }

  /**
   * TaskHistory deleteMany
   */
  export type TaskHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskHistories to delete
     */
    where?: TaskHistoryWhereInput
    /**
     * Limit how many TaskHistories to delete.
     */
    limit?: number
  }

  /**
   * TaskHistory without action
   */
  export type TaskHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskHistory
     */
    select?: TaskHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskHistory
     */
    omit?: TaskHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskHistoryInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    taskId: number | null
    userId: number | null
    subtaskId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    taskId: number | null
    userId: number | null
    subtaskId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    text: string | null
    taskId: number | null
    userId: number | null
    username: string | null
    commentTime: Date | null
    subtaskId: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    text: string | null
    taskId: number | null
    userId: number | null
    username: string | null
    commentTime: Date | null
    subtaskId: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    text: number
    taskId: number
    userId: number
    username: number
    commentTime: number
    subtaskId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    taskId?: true
    userId?: true
    subtaskId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    taskId?: true
    userId?: true
    subtaskId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    text?: true
    taskId?: true
    userId?: true
    username?: true
    commentTime?: true
    subtaskId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    text?: true
    taskId?: true
    userId?: true
    username?: true
    commentTime?: true
    subtaskId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    text?: true
    taskId?: true
    userId?: true
    username?: true
    commentTime?: true
    subtaskId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: number
    text: string
    taskId: number
    userId: number
    username: string
    commentTime: Date
    subtaskId: number | null
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    taskId?: boolean
    userId?: boolean
    username?: boolean
    commentTime?: boolean
    subtaskId?: boolean
    task?: boolean | Comment$taskArgs<ExtArgs>
    subtask?: boolean | Comment$subtaskArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    taskId?: boolean
    userId?: boolean
    username?: boolean
    commentTime?: boolean
    subtaskId?: boolean
    task?: boolean | Comment$taskArgs<ExtArgs>
    subtask?: boolean | Comment$subtaskArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    taskId?: boolean
    userId?: boolean
    username?: boolean
    commentTime?: boolean
    subtaskId?: boolean
    task?: boolean | Comment$taskArgs<ExtArgs>
    subtask?: boolean | Comment$subtaskArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    text?: boolean
    taskId?: boolean
    userId?: boolean
    username?: boolean
    commentTime?: boolean
    subtaskId?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "taskId" | "userId" | "username" | "commentTime" | "subtaskId", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | Comment$taskArgs<ExtArgs>
    subtask?: boolean | Comment$subtaskArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | Comment$taskArgs<ExtArgs>
    subtask?: boolean | Comment$subtaskArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | Comment$taskArgs<ExtArgs>
    subtask?: boolean | Comment$subtaskArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      task: Prisma.$TaskPayload<ExtArgs> | null
      subtask: Prisma.$SubtaskPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      text: string
      taskId: number
      userId: number
      username: string
      commentTime: Date
      subtaskId: number | null
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task<T extends Comment$taskArgs<ExtArgs> = {}>(args?: Subset<T, Comment$taskArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    subtask<T extends Comment$subtaskArgs<ExtArgs> = {}>(args?: Subset<T, Comment$subtaskArgs<ExtArgs>>): Prisma__SubtaskClient<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'Int'>
    readonly text: FieldRef<"Comment", 'String'>
    readonly taskId: FieldRef<"Comment", 'Int'>
    readonly userId: FieldRef<"Comment", 'Int'>
    readonly username: FieldRef<"Comment", 'String'>
    readonly commentTime: FieldRef<"Comment", 'DateTime'>
    readonly subtaskId: FieldRef<"Comment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment.task
   */
  export type Comment$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
  }

  /**
   * Comment.subtask
   */
  export type Comment$subtaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
    where?: SubtaskWhereInput
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model TaskAssignment
   */

  export type AggregateTaskAssignment = {
    _count: TaskAssignmentCountAggregateOutputType | null
    _avg: TaskAssignmentAvgAggregateOutputType | null
    _sum: TaskAssignmentSumAggregateOutputType | null
    _min: TaskAssignmentMinAggregateOutputType | null
    _max: TaskAssignmentMaxAggregateOutputType | null
  }

  export type TaskAssignmentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    taskId: number | null
  }

  export type TaskAssignmentSumAggregateOutputType = {
    id: number | null
    userId: number | null
    taskId: number | null
  }

  export type TaskAssignmentMinAggregateOutputType = {
    id: number | null
    userId: number | null
    taskId: number | null
  }

  export type TaskAssignmentMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    taskId: number | null
  }

  export type TaskAssignmentCountAggregateOutputType = {
    id: number
    userId: number
    taskId: number
    _all: number
  }


  export type TaskAssignmentAvgAggregateInputType = {
    id?: true
    userId?: true
    taskId?: true
  }

  export type TaskAssignmentSumAggregateInputType = {
    id?: true
    userId?: true
    taskId?: true
  }

  export type TaskAssignmentMinAggregateInputType = {
    id?: true
    userId?: true
    taskId?: true
  }

  export type TaskAssignmentMaxAggregateInputType = {
    id?: true
    userId?: true
    taskId?: true
  }

  export type TaskAssignmentCountAggregateInputType = {
    id?: true
    userId?: true
    taskId?: true
    _all?: true
  }

  export type TaskAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskAssignment to aggregate.
     */
    where?: TaskAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskAssignments to fetch.
     */
    orderBy?: TaskAssignmentOrderByWithRelationInput | TaskAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TaskAssignments
    **/
    _count?: true | TaskAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskAssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskAssignmentMaxAggregateInputType
  }

  export type GetTaskAssignmentAggregateType<T extends TaskAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateTaskAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskAssignment[P]>
      : GetScalarType<T[P], AggregateTaskAssignment[P]>
  }




  export type TaskAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskAssignmentWhereInput
    orderBy?: TaskAssignmentOrderByWithAggregationInput | TaskAssignmentOrderByWithAggregationInput[]
    by: TaskAssignmentScalarFieldEnum[] | TaskAssignmentScalarFieldEnum
    having?: TaskAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskAssignmentCountAggregateInputType | true
    _avg?: TaskAssignmentAvgAggregateInputType
    _sum?: TaskAssignmentSumAggregateInputType
    _min?: TaskAssignmentMinAggregateInputType
    _max?: TaskAssignmentMaxAggregateInputType
  }

  export type TaskAssignmentGroupByOutputType = {
    id: number
    userId: number
    taskId: number
    _count: TaskAssignmentCountAggregateOutputType | null
    _avg: TaskAssignmentAvgAggregateOutputType | null
    _sum: TaskAssignmentSumAggregateOutputType | null
    _min: TaskAssignmentMinAggregateOutputType | null
    _max: TaskAssignmentMaxAggregateOutputType | null
  }

  type GetTaskAssignmentGroupByPayload<T extends TaskAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], TaskAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type TaskAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    taskId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskAssignment"]>

  export type TaskAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    taskId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskAssignment"]>

  export type TaskAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    taskId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taskAssignment"]>

  export type TaskAssignmentSelectScalar = {
    id?: boolean
    userId?: boolean
    taskId?: boolean
  }

  export type TaskAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "taskId", ExtArgs["result"]["taskAssignment"]>
  export type TaskAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }
  export type TaskAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }
  export type TaskAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }

  export type $TaskAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TaskAssignment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      task: Prisma.$TaskPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      taskId: number
    }, ExtArgs["result"]["taskAssignment"]>
    composites: {}
  }

  type TaskAssignmentGetPayload<S extends boolean | null | undefined | TaskAssignmentDefaultArgs> = $Result.GetResult<Prisma.$TaskAssignmentPayload, S>

  type TaskAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskAssignmentCountAggregateInputType | true
    }

  export interface TaskAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TaskAssignment'], meta: { name: 'TaskAssignment' } }
    /**
     * Find zero or one TaskAssignment that matches the filter.
     * @param {TaskAssignmentFindUniqueArgs} args - Arguments to find a TaskAssignment
     * @example
     * // Get one TaskAssignment
     * const taskAssignment = await prisma.taskAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskAssignmentFindUniqueArgs>(args: SelectSubset<T, TaskAssignmentFindUniqueArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one TaskAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskAssignmentFindUniqueOrThrowArgs} args - Arguments to find a TaskAssignment
     * @example
     * // Get one TaskAssignment
     * const taskAssignment = await prisma.taskAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first TaskAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAssignmentFindFirstArgs} args - Arguments to find a TaskAssignment
     * @example
     * // Get one TaskAssignment
     * const taskAssignment = await prisma.taskAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskAssignmentFindFirstArgs>(args?: SelectSubset<T, TaskAssignmentFindFirstArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first TaskAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAssignmentFindFirstOrThrowArgs} args - Arguments to find a TaskAssignment
     * @example
     * // Get one TaskAssignment
     * const taskAssignment = await prisma.taskAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more TaskAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskAssignments
     * const taskAssignments = await prisma.taskAssignment.findMany()
     * 
     * // Get first 10 TaskAssignments
     * const taskAssignments = await prisma.taskAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskAssignmentWithIdOnly = await prisma.taskAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskAssignmentFindManyArgs>(args?: SelectSubset<T, TaskAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a TaskAssignment.
     * @param {TaskAssignmentCreateArgs} args - Arguments to create a TaskAssignment.
     * @example
     * // Create one TaskAssignment
     * const TaskAssignment = await prisma.taskAssignment.create({
     *   data: {
     *     // ... data to create a TaskAssignment
     *   }
     * })
     * 
     */
    create<T extends TaskAssignmentCreateArgs>(args: SelectSubset<T, TaskAssignmentCreateArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many TaskAssignments.
     * @param {TaskAssignmentCreateManyArgs} args - Arguments to create many TaskAssignments.
     * @example
     * // Create many TaskAssignments
     * const taskAssignment = await prisma.taskAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskAssignmentCreateManyArgs>(args?: SelectSubset<T, TaskAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TaskAssignments and returns the data saved in the database.
     * @param {TaskAssignmentCreateManyAndReturnArgs} args - Arguments to create many TaskAssignments.
     * @example
     * // Create many TaskAssignments
     * const taskAssignment = await prisma.taskAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TaskAssignments and only return the `id`
     * const taskAssignmentWithIdOnly = await prisma.taskAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a TaskAssignment.
     * @param {TaskAssignmentDeleteArgs} args - Arguments to delete one TaskAssignment.
     * @example
     * // Delete one TaskAssignment
     * const TaskAssignment = await prisma.taskAssignment.delete({
     *   where: {
     *     // ... filter to delete one TaskAssignment
     *   }
     * })
     * 
     */
    delete<T extends TaskAssignmentDeleteArgs>(args: SelectSubset<T, TaskAssignmentDeleteArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one TaskAssignment.
     * @param {TaskAssignmentUpdateArgs} args - Arguments to update one TaskAssignment.
     * @example
     * // Update one TaskAssignment
     * const taskAssignment = await prisma.taskAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskAssignmentUpdateArgs>(args: SelectSubset<T, TaskAssignmentUpdateArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more TaskAssignments.
     * @param {TaskAssignmentDeleteManyArgs} args - Arguments to filter TaskAssignments to delete.
     * @example
     * // Delete a few TaskAssignments
     * const { count } = await prisma.taskAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskAssignmentDeleteManyArgs>(args?: SelectSubset<T, TaskAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskAssignments
     * const taskAssignment = await prisma.taskAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskAssignmentUpdateManyArgs>(args: SelectSubset<T, TaskAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TaskAssignments and returns the data updated in the database.
     * @param {TaskAssignmentUpdateManyAndReturnArgs} args - Arguments to update many TaskAssignments.
     * @example
     * // Update many TaskAssignments
     * const taskAssignment = await prisma.taskAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TaskAssignments and only return the `id`
     * const taskAssignmentWithIdOnly = await prisma.taskAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one TaskAssignment.
     * @param {TaskAssignmentUpsertArgs} args - Arguments to update or create a TaskAssignment.
     * @example
     * // Update or create a TaskAssignment
     * const taskAssignment = await prisma.taskAssignment.upsert({
     *   create: {
     *     // ... data to create a TaskAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskAssignment we want to update
     *   }
     * })
     */
    upsert<T extends TaskAssignmentUpsertArgs>(args: SelectSubset<T, TaskAssignmentUpsertArgs<ExtArgs>>): Prisma__TaskAssignmentClient<$Result.GetResult<Prisma.$TaskAssignmentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of TaskAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAssignmentCountArgs} args - Arguments to filter TaskAssignments to count.
     * @example
     * // Count the number of TaskAssignments
     * const count = await prisma.taskAssignment.count({
     *   where: {
     *     // ... the filter for the TaskAssignments we want to count
     *   }
     * })
    **/
    count<T extends TaskAssignmentCountArgs>(
      args?: Subset<T, TaskAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TaskAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAssignmentAggregateArgs>(args: Subset<T, TaskAssignmentAggregateArgs>): Prisma.PrismaPromise<GetTaskAssignmentAggregateType<T>>

    /**
     * Group by TaskAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: TaskAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TaskAssignment model
   */
  readonly fields: TaskAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TaskAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TaskAssignment model
   */ 
  interface TaskAssignmentFieldRefs {
    readonly id: FieldRef<"TaskAssignment", 'Int'>
    readonly userId: FieldRef<"TaskAssignment", 'Int'>
    readonly taskId: FieldRef<"TaskAssignment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TaskAssignment findUnique
   */
  export type TaskAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TaskAssignment to fetch.
     */
    where: TaskAssignmentWhereUniqueInput
  }

  /**
   * TaskAssignment findUniqueOrThrow
   */
  export type TaskAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TaskAssignment to fetch.
     */
    where: TaskAssignmentWhereUniqueInput
  }

  /**
   * TaskAssignment findFirst
   */
  export type TaskAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TaskAssignment to fetch.
     */
    where?: TaskAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskAssignments to fetch.
     */
    orderBy?: TaskAssignmentOrderByWithRelationInput | TaskAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskAssignments.
     */
    cursor?: TaskAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskAssignments.
     */
    distinct?: TaskAssignmentScalarFieldEnum | TaskAssignmentScalarFieldEnum[]
  }

  /**
   * TaskAssignment findFirstOrThrow
   */
  export type TaskAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TaskAssignment to fetch.
     */
    where?: TaskAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskAssignments to fetch.
     */
    orderBy?: TaskAssignmentOrderByWithRelationInput | TaskAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TaskAssignments.
     */
    cursor?: TaskAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TaskAssignments.
     */
    distinct?: TaskAssignmentScalarFieldEnum | TaskAssignmentScalarFieldEnum[]
  }

  /**
   * TaskAssignment findMany
   */
  export type TaskAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TaskAssignments to fetch.
     */
    where?: TaskAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TaskAssignments to fetch.
     */
    orderBy?: TaskAssignmentOrderByWithRelationInput | TaskAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TaskAssignments.
     */
    cursor?: TaskAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TaskAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TaskAssignments.
     */
    skip?: number
    distinct?: TaskAssignmentScalarFieldEnum | TaskAssignmentScalarFieldEnum[]
  }

  /**
   * TaskAssignment create
   */
  export type TaskAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a TaskAssignment.
     */
    data: XOR<TaskAssignmentCreateInput, TaskAssignmentUncheckedCreateInput>
  }

  /**
   * TaskAssignment createMany
   */
  export type TaskAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TaskAssignments.
     */
    data: TaskAssignmentCreateManyInput | TaskAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TaskAssignment createManyAndReturn
   */
  export type TaskAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many TaskAssignments.
     */
    data: TaskAssignmentCreateManyInput | TaskAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskAssignment update
   */
  export type TaskAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a TaskAssignment.
     */
    data: XOR<TaskAssignmentUpdateInput, TaskAssignmentUncheckedUpdateInput>
    /**
     * Choose, which TaskAssignment to update.
     */
    where: TaskAssignmentWhereUniqueInput
  }

  /**
   * TaskAssignment updateMany
   */
  export type TaskAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TaskAssignments.
     */
    data: XOR<TaskAssignmentUpdateManyMutationInput, TaskAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which TaskAssignments to update
     */
    where?: TaskAssignmentWhereInput
    /**
     * Limit how many TaskAssignments to update.
     */
    limit?: number
  }

  /**
   * TaskAssignment updateManyAndReturn
   */
  export type TaskAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update TaskAssignments.
     */
    data: XOR<TaskAssignmentUpdateManyMutationInput, TaskAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which TaskAssignments to update
     */
    where?: TaskAssignmentWhereInput
    /**
     * Limit how many TaskAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TaskAssignment upsert
   */
  export type TaskAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the TaskAssignment to update in case it exists.
     */
    where: TaskAssignmentWhereUniqueInput
    /**
     * In case the TaskAssignment found by the `where` argument doesn't exist, create a new TaskAssignment with this data.
     */
    create: XOR<TaskAssignmentCreateInput, TaskAssignmentUncheckedCreateInput>
    /**
     * In case the TaskAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskAssignmentUpdateInput, TaskAssignmentUncheckedUpdateInput>
  }

  /**
   * TaskAssignment delete
   */
  export type TaskAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
    /**
     * Filter which TaskAssignment to delete.
     */
    where: TaskAssignmentWhereUniqueInput
  }

  /**
   * TaskAssignment deleteMany
   */
  export type TaskAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TaskAssignments to delete
     */
    where?: TaskAssignmentWhereInput
    /**
     * Limit how many TaskAssignments to delete.
     */
    limit?: number
  }

  /**
   * TaskAssignment without action
   */
  export type TaskAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskAssignment
     */
    select?: TaskAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TaskAssignment
     */
    omit?: TaskAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model Attachment
   */

  export type AggregateAttachment = {
    _count: AttachmentCountAggregateOutputType | null
    _avg: AttachmentAvgAggregateOutputType | null
    _sum: AttachmentSumAggregateOutputType | null
    _min: AttachmentMinAggregateOutputType | null
    _max: AttachmentMaxAggregateOutputType | null
  }

  export type AttachmentAvgAggregateOutputType = {
    id: number | null
    taskId: number | null
    subTaskId: number | null
    uploadedById: number | null
  }

  export type AttachmentSumAggregateOutputType = {
    id: number | null
    taskId: number | null
    subTaskId: number | null
    uploadedById: number | null
  }

  export type AttachmentMinAggregateOutputType = {
    id: number | null
    fileURL: string | null
    fileName: string | null
    taskId: number | null
    subTaskId: number | null
    uploadedById: number | null
  }

  export type AttachmentMaxAggregateOutputType = {
    id: number | null
    fileURL: string | null
    fileName: string | null
    taskId: number | null
    subTaskId: number | null
    uploadedById: number | null
  }

  export type AttachmentCountAggregateOutputType = {
    id: number
    fileURL: number
    fileName: number
    taskId: number
    subTaskId: number
    uploadedById: number
    _all: number
  }


  export type AttachmentAvgAggregateInputType = {
    id?: true
    taskId?: true
    subTaskId?: true
    uploadedById?: true
  }

  export type AttachmentSumAggregateInputType = {
    id?: true
    taskId?: true
    subTaskId?: true
    uploadedById?: true
  }

  export type AttachmentMinAggregateInputType = {
    id?: true
    fileURL?: true
    fileName?: true
    taskId?: true
    subTaskId?: true
    uploadedById?: true
  }

  export type AttachmentMaxAggregateInputType = {
    id?: true
    fileURL?: true
    fileName?: true
    taskId?: true
    subTaskId?: true
    uploadedById?: true
  }

  export type AttachmentCountAggregateInputType = {
    id?: true
    fileURL?: true
    fileName?: true
    taskId?: true
    subTaskId?: true
    uploadedById?: true
    _all?: true
  }

  export type AttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attachment to aggregate.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attachments
    **/
    _count?: true | AttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttachmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttachmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttachmentMaxAggregateInputType
  }

  export type GetAttachmentAggregateType<T extends AttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttachment[P]>
      : GetScalarType<T[P], AggregateAttachment[P]>
  }




  export type AttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithAggregationInput | AttachmentOrderByWithAggregationInput[]
    by: AttachmentScalarFieldEnum[] | AttachmentScalarFieldEnum
    having?: AttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttachmentCountAggregateInputType | true
    _avg?: AttachmentAvgAggregateInputType
    _sum?: AttachmentSumAggregateInputType
    _min?: AttachmentMinAggregateInputType
    _max?: AttachmentMaxAggregateInputType
  }

  export type AttachmentGroupByOutputType = {
    id: number
    fileURL: string
    fileName: string | null
    taskId: number | null
    subTaskId: number | null
    uploadedById: number
    _count: AttachmentCountAggregateOutputType | null
    _avg: AttachmentAvgAggregateOutputType | null
    _sum: AttachmentSumAggregateOutputType | null
    _min: AttachmentMinAggregateOutputType | null
    _max: AttachmentMaxAggregateOutputType | null
  }

  type GetAttachmentGroupByPayload<T extends AttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], AttachmentGroupByOutputType[P]>
        }
      >
    >


  export type AttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileURL?: boolean
    fileName?: boolean
    taskId?: boolean
    subTaskId?: boolean
    uploadedById?: boolean
    task?: boolean | Attachment$taskArgs<ExtArgs>
    subTask?: boolean | Attachment$subTaskArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attachment"]>

  export type AttachmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileURL?: boolean
    fileName?: boolean
    taskId?: boolean
    subTaskId?: boolean
    uploadedById?: boolean
    task?: boolean | Attachment$taskArgs<ExtArgs>
    subTask?: boolean | Attachment$subTaskArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attachment"]>

  export type AttachmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileURL?: boolean
    fileName?: boolean
    taskId?: boolean
    subTaskId?: boolean
    uploadedById?: boolean
    task?: boolean | Attachment$taskArgs<ExtArgs>
    subTask?: boolean | Attachment$subTaskArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attachment"]>

  export type AttachmentSelectScalar = {
    id?: boolean
    fileURL?: boolean
    fileName?: boolean
    taskId?: boolean
    subTaskId?: boolean
    uploadedById?: boolean
  }

  export type AttachmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fileURL" | "fileName" | "taskId" | "subTaskId" | "uploadedById", ExtArgs["result"]["attachment"]>
  export type AttachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | Attachment$taskArgs<ExtArgs>
    subTask?: boolean | Attachment$subTaskArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AttachmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | Attachment$taskArgs<ExtArgs>
    subTask?: boolean | Attachment$subTaskArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AttachmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | Attachment$taskArgs<ExtArgs>
    subTask?: boolean | Attachment$subTaskArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attachment"
    objects: {
      task: Prisma.$TaskPayload<ExtArgs> | null
      subTask: Prisma.$SubtaskPayload<ExtArgs> | null
      uploadedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fileURL: string
      fileName: string | null
      taskId: number | null
      subTaskId: number | null
      uploadedById: number
    }, ExtArgs["result"]["attachment"]>
    composites: {}
  }

  type AttachmentGetPayload<S extends boolean | null | undefined | AttachmentDefaultArgs> = $Result.GetResult<Prisma.$AttachmentPayload, S>

  type AttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttachmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttachmentCountAggregateInputType | true
    }

  export interface AttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attachment'], meta: { name: 'Attachment' } }
    /**
     * Find zero or one Attachment that matches the filter.
     * @param {AttachmentFindUniqueArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttachmentFindUniqueArgs>(args: SelectSubset<T, AttachmentFindUniqueArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Attachment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttachmentFindUniqueOrThrowArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Attachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindFirstArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttachmentFindFirstArgs>(args?: SelectSubset<T, AttachmentFindFirstArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Attachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindFirstOrThrowArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Attachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attachments
     * const attachments = await prisma.attachment.findMany()
     * 
     * // Get first 10 Attachments
     * const attachments = await prisma.attachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attachmentWithIdOnly = await prisma.attachment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttachmentFindManyArgs>(args?: SelectSubset<T, AttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Attachment.
     * @param {AttachmentCreateArgs} args - Arguments to create a Attachment.
     * @example
     * // Create one Attachment
     * const Attachment = await prisma.attachment.create({
     *   data: {
     *     // ... data to create a Attachment
     *   }
     * })
     * 
     */
    create<T extends AttachmentCreateArgs>(args: SelectSubset<T, AttachmentCreateArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Attachments.
     * @param {AttachmentCreateManyArgs} args - Arguments to create many Attachments.
     * @example
     * // Create many Attachments
     * const attachment = await prisma.attachment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttachmentCreateManyArgs>(args?: SelectSubset<T, AttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attachments and returns the data saved in the database.
     * @param {AttachmentCreateManyAndReturnArgs} args - Arguments to create many Attachments.
     * @example
     * // Create many Attachments
     * const attachment = await prisma.attachment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attachments and only return the `id`
     * const attachmentWithIdOnly = await prisma.attachment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttachmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AttachmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Attachment.
     * @param {AttachmentDeleteArgs} args - Arguments to delete one Attachment.
     * @example
     * // Delete one Attachment
     * const Attachment = await prisma.attachment.delete({
     *   where: {
     *     // ... filter to delete one Attachment
     *   }
     * })
     * 
     */
    delete<T extends AttachmentDeleteArgs>(args: SelectSubset<T, AttachmentDeleteArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Attachment.
     * @param {AttachmentUpdateArgs} args - Arguments to update one Attachment.
     * @example
     * // Update one Attachment
     * const attachment = await prisma.attachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttachmentUpdateArgs>(args: SelectSubset<T, AttachmentUpdateArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Attachments.
     * @param {AttachmentDeleteManyArgs} args - Arguments to filter Attachments to delete.
     * @example
     * // Delete a few Attachments
     * const { count } = await prisma.attachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttachmentDeleteManyArgs>(args?: SelectSubset<T, AttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attachments
     * const attachment = await prisma.attachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttachmentUpdateManyArgs>(args: SelectSubset<T, AttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attachments and returns the data updated in the database.
     * @param {AttachmentUpdateManyAndReturnArgs} args - Arguments to update many Attachments.
     * @example
     * // Update many Attachments
     * const attachment = await prisma.attachment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Attachments and only return the `id`
     * const attachmentWithIdOnly = await prisma.attachment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttachmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AttachmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Attachment.
     * @param {AttachmentUpsertArgs} args - Arguments to update or create a Attachment.
     * @example
     * // Update or create a Attachment
     * const attachment = await prisma.attachment.upsert({
     *   create: {
     *     // ... data to create a Attachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attachment we want to update
     *   }
     * })
     */
    upsert<T extends AttachmentUpsertArgs>(args: SelectSubset<T, AttachmentUpsertArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentCountArgs} args - Arguments to filter Attachments to count.
     * @example
     * // Count the number of Attachments
     * const count = await prisma.attachment.count({
     *   where: {
     *     // ... the filter for the Attachments we want to count
     *   }
     * })
    **/
    count<T extends AttachmentCountArgs>(
      args?: Subset<T, AttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttachmentAggregateArgs>(args: Subset<T, AttachmentAggregateArgs>): Prisma.PrismaPromise<GetAttachmentAggregateType<T>>

    /**
     * Group by Attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttachmentGroupByArgs['orderBy'] }
        : { orderBy?: AttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attachment model
   */
  readonly fields: AttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task<T extends Attachment$taskArgs<ExtArgs> = {}>(args?: Subset<T, Attachment$taskArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    subTask<T extends Attachment$subTaskArgs<ExtArgs> = {}>(args?: Subset<T, Attachment$subTaskArgs<ExtArgs>>): Prisma__SubtaskClient<$Result.GetResult<Prisma.$SubtaskPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attachment model
   */ 
  interface AttachmentFieldRefs {
    readonly id: FieldRef<"Attachment", 'Int'>
    readonly fileURL: FieldRef<"Attachment", 'String'>
    readonly fileName: FieldRef<"Attachment", 'String'>
    readonly taskId: FieldRef<"Attachment", 'Int'>
    readonly subTaskId: FieldRef<"Attachment", 'Int'>
    readonly uploadedById: FieldRef<"Attachment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Attachment findUnique
   */
  export type AttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment findUniqueOrThrow
   */
  export type AttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment findFirst
   */
  export type AttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attachments.
     */
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment findFirstOrThrow
   */
  export type AttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attachments.
     */
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment findMany
   */
  export type AttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachments to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment create
   */
  export type AttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Attachment.
     */
    data: XOR<AttachmentCreateInput, AttachmentUncheckedCreateInput>
  }

  /**
   * Attachment createMany
   */
  export type AttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attachments.
     */
    data: AttachmentCreateManyInput | AttachmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attachment createManyAndReturn
   */
  export type AttachmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * The data used to create many Attachments.
     */
    data: AttachmentCreateManyInput | AttachmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attachment update
   */
  export type AttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Attachment.
     */
    data: XOR<AttachmentUpdateInput, AttachmentUncheckedUpdateInput>
    /**
     * Choose, which Attachment to update.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment updateMany
   */
  export type AttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attachments.
     */
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyInput>
    /**
     * Filter which Attachments to update
     */
    where?: AttachmentWhereInput
    /**
     * Limit how many Attachments to update.
     */
    limit?: number
  }

  /**
   * Attachment updateManyAndReturn
   */
  export type AttachmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * The data used to update Attachments.
     */
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyInput>
    /**
     * Filter which Attachments to update
     */
    where?: AttachmentWhereInput
    /**
     * Limit how many Attachments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attachment upsert
   */
  export type AttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Attachment to update in case it exists.
     */
    where: AttachmentWhereUniqueInput
    /**
     * In case the Attachment found by the `where` argument doesn't exist, create a new Attachment with this data.
     */
    create: XOR<AttachmentCreateInput, AttachmentUncheckedCreateInput>
    /**
     * In case the Attachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttachmentUpdateInput, AttachmentUncheckedUpdateInput>
  }

  /**
   * Attachment delete
   */
  export type AttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter which Attachment to delete.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment deleteMany
   */
  export type AttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attachments to delete
     */
    where?: AttachmentWhereInput
    /**
     * Limit how many Attachments to delete.
     */
    limit?: number
  }

  /**
   * Attachment.task
   */
  export type Attachment$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
  }

  /**
   * Attachment.subTask
   */
  export type Attachment$subTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtask
     */
    select?: SubtaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subtask
     */
    omit?: SubtaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtaskInclude<ExtArgs> | null
    where?: SubtaskWhereInput
  }

  /**
   * Attachment without action
   */
  export type AttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
  }


  /**
   * Model UserProjects
   */

  export type AggregateUserProjects = {
    _count: UserProjectsCountAggregateOutputType | null
    _avg: UserProjectsAvgAggregateOutputType | null
    _sum: UserProjectsSumAggregateOutputType | null
    _min: UserProjectsMinAggregateOutputType | null
    _max: UserProjectsMaxAggregateOutputType | null
  }

  export type UserProjectsAvgAggregateOutputType = {
    userId: number | null
    projectId: number | null
  }

  export type UserProjectsSumAggregateOutputType = {
    userId: number | null
    projectId: number | null
  }

  export type UserProjectsMinAggregateOutputType = {
    userId: number | null
    projectId: number | null
    role: string | null
  }

  export type UserProjectsMaxAggregateOutputType = {
    userId: number | null
    projectId: number | null
    role: string | null
  }

  export type UserProjectsCountAggregateOutputType = {
    userId: number
    projectId: number
    role: number
    _all: number
  }


  export type UserProjectsAvgAggregateInputType = {
    userId?: true
    projectId?: true
  }

  export type UserProjectsSumAggregateInputType = {
    userId?: true
    projectId?: true
  }

  export type UserProjectsMinAggregateInputType = {
    userId?: true
    projectId?: true
    role?: true
  }

  export type UserProjectsMaxAggregateInputType = {
    userId?: true
    projectId?: true
    role?: true
  }

  export type UserProjectsCountAggregateInputType = {
    userId?: true
    projectId?: true
    role?: true
    _all?: true
  }

  export type UserProjectsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProjects to aggregate.
     */
    where?: UserProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProjects to fetch.
     */
    orderBy?: UserProjectsOrderByWithRelationInput | UserProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProjects
    **/
    _count?: true | UserProjectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserProjectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserProjectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProjectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProjectsMaxAggregateInputType
  }

  export type GetUserProjectsAggregateType<T extends UserProjectsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProjects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProjects[P]>
      : GetScalarType<T[P], AggregateUserProjects[P]>
  }




  export type UserProjectsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProjectsWhereInput
    orderBy?: UserProjectsOrderByWithAggregationInput | UserProjectsOrderByWithAggregationInput[]
    by: UserProjectsScalarFieldEnum[] | UserProjectsScalarFieldEnum
    having?: UserProjectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProjectsCountAggregateInputType | true
    _avg?: UserProjectsAvgAggregateInputType
    _sum?: UserProjectsSumAggregateInputType
    _min?: UserProjectsMinAggregateInputType
    _max?: UserProjectsMaxAggregateInputType
  }

  export type UserProjectsGroupByOutputType = {
    userId: number
    projectId: number
    role: string
    _count: UserProjectsCountAggregateOutputType | null
    _avg: UserProjectsAvgAggregateOutputType | null
    _sum: UserProjectsSumAggregateOutputType | null
    _min: UserProjectsMinAggregateOutputType | null
    _max: UserProjectsMaxAggregateOutputType | null
  }

  type GetUserProjectsGroupByPayload<T extends UserProjectsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProjectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProjectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProjectsGroupByOutputType[P]>
            : GetScalarType<T[P], UserProjectsGroupByOutputType[P]>
        }
      >
    >


  export type UserProjectsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    projectId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProjects"]>

  export type UserProjectsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    projectId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProjects"]>

  export type UserProjectsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    projectId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProjects"]>

  export type UserProjectsSelectScalar = {
    userId?: boolean
    projectId?: boolean
    role?: boolean
  }

  export type UserProjectsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "projectId" | "role", ExtArgs["result"]["userProjects"]>
  export type UserProjectsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type UserProjectsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type UserProjectsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $UserProjectsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProjects"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      projectId: number
      role: string
    }, ExtArgs["result"]["userProjects"]>
    composites: {}
  }

  type UserProjectsGetPayload<S extends boolean | null | undefined | UserProjectsDefaultArgs> = $Result.GetResult<Prisma.$UserProjectsPayload, S>

  type UserProjectsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserProjectsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserProjectsCountAggregateInputType | true
    }

  export interface UserProjectsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProjects'], meta: { name: 'UserProjects' } }
    /**
     * Find zero or one UserProjects that matches the filter.
     * @param {UserProjectsFindUniqueArgs} args - Arguments to find a UserProjects
     * @example
     * // Get one UserProjects
     * const userProjects = await prisma.userProjects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProjectsFindUniqueArgs>(args: SelectSubset<T, UserProjectsFindUniqueArgs<ExtArgs>>): Prisma__UserProjectsClient<$Result.GetResult<Prisma.$UserProjectsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one UserProjects that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserProjectsFindUniqueOrThrowArgs} args - Arguments to find a UserProjects
     * @example
     * // Get one UserProjects
     * const userProjects = await prisma.userProjects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProjectsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProjectsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProjectsClient<$Result.GetResult<Prisma.$UserProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first UserProjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectsFindFirstArgs} args - Arguments to find a UserProjects
     * @example
     * // Get one UserProjects
     * const userProjects = await prisma.userProjects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProjectsFindFirstArgs>(args?: SelectSubset<T, UserProjectsFindFirstArgs<ExtArgs>>): Prisma__UserProjectsClient<$Result.GetResult<Prisma.$UserProjectsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first UserProjects that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectsFindFirstOrThrowArgs} args - Arguments to find a UserProjects
     * @example
     * // Get one UserProjects
     * const userProjects = await prisma.userProjects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProjectsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProjectsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProjectsClient<$Result.GetResult<Prisma.$UserProjectsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more UserProjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProjects
     * const userProjects = await prisma.userProjects.findMany()
     * 
     * // Get first 10 UserProjects
     * const userProjects = await prisma.userProjects.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userProjectsWithUserIdOnly = await prisma.userProjects.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserProjectsFindManyArgs>(args?: SelectSubset<T, UserProjectsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProjectsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a UserProjects.
     * @param {UserProjectsCreateArgs} args - Arguments to create a UserProjects.
     * @example
     * // Create one UserProjects
     * const UserProjects = await prisma.userProjects.create({
     *   data: {
     *     // ... data to create a UserProjects
     *   }
     * })
     * 
     */
    create<T extends UserProjectsCreateArgs>(args: SelectSubset<T, UserProjectsCreateArgs<ExtArgs>>): Prisma__UserProjectsClient<$Result.GetResult<Prisma.$UserProjectsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many UserProjects.
     * @param {UserProjectsCreateManyArgs} args - Arguments to create many UserProjects.
     * @example
     * // Create many UserProjects
     * const userProjects = await prisma.userProjects.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProjectsCreateManyArgs>(args?: SelectSubset<T, UserProjectsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProjects and returns the data saved in the database.
     * @param {UserProjectsCreateManyAndReturnArgs} args - Arguments to create many UserProjects.
     * @example
     * // Create many UserProjects
     * const userProjects = await prisma.userProjects.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProjects and only return the `userId`
     * const userProjectsWithUserIdOnly = await prisma.userProjects.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProjectsCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProjectsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProjectsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a UserProjects.
     * @param {UserProjectsDeleteArgs} args - Arguments to delete one UserProjects.
     * @example
     * // Delete one UserProjects
     * const UserProjects = await prisma.userProjects.delete({
     *   where: {
     *     // ... filter to delete one UserProjects
     *   }
     * })
     * 
     */
    delete<T extends UserProjectsDeleteArgs>(args: SelectSubset<T, UserProjectsDeleteArgs<ExtArgs>>): Prisma__UserProjectsClient<$Result.GetResult<Prisma.$UserProjectsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one UserProjects.
     * @param {UserProjectsUpdateArgs} args - Arguments to update one UserProjects.
     * @example
     * // Update one UserProjects
     * const userProjects = await prisma.userProjects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProjectsUpdateArgs>(args: SelectSubset<T, UserProjectsUpdateArgs<ExtArgs>>): Prisma__UserProjectsClient<$Result.GetResult<Prisma.$UserProjectsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more UserProjects.
     * @param {UserProjectsDeleteManyArgs} args - Arguments to filter UserProjects to delete.
     * @example
     * // Delete a few UserProjects
     * const { count } = await prisma.userProjects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProjectsDeleteManyArgs>(args?: SelectSubset<T, UserProjectsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProjects
     * const userProjects = await prisma.userProjects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProjectsUpdateManyArgs>(args: SelectSubset<T, UserProjectsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProjects and returns the data updated in the database.
     * @param {UserProjectsUpdateManyAndReturnArgs} args - Arguments to update many UserProjects.
     * @example
     * // Update many UserProjects
     * const userProjects = await prisma.userProjects.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserProjects and only return the `userId`
     * const userProjectsWithUserIdOnly = await prisma.userProjects.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserProjectsUpdateManyAndReturnArgs>(args: SelectSubset<T, UserProjectsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProjectsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one UserProjects.
     * @param {UserProjectsUpsertArgs} args - Arguments to update or create a UserProjects.
     * @example
     * // Update or create a UserProjects
     * const userProjects = await prisma.userProjects.upsert({
     *   create: {
     *     // ... data to create a UserProjects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProjects we want to update
     *   }
     * })
     */
    upsert<T extends UserProjectsUpsertArgs>(args: SelectSubset<T, UserProjectsUpsertArgs<ExtArgs>>): Prisma__UserProjectsClient<$Result.GetResult<Prisma.$UserProjectsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of UserProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectsCountArgs} args - Arguments to filter UserProjects to count.
     * @example
     * // Count the number of UserProjects
     * const count = await prisma.userProjects.count({
     *   where: {
     *     // ... the filter for the UserProjects we want to count
     *   }
     * })
    **/
    count<T extends UserProjectsCountArgs>(
      args?: Subset<T, UserProjectsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProjectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProjectsAggregateArgs>(args: Subset<T, UserProjectsAggregateArgs>): Prisma.PrismaPromise<GetUserProjectsAggregateType<T>>

    /**
     * Group by UserProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProjectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProjectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProjectsGroupByArgs['orderBy'] }
        : { orderBy?: UserProjectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProjectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProjectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProjects model
   */
  readonly fields: UserProjectsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProjects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProjectsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProjects model
   */ 
  interface UserProjectsFieldRefs {
    readonly userId: FieldRef<"UserProjects", 'Int'>
    readonly projectId: FieldRef<"UserProjects", 'Int'>
    readonly role: FieldRef<"UserProjects", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserProjects findUnique
   */
  export type UserProjectsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProjects
     */
    select?: UserProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProjects
     */
    omit?: UserProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectsInclude<ExtArgs> | null
    /**
     * Filter, which UserProjects to fetch.
     */
    where: UserProjectsWhereUniqueInput
  }

  /**
   * UserProjects findUniqueOrThrow
   */
  export type UserProjectsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProjects
     */
    select?: UserProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProjects
     */
    omit?: UserProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectsInclude<ExtArgs> | null
    /**
     * Filter, which UserProjects to fetch.
     */
    where: UserProjectsWhereUniqueInput
  }

  /**
   * UserProjects findFirst
   */
  export type UserProjectsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProjects
     */
    select?: UserProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProjects
     */
    omit?: UserProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectsInclude<ExtArgs> | null
    /**
     * Filter, which UserProjects to fetch.
     */
    where?: UserProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProjects to fetch.
     */
    orderBy?: UserProjectsOrderByWithRelationInput | UserProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProjects.
     */
    cursor?: UserProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProjects.
     */
    distinct?: UserProjectsScalarFieldEnum | UserProjectsScalarFieldEnum[]
  }

  /**
   * UserProjects findFirstOrThrow
   */
  export type UserProjectsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProjects
     */
    select?: UserProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProjects
     */
    omit?: UserProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectsInclude<ExtArgs> | null
    /**
     * Filter, which UserProjects to fetch.
     */
    where?: UserProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProjects to fetch.
     */
    orderBy?: UserProjectsOrderByWithRelationInput | UserProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProjects.
     */
    cursor?: UserProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProjects.
     */
    distinct?: UserProjectsScalarFieldEnum | UserProjectsScalarFieldEnum[]
  }

  /**
   * UserProjects findMany
   */
  export type UserProjectsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProjects
     */
    select?: UserProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProjects
     */
    omit?: UserProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectsInclude<ExtArgs> | null
    /**
     * Filter, which UserProjects to fetch.
     */
    where?: UserProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProjects to fetch.
     */
    orderBy?: UserProjectsOrderByWithRelationInput | UserProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProjects.
     */
    cursor?: UserProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProjects.
     */
    skip?: number
    distinct?: UserProjectsScalarFieldEnum | UserProjectsScalarFieldEnum[]
  }

  /**
   * UserProjects create
   */
  export type UserProjectsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProjects
     */
    select?: UserProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProjects
     */
    omit?: UserProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProjects.
     */
    data: XOR<UserProjectsCreateInput, UserProjectsUncheckedCreateInput>
  }

  /**
   * UserProjects createMany
   */
  export type UserProjectsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProjects.
     */
    data: UserProjectsCreateManyInput | UserProjectsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProjects createManyAndReturn
   */
  export type UserProjectsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProjects
     */
    select?: UserProjectsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProjects
     */
    omit?: UserProjectsOmit<ExtArgs> | null
    /**
     * The data used to create many UserProjects.
     */
    data: UserProjectsCreateManyInput | UserProjectsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProjects update
   */
  export type UserProjectsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProjects
     */
    select?: UserProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProjects
     */
    omit?: UserProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProjects.
     */
    data: XOR<UserProjectsUpdateInput, UserProjectsUncheckedUpdateInput>
    /**
     * Choose, which UserProjects to update.
     */
    where: UserProjectsWhereUniqueInput
  }

  /**
   * UserProjects updateMany
   */
  export type UserProjectsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProjects.
     */
    data: XOR<UserProjectsUpdateManyMutationInput, UserProjectsUncheckedUpdateManyInput>
    /**
     * Filter which UserProjects to update
     */
    where?: UserProjectsWhereInput
    /**
     * Limit how many UserProjects to update.
     */
    limit?: number
  }

  /**
   * UserProjects updateManyAndReturn
   */
  export type UserProjectsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProjects
     */
    select?: UserProjectsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProjects
     */
    omit?: UserProjectsOmit<ExtArgs> | null
    /**
     * The data used to update UserProjects.
     */
    data: XOR<UserProjectsUpdateManyMutationInput, UserProjectsUncheckedUpdateManyInput>
    /**
     * Filter which UserProjects to update
     */
    where?: UserProjectsWhereInput
    /**
     * Limit how many UserProjects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProjects upsert
   */
  export type UserProjectsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProjects
     */
    select?: UserProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProjects
     */
    omit?: UserProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProjects to update in case it exists.
     */
    where: UserProjectsWhereUniqueInput
    /**
     * In case the UserProjects found by the `where` argument doesn't exist, create a new UserProjects with this data.
     */
    create: XOR<UserProjectsCreateInput, UserProjectsUncheckedCreateInput>
    /**
     * In case the UserProjects was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProjectsUpdateInput, UserProjectsUncheckedUpdateInput>
  }

  /**
   * UserProjects delete
   */
  export type UserProjectsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProjects
     */
    select?: UserProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProjects
     */
    omit?: UserProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectsInclude<ExtArgs> | null
    /**
     * Filter which UserProjects to delete.
     */
    where: UserProjectsWhereUniqueInput
  }

  /**
   * UserProjects deleteMany
   */
  export type UserProjectsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProjects to delete
     */
    where?: UserProjectsWhereInput
    /**
     * Limit how many UserProjects to delete.
     */
    limit?: number
  }

  /**
   * UserProjects without action
   */
  export type UserProjectsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProjects
     */
    select?: UserProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProjects
     */
    omit?: UserProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProjectsInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    id: number | null
  }

  export type TeamSumAggregateOutputType = {
    id: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    id?: true
  }

  export type TeamSumAggregateInputType = {
    id?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: number
    name: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    members?: boolean | Team$membersArgs<ExtArgs>
    teamMembers?: boolean | Team$teamMembersArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["team"]>

  export type TeamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TeamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["team"]>
  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Team$membersArgs<ExtArgs>
    teamMembers?: boolean | Team$teamMembersArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TeamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      members: Prisma.$UserPayload<ExtArgs>[]
      teamMembers: Prisma.$TeamMembersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams and returns the data updated in the database.
     * @param {TeamUpdateManyAndReturnArgs} args - Arguments to update many Teams.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Team$membersArgs<ExtArgs> = {}>(args?: Subset<T, Team$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    teamMembers<T extends Team$teamMembersArgs<ExtArgs> = {}>(args?: Subset<T, Team$teamMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */ 
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'Int'>
    readonly name: FieldRef<"Team", 'String'>
    readonly description: FieldRef<"Team", 'String'>
    readonly createdAt: FieldRef<"Team", 'DateTime'>
    readonly updatedAt: FieldRef<"Team", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team updateManyAndReturn
   */
  export type TeamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to delete.
     */
    limit?: number
  }

  /**
   * Team.members
   */
  export type Team$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Team.teamMembers
   */
  export type Team$teamMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    where?: TeamMembersWhereInput
    orderBy?: TeamMembersOrderByWithRelationInput | TeamMembersOrderByWithRelationInput[]
    cursor?: TeamMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model TeamMembers
   */

  export type AggregateTeamMembers = {
    _count: TeamMembersCountAggregateOutputType | null
    _avg: TeamMembersAvgAggregateOutputType | null
    _sum: TeamMembersSumAggregateOutputType | null
    _min: TeamMembersMinAggregateOutputType | null
    _max: TeamMembersMaxAggregateOutputType | null
  }

  export type TeamMembersAvgAggregateOutputType = {
    userId: number | null
    teamId: number | null
  }

  export type TeamMembersSumAggregateOutputType = {
    userId: number | null
    teamId: number | null
  }

  export type TeamMembersMinAggregateOutputType = {
    userId: number | null
    teamId: number | null
    role: string | null
  }

  export type TeamMembersMaxAggregateOutputType = {
    userId: number | null
    teamId: number | null
    role: string | null
  }

  export type TeamMembersCountAggregateOutputType = {
    userId: number
    teamId: number
    role: number
    _all: number
  }


  export type TeamMembersAvgAggregateInputType = {
    userId?: true
    teamId?: true
  }

  export type TeamMembersSumAggregateInputType = {
    userId?: true
    teamId?: true
  }

  export type TeamMembersMinAggregateInputType = {
    userId?: true
    teamId?: true
    role?: true
  }

  export type TeamMembersMaxAggregateInputType = {
    userId?: true
    teamId?: true
    role?: true
  }

  export type TeamMembersCountAggregateInputType = {
    userId?: true
    teamId?: true
    role?: true
    _all?: true
  }

  export type TeamMembersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMembers to aggregate.
     */
    where?: TeamMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMembersOrderByWithRelationInput | TeamMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamMembers
    **/
    _count?: true | TeamMembersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamMembersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamMembersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMembersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMembersMaxAggregateInputType
  }

  export type GetTeamMembersAggregateType<T extends TeamMembersAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamMembers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamMembers[P]>
      : GetScalarType<T[P], AggregateTeamMembers[P]>
  }




  export type TeamMembersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMembersWhereInput
    orderBy?: TeamMembersOrderByWithAggregationInput | TeamMembersOrderByWithAggregationInput[]
    by: TeamMembersScalarFieldEnum[] | TeamMembersScalarFieldEnum
    having?: TeamMembersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamMembersCountAggregateInputType | true
    _avg?: TeamMembersAvgAggregateInputType
    _sum?: TeamMembersSumAggregateInputType
    _min?: TeamMembersMinAggregateInputType
    _max?: TeamMembersMaxAggregateInputType
  }

  export type TeamMembersGroupByOutputType = {
    userId: number
    teamId: number
    role: string
    _count: TeamMembersCountAggregateOutputType | null
    _avg: TeamMembersAvgAggregateOutputType | null
    _sum: TeamMembersSumAggregateOutputType | null
    _min: TeamMembersMinAggregateOutputType | null
    _max: TeamMembersMaxAggregateOutputType | null
  }

  type GetTeamMembersGroupByPayload<T extends TeamMembersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamMembersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamMembersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamMembersGroupByOutputType[P]>
            : GetScalarType<T[P], TeamMembersGroupByOutputType[P]>
        }
      >
    >


  export type TeamMembersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    teamId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMembers"]>

  export type TeamMembersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    teamId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMembers"]>

  export type TeamMembersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    teamId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMembers"]>

  export type TeamMembersSelectScalar = {
    userId?: boolean
    teamId?: boolean
    role?: boolean
  }

  export type TeamMembersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "teamId" | "role", ExtArgs["result"]["teamMembers"]>
  export type TeamMembersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type TeamMembersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type TeamMembersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $TeamMembersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamMembers"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      teamId: number
      role: string
    }, ExtArgs["result"]["teamMembers"]>
    composites: {}
  }

  type TeamMembersGetPayload<S extends boolean | null | undefined | TeamMembersDefaultArgs> = $Result.GetResult<Prisma.$TeamMembersPayload, S>

  type TeamMembersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamMembersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamMembersCountAggregateInputType | true
    }

  export interface TeamMembersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamMembers'], meta: { name: 'TeamMembers' } }
    /**
     * Find zero or one TeamMembers that matches the filter.
     * @param {TeamMembersFindUniqueArgs} args - Arguments to find a TeamMembers
     * @example
     * // Get one TeamMembers
     * const teamMembers = await prisma.teamMembers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamMembersFindUniqueArgs>(args: SelectSubset<T, TeamMembersFindUniqueArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one TeamMembers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamMembersFindUniqueOrThrowArgs} args - Arguments to find a TeamMembers
     * @example
     * // Get one TeamMembers
     * const teamMembers = await prisma.teamMembers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamMembersFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamMembersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first TeamMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersFindFirstArgs} args - Arguments to find a TeamMembers
     * @example
     * // Get one TeamMembers
     * const teamMembers = await prisma.teamMembers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamMembersFindFirstArgs>(args?: SelectSubset<T, TeamMembersFindFirstArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first TeamMembers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersFindFirstOrThrowArgs} args - Arguments to find a TeamMembers
     * @example
     * // Get one TeamMembers
     * const teamMembers = await prisma.teamMembers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamMembersFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamMembersFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more TeamMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamMembers
     * const teamMembers = await prisma.teamMembers.findMany()
     * 
     * // Get first 10 TeamMembers
     * const teamMembers = await prisma.teamMembers.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const teamMembersWithUserIdOnly = await prisma.teamMembers.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends TeamMembersFindManyArgs>(args?: SelectSubset<T, TeamMembersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a TeamMembers.
     * @param {TeamMembersCreateArgs} args - Arguments to create a TeamMembers.
     * @example
     * // Create one TeamMembers
     * const TeamMembers = await prisma.teamMembers.create({
     *   data: {
     *     // ... data to create a TeamMembers
     *   }
     * })
     * 
     */
    create<T extends TeamMembersCreateArgs>(args: SelectSubset<T, TeamMembersCreateArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many TeamMembers.
     * @param {TeamMembersCreateManyArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMembers = await prisma.teamMembers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamMembersCreateManyArgs>(args?: SelectSubset<T, TeamMembersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamMembers and returns the data saved in the database.
     * @param {TeamMembersCreateManyAndReturnArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMembers = await prisma.teamMembers.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamMembers and only return the `userId`
     * const teamMembersWithUserIdOnly = await prisma.teamMembers.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamMembersCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamMembersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a TeamMembers.
     * @param {TeamMembersDeleteArgs} args - Arguments to delete one TeamMembers.
     * @example
     * // Delete one TeamMembers
     * const TeamMembers = await prisma.teamMembers.delete({
     *   where: {
     *     // ... filter to delete one TeamMembers
     *   }
     * })
     * 
     */
    delete<T extends TeamMembersDeleteArgs>(args: SelectSubset<T, TeamMembersDeleteArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one TeamMembers.
     * @param {TeamMembersUpdateArgs} args - Arguments to update one TeamMembers.
     * @example
     * // Update one TeamMembers
     * const teamMembers = await prisma.teamMembers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamMembersUpdateArgs>(args: SelectSubset<T, TeamMembersUpdateArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more TeamMembers.
     * @param {TeamMembersDeleteManyArgs} args - Arguments to filter TeamMembers to delete.
     * @example
     * // Delete a few TeamMembers
     * const { count } = await prisma.teamMembers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamMembersDeleteManyArgs>(args?: SelectSubset<T, TeamMembersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamMembers
     * const teamMembers = await prisma.teamMembers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamMembersUpdateManyArgs>(args: SelectSubset<T, TeamMembersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers and returns the data updated in the database.
     * @param {TeamMembersUpdateManyAndReturnArgs} args - Arguments to update many TeamMembers.
     * @example
     * // Update many TeamMembers
     * const teamMembers = await prisma.teamMembers.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeamMembers and only return the `userId`
     * const teamMembersWithUserIdOnly = await prisma.teamMembers.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamMembersUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamMembersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one TeamMembers.
     * @param {TeamMembersUpsertArgs} args - Arguments to update or create a TeamMembers.
     * @example
     * // Update or create a TeamMembers
     * const teamMembers = await prisma.teamMembers.upsert({
     *   create: {
     *     // ... data to create a TeamMembers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamMembers we want to update
     *   }
     * })
     */
    upsert<T extends TeamMembersUpsertArgs>(args: SelectSubset<T, TeamMembersUpsertArgs<ExtArgs>>): Prisma__TeamMembersClient<$Result.GetResult<Prisma.$TeamMembersPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersCountArgs} args - Arguments to filter TeamMembers to count.
     * @example
     * // Count the number of TeamMembers
     * const count = await prisma.teamMembers.count({
     *   where: {
     *     // ... the filter for the TeamMembers we want to count
     *   }
     * })
    **/
    count<T extends TeamMembersCountArgs>(
      args?: Subset<T, TeamMembersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamMembersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamMembersAggregateArgs>(args: Subset<T, TeamMembersAggregateArgs>): Prisma.PrismaPromise<GetTeamMembersAggregateType<T>>

    /**
     * Group by TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMembersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamMembersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamMembersGroupByArgs['orderBy'] }
        : { orderBy?: TeamMembersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamMembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamMembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamMembers model
   */
  readonly fields: TeamMembersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamMembers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamMembersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamMembers model
   */ 
  interface TeamMembersFieldRefs {
    readonly userId: FieldRef<"TeamMembers", 'Int'>
    readonly teamId: FieldRef<"TeamMembers", 'Int'>
    readonly role: FieldRef<"TeamMembers", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TeamMembers findUnique
   */
  export type TeamMembersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where: TeamMembersWhereUniqueInput
  }

  /**
   * TeamMembers findUniqueOrThrow
   */
  export type TeamMembersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where: TeamMembersWhereUniqueInput
  }

  /**
   * TeamMembers findFirst
   */
  export type TeamMembersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where?: TeamMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMembersOrderByWithRelationInput | TeamMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * TeamMembers findFirstOrThrow
   */
  export type TeamMembersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where?: TeamMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMembersOrderByWithRelationInput | TeamMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * TeamMembers findMany
   */
  export type TeamMembersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where?: TeamMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMembersOrderByWithRelationInput | TeamMembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamMembers.
     */
    cursor?: TeamMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    distinct?: TeamMembersScalarFieldEnum | TeamMembersScalarFieldEnum[]
  }

  /**
   * TeamMembers create
   */
  export type TeamMembersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamMembers.
     */
    data: XOR<TeamMembersCreateInput, TeamMembersUncheckedCreateInput>
  }

  /**
   * TeamMembers createMany
   */
  export type TeamMembersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamMembers.
     */
    data: TeamMembersCreateManyInput | TeamMembersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamMembers createManyAndReturn
   */
  export type TeamMembersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * The data used to create many TeamMembers.
     */
    data: TeamMembersCreateManyInput | TeamMembersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamMembers update
   */
  export type TeamMembersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamMembers.
     */
    data: XOR<TeamMembersUpdateInput, TeamMembersUncheckedUpdateInput>
    /**
     * Choose, which TeamMembers to update.
     */
    where: TeamMembersWhereUniqueInput
  }

  /**
   * TeamMembers updateMany
   */
  export type TeamMembersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamMembers.
     */
    data: XOR<TeamMembersUpdateManyMutationInput, TeamMembersUncheckedUpdateManyInput>
    /**
     * Filter which TeamMembers to update
     */
    where?: TeamMembersWhereInput
    /**
     * Limit how many TeamMembers to update.
     */
    limit?: number
  }

  /**
   * TeamMembers updateManyAndReturn
   */
  export type TeamMembersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * The data used to update TeamMembers.
     */
    data: XOR<TeamMembersUpdateManyMutationInput, TeamMembersUncheckedUpdateManyInput>
    /**
     * Filter which TeamMembers to update
     */
    where?: TeamMembersWhereInput
    /**
     * Limit how many TeamMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamMembers upsert
   */
  export type TeamMembersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamMembers to update in case it exists.
     */
    where: TeamMembersWhereUniqueInput
    /**
     * In case the TeamMembers found by the `where` argument doesn't exist, create a new TeamMembers with this data.
     */
    create: XOR<TeamMembersCreateInput, TeamMembersUncheckedCreateInput>
    /**
     * In case the TeamMembers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamMembersUpdateInput, TeamMembersUncheckedUpdateInput>
  }

  /**
   * TeamMembers delete
   */
  export type TeamMembersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
    /**
     * Filter which TeamMembers to delete.
     */
    where: TeamMembersWhereUniqueInput
  }

  /**
   * TeamMembers deleteMany
   */
  export type TeamMembersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMembers to delete
     */
    where?: TeamMembersWhereInput
    /**
     * Limit how many TeamMembers to delete.
     */
    limit?: number
  }

  /**
   * TeamMembers without action
   */
  export type TeamMembersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMembers
     */
    select?: TeamMembersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMembers
     */
    omit?: TeamMembersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMembersInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    code: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    name: string
    code: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Role$usersArgs<ExtArgs>
    authorities?: boolean | Role$authoritiesArgs<ExtArgs>
    roleAuthorities?: boolean | Role$roleAuthoritiesArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Role$usersArgs<ExtArgs>
    authorities?: boolean | Role$authoritiesArgs<ExtArgs>
    roleAuthorities?: boolean | Role$roleAuthoritiesArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      authorities: Prisma.$AuthorityPayload<ExtArgs>[]
      roleAuthorities: Prisma.$RoleAuthoritiesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      code: string
      description: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {RoleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoleUpdateManyAndReturnArgs>(args: SelectSubset<T, RoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    authorities<T extends Role$authoritiesArgs<ExtArgs> = {}>(args?: Subset<T, Role$authoritiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthorityPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    roleAuthorities<T extends Role$roleAuthoritiesArgs<ExtArgs> = {}>(args?: Subset<T, Role$roleAuthoritiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoleAuthoritiesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'Int'>
    readonly name: FieldRef<"Role", 'String'>
    readonly code: FieldRef<"Role", 'String'>
    readonly description: FieldRef<"Role", 'String'>
    readonly createdAt: FieldRef<"Role", 'DateTime'>
    readonly updatedAt: FieldRef<"Role", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role updateManyAndReturn
   */
  export type RoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Role.authorities
   */
  export type Role$authoritiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authority
     */
    select?: AuthoritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authority
     */
    omit?: AuthorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorityInclude<ExtArgs> | null
    where?: AuthorityWhereInput
    orderBy?: AuthorityOrderByWithRelationInput | AuthorityOrderByWithRelationInput[]
    cursor?: AuthorityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthorityScalarFieldEnum | AuthorityScalarFieldEnum[]
  }

  /**
   * Role.roleAuthorities
   */
  export type Role$roleAuthoritiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleAuthorities
     */
    select?: RoleAuthoritiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleAuthorities
     */
    omit?: RoleAuthoritiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleAuthoritiesInclude<ExtArgs> | null
    where?: RoleAuthoritiesWhereInput
    orderBy?: RoleAuthoritiesOrderByWithRelationInput | RoleAuthoritiesOrderByWithRelationInput[]
    cursor?: RoleAuthoritiesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleAuthoritiesScalarFieldEnum | RoleAuthoritiesScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Authority
   */

  export type AggregateAuthority = {
    _count: AuthorityCountAggregateOutputType | null
    _avg: AuthorityAvgAggregateOutputType | null
    _sum: AuthoritySumAggregateOutputType | null
    _min: AuthorityMinAggregateOutputType | null
    _max: AuthorityMaxAggregateOutputType | null
  }

  export type AuthorityAvgAggregateOutputType = {
    id: number | null
  }

  export type AuthoritySumAggregateOutputType = {
    id: number | null
  }

  export type AuthorityMinAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AuthorityMaxAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AuthorityCountAggregateOutputType = {
    id: number
    name: number
    code: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AuthorityAvgAggregateInputType = {
    id?: true
  }

  export type AuthoritySumAggregateInputType = {
    id?: true
  }

  export type AuthorityMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AuthorityMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AuthorityCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AuthorityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Authority to aggregate.
     */
    where?: AuthorityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authorities to fetch.
     */
    orderBy?: AuthorityOrderByWithRelationInput | AuthorityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthorityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authorities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Authorities
    **/
    _count?: true | AuthorityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuthorityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuthoritySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthorityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthorityMaxAggregateInputType
  }

  export type GetAuthorityAggregateType<T extends AuthorityAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthority]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthority[P]>
      : GetScalarType<T[P], AggregateAuthority[P]>
  }




  export type AuthorityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthorityWhereInput
    orderBy?: AuthorityOrderByWithAggregationInput | AuthorityOrderByWithAggregationInput[]
    by: AuthorityScalarFieldEnum[] | AuthorityScalarFieldEnum
    having?: AuthorityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthorityCountAggregateInputType | true
    _avg?: AuthorityAvgAggregateInputType
    _sum?: AuthoritySumAggregateInputType
    _min?: AuthorityMinAggregateInputType
    _max?: AuthorityMaxAggregateInputType
  }

  export type AuthorityGroupByOutputType = {
    id: number
    name: string
    code: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: AuthorityCountAggregateOutputType | null
    _avg: AuthorityAvgAggregateOutputType | null
    _sum: AuthoritySumAggregateOutputType | null
    _min: AuthorityMinAggregateOutputType | null
    _max: AuthorityMaxAggregateOutputType | null
  }

  type GetAuthorityGroupByPayload<T extends AuthorityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthorityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthorityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthorityGroupByOutputType[P]>
            : GetScalarType<T[P], AuthorityGroupByOutputType[P]>
        }
      >
    >


  export type AuthoritySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    roles?: boolean | Authority$rolesArgs<ExtArgs>
    roleAuthorities?: boolean | Authority$roleAuthoritiesArgs<ExtArgs>
    _count?: boolean | AuthorityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["authority"]>

  export type AuthoritySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["authority"]>

  export type AuthoritySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["authority"]>

  export type AuthoritySelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AuthorityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["authority"]>
  export type AuthorityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | Authority$rolesArgs<ExtArgs>
    roleAuthorities?: boolean | Authority$roleAuthoritiesArgs<ExtArgs>
    _count?: boolean | AuthorityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AuthorityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AuthorityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AuthorityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Authority"
    objects: {
      roles: Prisma.$RolePayload<ExtArgs>[]
      roleAuthorities: Prisma.$RoleAuthoritiesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      code: string
      description: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["authority"]>
    composites: {}
  }

  type AuthorityGetPayload<S extends boolean | null | undefined | AuthorityDefaultArgs> = $Result.GetResult<Prisma.$AuthorityPayload, S>

  type AuthorityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuthorityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuthorityCountAggregateInputType | true
    }

  export interface AuthorityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Authority'], meta: { name: 'Authority' } }
    /**
     * Find zero or one Authority that matches the filter.
     * @param {AuthorityFindUniqueArgs} args - Arguments to find a Authority
     * @example
     * // Get one Authority
     * const authority = await prisma.authority.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthorityFindUniqueArgs>(args: SelectSubset<T, AuthorityFindUniqueArgs<ExtArgs>>): Prisma__AuthorityClient<$Result.GetResult<Prisma.$AuthorityPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Authority that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuthorityFindUniqueOrThrowArgs} args - Arguments to find a Authority
     * @example
     * // Get one Authority
     * const authority = await prisma.authority.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthorityFindUniqueOrThrowArgs>(args: SelectSubset<T, AuthorityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuthorityClient<$Result.GetResult<Prisma.$AuthorityPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Authority that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorityFindFirstArgs} args - Arguments to find a Authority
     * @example
     * // Get one Authority
     * const authority = await prisma.authority.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthorityFindFirstArgs>(args?: SelectSubset<T, AuthorityFindFirstArgs<ExtArgs>>): Prisma__AuthorityClient<$Result.GetResult<Prisma.$AuthorityPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Authority that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorityFindFirstOrThrowArgs} args - Arguments to find a Authority
     * @example
     * // Get one Authority
     * const authority = await prisma.authority.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthorityFindFirstOrThrowArgs>(args?: SelectSubset<T, AuthorityFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuthorityClient<$Result.GetResult<Prisma.$AuthorityPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Authorities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authorities
     * const authorities = await prisma.authority.findMany()
     * 
     * // Get first 10 Authorities
     * const authorities = await prisma.authority.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authorityWithIdOnly = await prisma.authority.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuthorityFindManyArgs>(args?: SelectSubset<T, AuthorityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthorityPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Authority.
     * @param {AuthorityCreateArgs} args - Arguments to create a Authority.
     * @example
     * // Create one Authority
     * const Authority = await prisma.authority.create({
     *   data: {
     *     // ... data to create a Authority
     *   }
     * })
     * 
     */
    create<T extends AuthorityCreateArgs>(args: SelectSubset<T, AuthorityCreateArgs<ExtArgs>>): Prisma__AuthorityClient<$Result.GetResult<Prisma.$AuthorityPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Authorities.
     * @param {AuthorityCreateManyArgs} args - Arguments to create many Authorities.
     * @example
     * // Create many Authorities
     * const authority = await prisma.authority.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuthorityCreateManyArgs>(args?: SelectSubset<T, AuthorityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Authorities and returns the data saved in the database.
     * @param {AuthorityCreateManyAndReturnArgs} args - Arguments to create many Authorities.
     * @example
     * // Create many Authorities
     * const authority = await prisma.authority.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Authorities and only return the `id`
     * const authorityWithIdOnly = await prisma.authority.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuthorityCreateManyAndReturnArgs>(args?: SelectSubset<T, AuthorityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthorityPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Authority.
     * @param {AuthorityDeleteArgs} args - Arguments to delete one Authority.
     * @example
     * // Delete one Authority
     * const Authority = await prisma.authority.delete({
     *   where: {
     *     // ... filter to delete one Authority
     *   }
     * })
     * 
     */
    delete<T extends AuthorityDeleteArgs>(args: SelectSubset<T, AuthorityDeleteArgs<ExtArgs>>): Prisma__AuthorityClient<$Result.GetResult<Prisma.$AuthorityPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Authority.
     * @param {AuthorityUpdateArgs} args - Arguments to update one Authority.
     * @example
     * // Update one Authority
     * const authority = await prisma.authority.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuthorityUpdateArgs>(args: SelectSubset<T, AuthorityUpdateArgs<ExtArgs>>): Prisma__AuthorityClient<$Result.GetResult<Prisma.$AuthorityPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Authorities.
     * @param {AuthorityDeleteManyArgs} args - Arguments to filter Authorities to delete.
     * @example
     * // Delete a few Authorities
     * const { count } = await prisma.authority.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuthorityDeleteManyArgs>(args?: SelectSubset<T, AuthorityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authorities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authorities
     * const authority = await prisma.authority.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuthorityUpdateManyArgs>(args: SelectSubset<T, AuthorityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authorities and returns the data updated in the database.
     * @param {AuthorityUpdateManyAndReturnArgs} args - Arguments to update many Authorities.
     * @example
     * // Update many Authorities
     * const authority = await prisma.authority.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Authorities and only return the `id`
     * const authorityWithIdOnly = await prisma.authority.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuthorityUpdateManyAndReturnArgs>(args: SelectSubset<T, AuthorityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthorityPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Authority.
     * @param {AuthorityUpsertArgs} args - Arguments to update or create a Authority.
     * @example
     * // Update or create a Authority
     * const authority = await prisma.authority.upsert({
     *   create: {
     *     // ... data to create a Authority
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Authority we want to update
     *   }
     * })
     */
    upsert<T extends AuthorityUpsertArgs>(args: SelectSubset<T, AuthorityUpsertArgs<ExtArgs>>): Prisma__AuthorityClient<$Result.GetResult<Prisma.$AuthorityPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Authorities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorityCountArgs} args - Arguments to filter Authorities to count.
     * @example
     * // Count the number of Authorities
     * const count = await prisma.authority.count({
     *   where: {
     *     // ... the filter for the Authorities we want to count
     *   }
     * })
    **/
    count<T extends AuthorityCountArgs>(
      args?: Subset<T, AuthorityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthorityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Authority.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthorityAggregateArgs>(args: Subset<T, AuthorityAggregateArgs>): Prisma.PrismaPromise<GetAuthorityAggregateType<T>>

    /**
     * Group by Authority.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthorityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthorityGroupByArgs['orderBy'] }
        : { orderBy?: AuthorityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthorityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthorityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Authority model
   */
  readonly fields: AuthorityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Authority.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthorityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roles<T extends Authority$rolesArgs<ExtArgs> = {}>(args?: Subset<T, Authority$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    roleAuthorities<T extends Authority$roleAuthoritiesArgs<ExtArgs> = {}>(args?: Subset<T, Authority$roleAuthoritiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoleAuthoritiesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Authority model
   */ 
  interface AuthorityFieldRefs {
    readonly id: FieldRef<"Authority", 'Int'>
    readonly name: FieldRef<"Authority", 'String'>
    readonly code: FieldRef<"Authority", 'String'>
    readonly description: FieldRef<"Authority", 'String'>
    readonly createdAt: FieldRef<"Authority", 'DateTime'>
    readonly updatedAt: FieldRef<"Authority", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Authority findUnique
   */
  export type AuthorityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authority
     */
    select?: AuthoritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authority
     */
    omit?: AuthorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorityInclude<ExtArgs> | null
    /**
     * Filter, which Authority to fetch.
     */
    where: AuthorityWhereUniqueInput
  }

  /**
   * Authority findUniqueOrThrow
   */
  export type AuthorityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authority
     */
    select?: AuthoritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authority
     */
    omit?: AuthorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorityInclude<ExtArgs> | null
    /**
     * Filter, which Authority to fetch.
     */
    where: AuthorityWhereUniqueInput
  }

  /**
   * Authority findFirst
   */
  export type AuthorityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authority
     */
    select?: AuthoritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authority
     */
    omit?: AuthorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorityInclude<ExtArgs> | null
    /**
     * Filter, which Authority to fetch.
     */
    where?: AuthorityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authorities to fetch.
     */
    orderBy?: AuthorityOrderByWithRelationInput | AuthorityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Authorities.
     */
    cursor?: AuthorityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authorities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Authorities.
     */
    distinct?: AuthorityScalarFieldEnum | AuthorityScalarFieldEnum[]
  }

  /**
   * Authority findFirstOrThrow
   */
  export type AuthorityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authority
     */
    select?: AuthoritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authority
     */
    omit?: AuthorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorityInclude<ExtArgs> | null
    /**
     * Filter, which Authority to fetch.
     */
    where?: AuthorityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authorities to fetch.
     */
    orderBy?: AuthorityOrderByWithRelationInput | AuthorityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Authorities.
     */
    cursor?: AuthorityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authorities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Authorities.
     */
    distinct?: AuthorityScalarFieldEnum | AuthorityScalarFieldEnum[]
  }

  /**
   * Authority findMany
   */
  export type AuthorityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authority
     */
    select?: AuthoritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authority
     */
    omit?: AuthorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorityInclude<ExtArgs> | null
    /**
     * Filter, which Authorities to fetch.
     */
    where?: AuthorityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authorities to fetch.
     */
    orderBy?: AuthorityOrderByWithRelationInput | AuthorityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Authorities.
     */
    cursor?: AuthorityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authorities.
     */
    skip?: number
    distinct?: AuthorityScalarFieldEnum | AuthorityScalarFieldEnum[]
  }

  /**
   * Authority create
   */
  export type AuthorityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authority
     */
    select?: AuthoritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authority
     */
    omit?: AuthorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorityInclude<ExtArgs> | null
    /**
     * The data needed to create a Authority.
     */
    data: XOR<AuthorityCreateInput, AuthorityUncheckedCreateInput>
  }

  /**
   * Authority createMany
   */
  export type AuthorityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Authorities.
     */
    data: AuthorityCreateManyInput | AuthorityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Authority createManyAndReturn
   */
  export type AuthorityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authority
     */
    select?: AuthoritySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Authority
     */
    omit?: AuthorityOmit<ExtArgs> | null
    /**
     * The data used to create many Authorities.
     */
    data: AuthorityCreateManyInput | AuthorityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Authority update
   */
  export type AuthorityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authority
     */
    select?: AuthoritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authority
     */
    omit?: AuthorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorityInclude<ExtArgs> | null
    /**
     * The data needed to update a Authority.
     */
    data: XOR<AuthorityUpdateInput, AuthorityUncheckedUpdateInput>
    /**
     * Choose, which Authority to update.
     */
    where: AuthorityWhereUniqueInput
  }

  /**
   * Authority updateMany
   */
  export type AuthorityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Authorities.
     */
    data: XOR<AuthorityUpdateManyMutationInput, AuthorityUncheckedUpdateManyInput>
    /**
     * Filter which Authorities to update
     */
    where?: AuthorityWhereInput
    /**
     * Limit how many Authorities to update.
     */
    limit?: number
  }

  /**
   * Authority updateManyAndReturn
   */
  export type AuthorityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authority
     */
    select?: AuthoritySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Authority
     */
    omit?: AuthorityOmit<ExtArgs> | null
    /**
     * The data used to update Authorities.
     */
    data: XOR<AuthorityUpdateManyMutationInput, AuthorityUncheckedUpdateManyInput>
    /**
     * Filter which Authorities to update
     */
    where?: AuthorityWhereInput
    /**
     * Limit how many Authorities to update.
     */
    limit?: number
  }

  /**
   * Authority upsert
   */
  export type AuthorityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authority
     */
    select?: AuthoritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authority
     */
    omit?: AuthorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorityInclude<ExtArgs> | null
    /**
     * The filter to search for the Authority to update in case it exists.
     */
    where: AuthorityWhereUniqueInput
    /**
     * In case the Authority found by the `where` argument doesn't exist, create a new Authority with this data.
     */
    create: XOR<AuthorityCreateInput, AuthorityUncheckedCreateInput>
    /**
     * In case the Authority was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthorityUpdateInput, AuthorityUncheckedUpdateInput>
  }

  /**
   * Authority delete
   */
  export type AuthorityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authority
     */
    select?: AuthoritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authority
     */
    omit?: AuthorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorityInclude<ExtArgs> | null
    /**
     * Filter which Authority to delete.
     */
    where: AuthorityWhereUniqueInput
  }

  /**
   * Authority deleteMany
   */
  export type AuthorityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Authorities to delete
     */
    where?: AuthorityWhereInput
    /**
     * Limit how many Authorities to delete.
     */
    limit?: number
  }

  /**
   * Authority.roles
   */
  export type Authority$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    cursor?: RoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Authority.roleAuthorities
   */
  export type Authority$roleAuthoritiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleAuthorities
     */
    select?: RoleAuthoritiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleAuthorities
     */
    omit?: RoleAuthoritiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleAuthoritiesInclude<ExtArgs> | null
    where?: RoleAuthoritiesWhereInput
    orderBy?: RoleAuthoritiesOrderByWithRelationInput | RoleAuthoritiesOrderByWithRelationInput[]
    cursor?: RoleAuthoritiesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleAuthoritiesScalarFieldEnum | RoleAuthoritiesScalarFieldEnum[]
  }

  /**
   * Authority without action
   */
  export type AuthorityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authority
     */
    select?: AuthoritySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authority
     */
    omit?: AuthorityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorityInclude<ExtArgs> | null
  }


  /**
   * Model RoleAuthorities
   */

  export type AggregateRoleAuthorities = {
    _count: RoleAuthoritiesCountAggregateOutputType | null
    _avg: RoleAuthoritiesAvgAggregateOutputType | null
    _sum: RoleAuthoritiesSumAggregateOutputType | null
    _min: RoleAuthoritiesMinAggregateOutputType | null
    _max: RoleAuthoritiesMaxAggregateOutputType | null
  }

  export type RoleAuthoritiesAvgAggregateOutputType = {
    roleId: number | null
    authorityId: number | null
  }

  export type RoleAuthoritiesSumAggregateOutputType = {
    roleId: number | null
    authorityId: number | null
  }

  export type RoleAuthoritiesMinAggregateOutputType = {
    roleId: number | null
    authorityId: number | null
  }

  export type RoleAuthoritiesMaxAggregateOutputType = {
    roleId: number | null
    authorityId: number | null
  }

  export type RoleAuthoritiesCountAggregateOutputType = {
    roleId: number
    authorityId: number
    _all: number
  }


  export type RoleAuthoritiesAvgAggregateInputType = {
    roleId?: true
    authorityId?: true
  }

  export type RoleAuthoritiesSumAggregateInputType = {
    roleId?: true
    authorityId?: true
  }

  export type RoleAuthoritiesMinAggregateInputType = {
    roleId?: true
    authorityId?: true
  }

  export type RoleAuthoritiesMaxAggregateInputType = {
    roleId?: true
    authorityId?: true
  }

  export type RoleAuthoritiesCountAggregateInputType = {
    roleId?: true
    authorityId?: true
    _all?: true
  }

  export type RoleAuthoritiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoleAuthorities to aggregate.
     */
    where?: RoleAuthoritiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleAuthorities to fetch.
     */
    orderBy?: RoleAuthoritiesOrderByWithRelationInput | RoleAuthoritiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleAuthoritiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleAuthorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleAuthorities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoleAuthorities
    **/
    _count?: true | RoleAuthoritiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAuthoritiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleAuthoritiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleAuthoritiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleAuthoritiesMaxAggregateInputType
  }

  export type GetRoleAuthoritiesAggregateType<T extends RoleAuthoritiesAggregateArgs> = {
        [P in keyof T & keyof AggregateRoleAuthorities]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoleAuthorities[P]>
      : GetScalarType<T[P], AggregateRoleAuthorities[P]>
  }




  export type RoleAuthoritiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleAuthoritiesWhereInput
    orderBy?: RoleAuthoritiesOrderByWithAggregationInput | RoleAuthoritiesOrderByWithAggregationInput[]
    by: RoleAuthoritiesScalarFieldEnum[] | RoleAuthoritiesScalarFieldEnum
    having?: RoleAuthoritiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleAuthoritiesCountAggregateInputType | true
    _avg?: RoleAuthoritiesAvgAggregateInputType
    _sum?: RoleAuthoritiesSumAggregateInputType
    _min?: RoleAuthoritiesMinAggregateInputType
    _max?: RoleAuthoritiesMaxAggregateInputType
  }

  export type RoleAuthoritiesGroupByOutputType = {
    roleId: number
    authorityId: number
    _count: RoleAuthoritiesCountAggregateOutputType | null
    _avg: RoleAuthoritiesAvgAggregateOutputType | null
    _sum: RoleAuthoritiesSumAggregateOutputType | null
    _min: RoleAuthoritiesMinAggregateOutputType | null
    _max: RoleAuthoritiesMaxAggregateOutputType | null
  }

  type GetRoleAuthoritiesGroupByPayload<T extends RoleAuthoritiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleAuthoritiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleAuthoritiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleAuthoritiesGroupByOutputType[P]>
            : GetScalarType<T[P], RoleAuthoritiesGroupByOutputType[P]>
        }
      >
    >


  export type RoleAuthoritiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    authorityId?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    authority?: boolean | AuthorityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roleAuthorities"]>

  export type RoleAuthoritiesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    authorityId?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    authority?: boolean | AuthorityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roleAuthorities"]>

  export type RoleAuthoritiesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    authorityId?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    authority?: boolean | AuthorityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roleAuthorities"]>

  export type RoleAuthoritiesSelectScalar = {
    roleId?: boolean
    authorityId?: boolean
  }

  export type RoleAuthoritiesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"roleId" | "authorityId", ExtArgs["result"]["roleAuthorities"]>
  export type RoleAuthoritiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    authority?: boolean | AuthorityDefaultArgs<ExtArgs>
  }
  export type RoleAuthoritiesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    authority?: boolean | AuthorityDefaultArgs<ExtArgs>
  }
  export type RoleAuthoritiesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    authority?: boolean | AuthorityDefaultArgs<ExtArgs>
  }

  export type $RoleAuthoritiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoleAuthorities"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      authority: Prisma.$AuthorityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      roleId: number
      authorityId: number
    }, ExtArgs["result"]["roleAuthorities"]>
    composites: {}
  }

  type RoleAuthoritiesGetPayload<S extends boolean | null | undefined | RoleAuthoritiesDefaultArgs> = $Result.GetResult<Prisma.$RoleAuthoritiesPayload, S>

  type RoleAuthoritiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleAuthoritiesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleAuthoritiesCountAggregateInputType | true
    }

  export interface RoleAuthoritiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoleAuthorities'], meta: { name: 'RoleAuthorities' } }
    /**
     * Find zero or one RoleAuthorities that matches the filter.
     * @param {RoleAuthoritiesFindUniqueArgs} args - Arguments to find a RoleAuthorities
     * @example
     * // Get one RoleAuthorities
     * const roleAuthorities = await prisma.roleAuthorities.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleAuthoritiesFindUniqueArgs>(args: SelectSubset<T, RoleAuthoritiesFindUniqueArgs<ExtArgs>>): Prisma__RoleAuthoritiesClient<$Result.GetResult<Prisma.$RoleAuthoritiesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one RoleAuthorities that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleAuthoritiesFindUniqueOrThrowArgs} args - Arguments to find a RoleAuthorities
     * @example
     * // Get one RoleAuthorities
     * const roleAuthorities = await prisma.roleAuthorities.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleAuthoritiesFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleAuthoritiesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleAuthoritiesClient<$Result.GetResult<Prisma.$RoleAuthoritiesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first RoleAuthorities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAuthoritiesFindFirstArgs} args - Arguments to find a RoleAuthorities
     * @example
     * // Get one RoleAuthorities
     * const roleAuthorities = await prisma.roleAuthorities.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleAuthoritiesFindFirstArgs>(args?: SelectSubset<T, RoleAuthoritiesFindFirstArgs<ExtArgs>>): Prisma__RoleAuthoritiesClient<$Result.GetResult<Prisma.$RoleAuthoritiesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first RoleAuthorities that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAuthoritiesFindFirstOrThrowArgs} args - Arguments to find a RoleAuthorities
     * @example
     * // Get one RoleAuthorities
     * const roleAuthorities = await prisma.roleAuthorities.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleAuthoritiesFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleAuthoritiesFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleAuthoritiesClient<$Result.GetResult<Prisma.$RoleAuthoritiesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more RoleAuthorities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAuthoritiesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoleAuthorities
     * const roleAuthorities = await prisma.roleAuthorities.findMany()
     * 
     * // Get first 10 RoleAuthorities
     * const roleAuthorities = await prisma.roleAuthorities.findMany({ take: 10 })
     * 
     * // Only select the `roleId`
     * const roleAuthoritiesWithRoleIdOnly = await prisma.roleAuthorities.findMany({ select: { roleId: true } })
     * 
     */
    findMany<T extends RoleAuthoritiesFindManyArgs>(args?: SelectSubset<T, RoleAuthoritiesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoleAuthoritiesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a RoleAuthorities.
     * @param {RoleAuthoritiesCreateArgs} args - Arguments to create a RoleAuthorities.
     * @example
     * // Create one RoleAuthorities
     * const RoleAuthorities = await prisma.roleAuthorities.create({
     *   data: {
     *     // ... data to create a RoleAuthorities
     *   }
     * })
     * 
     */
    create<T extends RoleAuthoritiesCreateArgs>(args: SelectSubset<T, RoleAuthoritiesCreateArgs<ExtArgs>>): Prisma__RoleAuthoritiesClient<$Result.GetResult<Prisma.$RoleAuthoritiesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many RoleAuthorities.
     * @param {RoleAuthoritiesCreateManyArgs} args - Arguments to create many RoleAuthorities.
     * @example
     * // Create many RoleAuthorities
     * const roleAuthorities = await prisma.roleAuthorities.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleAuthoritiesCreateManyArgs>(args?: SelectSubset<T, RoleAuthoritiesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoleAuthorities and returns the data saved in the database.
     * @param {RoleAuthoritiesCreateManyAndReturnArgs} args - Arguments to create many RoleAuthorities.
     * @example
     * // Create many RoleAuthorities
     * const roleAuthorities = await prisma.roleAuthorities.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoleAuthorities and only return the `roleId`
     * const roleAuthoritiesWithRoleIdOnly = await prisma.roleAuthorities.createManyAndReturn({
     *   select: { roleId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleAuthoritiesCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleAuthoritiesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoleAuthoritiesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a RoleAuthorities.
     * @param {RoleAuthoritiesDeleteArgs} args - Arguments to delete one RoleAuthorities.
     * @example
     * // Delete one RoleAuthorities
     * const RoleAuthorities = await prisma.roleAuthorities.delete({
     *   where: {
     *     // ... filter to delete one RoleAuthorities
     *   }
     * })
     * 
     */
    delete<T extends RoleAuthoritiesDeleteArgs>(args: SelectSubset<T, RoleAuthoritiesDeleteArgs<ExtArgs>>): Prisma__RoleAuthoritiesClient<$Result.GetResult<Prisma.$RoleAuthoritiesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one RoleAuthorities.
     * @param {RoleAuthoritiesUpdateArgs} args - Arguments to update one RoleAuthorities.
     * @example
     * // Update one RoleAuthorities
     * const roleAuthorities = await prisma.roleAuthorities.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleAuthoritiesUpdateArgs>(args: SelectSubset<T, RoleAuthoritiesUpdateArgs<ExtArgs>>): Prisma__RoleAuthoritiesClient<$Result.GetResult<Prisma.$RoleAuthoritiesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more RoleAuthorities.
     * @param {RoleAuthoritiesDeleteManyArgs} args - Arguments to filter RoleAuthorities to delete.
     * @example
     * // Delete a few RoleAuthorities
     * const { count } = await prisma.roleAuthorities.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleAuthoritiesDeleteManyArgs>(args?: SelectSubset<T, RoleAuthoritiesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoleAuthorities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAuthoritiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoleAuthorities
     * const roleAuthorities = await prisma.roleAuthorities.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleAuthoritiesUpdateManyArgs>(args: SelectSubset<T, RoleAuthoritiesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoleAuthorities and returns the data updated in the database.
     * @param {RoleAuthoritiesUpdateManyAndReturnArgs} args - Arguments to update many RoleAuthorities.
     * @example
     * // Update many RoleAuthorities
     * const roleAuthorities = await prisma.roleAuthorities.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RoleAuthorities and only return the `roleId`
     * const roleAuthoritiesWithRoleIdOnly = await prisma.roleAuthorities.updateManyAndReturn({
     *   select: { roleId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoleAuthoritiesUpdateManyAndReturnArgs>(args: SelectSubset<T, RoleAuthoritiesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoleAuthoritiesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one RoleAuthorities.
     * @param {RoleAuthoritiesUpsertArgs} args - Arguments to update or create a RoleAuthorities.
     * @example
     * // Update or create a RoleAuthorities
     * const roleAuthorities = await prisma.roleAuthorities.upsert({
     *   create: {
     *     // ... data to create a RoleAuthorities
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoleAuthorities we want to update
     *   }
     * })
     */
    upsert<T extends RoleAuthoritiesUpsertArgs>(args: SelectSubset<T, RoleAuthoritiesUpsertArgs<ExtArgs>>): Prisma__RoleAuthoritiesClient<$Result.GetResult<Prisma.$RoleAuthoritiesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of RoleAuthorities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAuthoritiesCountArgs} args - Arguments to filter RoleAuthorities to count.
     * @example
     * // Count the number of RoleAuthorities
     * const count = await prisma.roleAuthorities.count({
     *   where: {
     *     // ... the filter for the RoleAuthorities we want to count
     *   }
     * })
    **/
    count<T extends RoleAuthoritiesCountArgs>(
      args?: Subset<T, RoleAuthoritiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleAuthoritiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoleAuthorities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAuthoritiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAuthoritiesAggregateArgs>(args: Subset<T, RoleAuthoritiesAggregateArgs>): Prisma.PrismaPromise<GetRoleAuthoritiesAggregateType<T>>

    /**
     * Group by RoleAuthorities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAuthoritiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleAuthoritiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleAuthoritiesGroupByArgs['orderBy'] }
        : { orderBy?: RoleAuthoritiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleAuthoritiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleAuthoritiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoleAuthorities model
   */
  readonly fields: RoleAuthoritiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoleAuthorities.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleAuthoritiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    authority<T extends AuthorityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AuthorityDefaultArgs<ExtArgs>>): Prisma__AuthorityClient<$Result.GetResult<Prisma.$AuthorityPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoleAuthorities model
   */ 
  interface RoleAuthoritiesFieldRefs {
    readonly roleId: FieldRef<"RoleAuthorities", 'Int'>
    readonly authorityId: FieldRef<"RoleAuthorities", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RoleAuthorities findUnique
   */
  export type RoleAuthoritiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleAuthorities
     */
    select?: RoleAuthoritiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleAuthorities
     */
    omit?: RoleAuthoritiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleAuthoritiesInclude<ExtArgs> | null
    /**
     * Filter, which RoleAuthorities to fetch.
     */
    where: RoleAuthoritiesWhereUniqueInput
  }

  /**
   * RoleAuthorities findUniqueOrThrow
   */
  export type RoleAuthoritiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleAuthorities
     */
    select?: RoleAuthoritiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleAuthorities
     */
    omit?: RoleAuthoritiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleAuthoritiesInclude<ExtArgs> | null
    /**
     * Filter, which RoleAuthorities to fetch.
     */
    where: RoleAuthoritiesWhereUniqueInput
  }

  /**
   * RoleAuthorities findFirst
   */
  export type RoleAuthoritiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleAuthorities
     */
    select?: RoleAuthoritiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleAuthorities
     */
    omit?: RoleAuthoritiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleAuthoritiesInclude<ExtArgs> | null
    /**
     * Filter, which RoleAuthorities to fetch.
     */
    where?: RoleAuthoritiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleAuthorities to fetch.
     */
    orderBy?: RoleAuthoritiesOrderByWithRelationInput | RoleAuthoritiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoleAuthorities.
     */
    cursor?: RoleAuthoritiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleAuthorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleAuthorities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoleAuthorities.
     */
    distinct?: RoleAuthoritiesScalarFieldEnum | RoleAuthoritiesScalarFieldEnum[]
  }

  /**
   * RoleAuthorities findFirstOrThrow
   */
  export type RoleAuthoritiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleAuthorities
     */
    select?: RoleAuthoritiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleAuthorities
     */
    omit?: RoleAuthoritiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleAuthoritiesInclude<ExtArgs> | null
    /**
     * Filter, which RoleAuthorities to fetch.
     */
    where?: RoleAuthoritiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleAuthorities to fetch.
     */
    orderBy?: RoleAuthoritiesOrderByWithRelationInput | RoleAuthoritiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoleAuthorities.
     */
    cursor?: RoleAuthoritiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleAuthorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleAuthorities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoleAuthorities.
     */
    distinct?: RoleAuthoritiesScalarFieldEnum | RoleAuthoritiesScalarFieldEnum[]
  }

  /**
   * RoleAuthorities findMany
   */
  export type RoleAuthoritiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleAuthorities
     */
    select?: RoleAuthoritiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleAuthorities
     */
    omit?: RoleAuthoritiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleAuthoritiesInclude<ExtArgs> | null
    /**
     * Filter, which RoleAuthorities to fetch.
     */
    where?: RoleAuthoritiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleAuthorities to fetch.
     */
    orderBy?: RoleAuthoritiesOrderByWithRelationInput | RoleAuthoritiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoleAuthorities.
     */
    cursor?: RoleAuthoritiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleAuthorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleAuthorities.
     */
    skip?: number
    distinct?: RoleAuthoritiesScalarFieldEnum | RoleAuthoritiesScalarFieldEnum[]
  }

  /**
   * RoleAuthorities create
   */
  export type RoleAuthoritiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleAuthorities
     */
    select?: RoleAuthoritiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleAuthorities
     */
    omit?: RoleAuthoritiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleAuthoritiesInclude<ExtArgs> | null
    /**
     * The data needed to create a RoleAuthorities.
     */
    data: XOR<RoleAuthoritiesCreateInput, RoleAuthoritiesUncheckedCreateInput>
  }

  /**
   * RoleAuthorities createMany
   */
  export type RoleAuthoritiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoleAuthorities.
     */
    data: RoleAuthoritiesCreateManyInput | RoleAuthoritiesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoleAuthorities createManyAndReturn
   */
  export type RoleAuthoritiesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleAuthorities
     */
    select?: RoleAuthoritiesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoleAuthorities
     */
    omit?: RoleAuthoritiesOmit<ExtArgs> | null
    /**
     * The data used to create many RoleAuthorities.
     */
    data: RoleAuthoritiesCreateManyInput | RoleAuthoritiesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleAuthoritiesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoleAuthorities update
   */
  export type RoleAuthoritiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleAuthorities
     */
    select?: RoleAuthoritiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleAuthorities
     */
    omit?: RoleAuthoritiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleAuthoritiesInclude<ExtArgs> | null
    /**
     * The data needed to update a RoleAuthorities.
     */
    data: XOR<RoleAuthoritiesUpdateInput, RoleAuthoritiesUncheckedUpdateInput>
    /**
     * Choose, which RoleAuthorities to update.
     */
    where: RoleAuthoritiesWhereUniqueInput
  }

  /**
   * RoleAuthorities updateMany
   */
  export type RoleAuthoritiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoleAuthorities.
     */
    data: XOR<RoleAuthoritiesUpdateManyMutationInput, RoleAuthoritiesUncheckedUpdateManyInput>
    /**
     * Filter which RoleAuthorities to update
     */
    where?: RoleAuthoritiesWhereInput
    /**
     * Limit how many RoleAuthorities to update.
     */
    limit?: number
  }

  /**
   * RoleAuthorities updateManyAndReturn
   */
  export type RoleAuthoritiesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleAuthorities
     */
    select?: RoleAuthoritiesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoleAuthorities
     */
    omit?: RoleAuthoritiesOmit<ExtArgs> | null
    /**
     * The data used to update RoleAuthorities.
     */
    data: XOR<RoleAuthoritiesUpdateManyMutationInput, RoleAuthoritiesUncheckedUpdateManyInput>
    /**
     * Filter which RoleAuthorities to update
     */
    where?: RoleAuthoritiesWhereInput
    /**
     * Limit how many RoleAuthorities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleAuthoritiesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoleAuthorities upsert
   */
  export type RoleAuthoritiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleAuthorities
     */
    select?: RoleAuthoritiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleAuthorities
     */
    omit?: RoleAuthoritiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleAuthoritiesInclude<ExtArgs> | null
    /**
     * The filter to search for the RoleAuthorities to update in case it exists.
     */
    where: RoleAuthoritiesWhereUniqueInput
    /**
     * In case the RoleAuthorities found by the `where` argument doesn't exist, create a new RoleAuthorities with this data.
     */
    create: XOR<RoleAuthoritiesCreateInput, RoleAuthoritiesUncheckedCreateInput>
    /**
     * In case the RoleAuthorities was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleAuthoritiesUpdateInput, RoleAuthoritiesUncheckedUpdateInput>
  }

  /**
   * RoleAuthorities delete
   */
  export type RoleAuthoritiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleAuthorities
     */
    select?: RoleAuthoritiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleAuthorities
     */
    omit?: RoleAuthoritiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleAuthoritiesInclude<ExtArgs> | null
    /**
     * Filter which RoleAuthorities to delete.
     */
    where: RoleAuthoritiesWhereUniqueInput
  }

  /**
   * RoleAuthorities deleteMany
   */
  export type RoleAuthoritiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoleAuthorities to delete
     */
    where?: RoleAuthoritiesWhereInput
    /**
     * Limit how many RoleAuthorities to delete.
     */
    limit?: number
  }

  /**
   * RoleAuthorities without action
   */
  export type RoleAuthoritiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleAuthorities
     */
    select?: RoleAuthoritiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleAuthorities
     */
    omit?: RoleAuthoritiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleAuthoritiesInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    id: number | null
  }

  export type CustomerSumAggregateOutputType = {
    id: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: number | null
    Cust_name: string | null
    Allowed_User_Count: string | null
    Plan: string | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: number | null
    Cust_name: string | null
    Allowed_User_Count: string | null
    Plan: string | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    Cust_name: number
    Allowed_User_Count: number
    Plan: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    id?: true
  }

  export type CustomerSumAggregateInputType = {
    id?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    Cust_name?: true
    Allowed_User_Count?: true
    Plan?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    Cust_name?: true
    Allowed_User_Count?: true
    Plan?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    Cust_name?: true
    Allowed_User_Count?: true
    Plan?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: number
    Cust_name: string
    Allowed_User_Count: string
    Plan: string
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Cust_name?: boolean
    Allowed_User_Count?: boolean
    Plan?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Cust_name?: boolean
    Allowed_User_Count?: boolean
    Plan?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Cust_name?: boolean
    Allowed_User_Count?: boolean
    Plan?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    Cust_name?: boolean
    Allowed_User_Count?: boolean
    Plan?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "Cust_name" | "Allowed_User_Count" | "Plan", ExtArgs["result"]["customer"]>

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Cust_name: string
      Allowed_User_Count: string
      Plan: string
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */ 
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'Int'>
    readonly Cust_name: FieldRef<"Customer", 'String'>
    readonly Allowed_User_Count: FieldRef<"Customer", 'String'>
    readonly Plan: FieldRef<"Customer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer updateManyAndReturn
   */
  export type CustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    userId: 'userId',
    email: 'email',
    password: 'password',
    username: 'username',
    designation: 'designation',
    phoneNumber: 'phoneNumber',
    profilePictureId: 'profilePictureId',
    resetPasswordOTP: 'resetPasswordOTP',
    otpExpires: 'otpExpires',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    reportsToId: 'reportsToId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ScreenshotsScalarFieldEnum: {
    id: 'id',
    username: 'username',
    time: 'time',
    date: 'date',
    base64: 'base64',
    userId: 'userId'
  };

  export type ScreenshotsScalarFieldEnum = (typeof ScreenshotsScalarFieldEnum)[keyof typeof ScreenshotsScalarFieldEnum]


  export const ProfilePictureScalarFieldEnum: {
    id: 'id',
    base64: 'base64'
  };

  export type ProfilePictureScalarFieldEnum = (typeof ProfilePictureScalarFieldEnum)[keyof typeof ProfilePictureScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    projectManager: 'projectManager',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    field5: 'field5',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const SprintScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    projectId: 'projectId'
  };

  export type SprintScalarFieldEnum = (typeof SprintScalarFieldEnum)[keyof typeof SprintScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    priority: 'priority',
    tags: 'tags',
    startDate: 'startDate',
    dueDate: 'dueDate',
    points: 'points',
    projectId: 'projectId',
    authorUserId: 'authorUserId',
    assignedUserId: 'assignedUserId',
    sprintId: 'sprintId'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const SubtaskScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    taskId: 'taskId',
    startDate: 'startDate',
    dueDate: 'dueDate',
    authorUserId: 'authorUserId',
    assignedUserId: 'assignedUserId'
  };

  export type SubtaskScalarFieldEnum = (typeof SubtaskScalarFieldEnum)[keyof typeof SubtaskScalarFieldEnum]


  export const TaskHistoryScalarFieldEnum: {
    id: 'id',
    taskId: 'taskId',
    userId: 'userId',
    startDate: 'startDate',
    endDate: 'endDate',
    sprint: 'sprint'
  };

  export type TaskHistoryScalarFieldEnum = (typeof TaskHistoryScalarFieldEnum)[keyof typeof TaskHistoryScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    text: 'text',
    taskId: 'taskId',
    userId: 'userId',
    username: 'username',
    commentTime: 'commentTime',
    subtaskId: 'subtaskId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const TaskAssignmentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    taskId: 'taskId'
  };

  export type TaskAssignmentScalarFieldEnum = (typeof TaskAssignmentScalarFieldEnum)[keyof typeof TaskAssignmentScalarFieldEnum]


  export const AttachmentScalarFieldEnum: {
    id: 'id',
    fileURL: 'fileURL',
    fileName: 'fileName',
    taskId: 'taskId',
    subTaskId: 'subTaskId',
    uploadedById: 'uploadedById'
  };

  export type AttachmentScalarFieldEnum = (typeof AttachmentScalarFieldEnum)[keyof typeof AttachmentScalarFieldEnum]


  export const UserProjectsScalarFieldEnum: {
    userId: 'userId',
    projectId: 'projectId',
    role: 'role'
  };

  export type UserProjectsScalarFieldEnum = (typeof UserProjectsScalarFieldEnum)[keyof typeof UserProjectsScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const TeamMembersScalarFieldEnum: {
    userId: 'userId',
    teamId: 'teamId',
    role: 'role'
  };

  export type TeamMembersScalarFieldEnum = (typeof TeamMembersScalarFieldEnum)[keyof typeof TeamMembersScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const AuthorityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AuthorityScalarFieldEnum = (typeof AuthorityScalarFieldEnum)[keyof typeof AuthorityScalarFieldEnum]


  export const RoleAuthoritiesScalarFieldEnum: {
    roleId: 'roleId',
    authorityId: 'authorityId'
  };

  export type RoleAuthoritiesScalarFieldEnum = (typeof RoleAuthoritiesScalarFieldEnum)[keyof typeof RoleAuthoritiesScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    Cust_name: 'Cust_name',
    Allowed_User_Count: 'Allowed_User_Count',
    Plan: 'Plan'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    userId?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    designation?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    profilePictureId?: IntNullableFilter<"User"> | number | null
    resetPasswordOTP?: StringNullableFilter<"User"> | string | null
    otpExpires?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    reportsToId?: IntNullableFilter<"User"> | number | null
    projects?: ProjectListRelationFilter
    teams?: TeamListRelationFilter
    roles?: RoleListRelationFilter
    authoredTasks?: TaskListRelationFilter
    assignedTasks?: TaskListRelationFilter
    authoredSubTasks?: SubtaskListRelationFilter
    assignedSubTasks?: SubtaskListRelationFilter
    taskAssignment?: TaskAssignmentListRelationFilter
    attachments?: AttachmentListRelationFilter
    comments?: CommentListRelationFilter
    teamMembers?: TeamMembersListRelationFilter
    userProjects?: UserProjectsListRelationFilter
    reportsTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    reports?: UserListRelationFilter
    taskHistory?: TaskHistoryListRelationFilter
    screenshot?: ScreenshotsListRelationFilter
    project?: XOR<ProjectNullableScalarRelationFilter, ProjectWhereInput> | null
    profilePicture?: XOR<ProfilePictureNullableScalarRelationFilter, ProfilePictureWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    userId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    designation?: SortOrder
    phoneNumber?: SortOrder
    profilePictureId?: SortOrderInput | SortOrder
    resetPasswordOTP?: SortOrderInput | SortOrder
    otpExpires?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportsToId?: SortOrderInput | SortOrder
    projects?: ProjectOrderByRelationAggregateInput
    teams?: TeamOrderByRelationAggregateInput
    roles?: RoleOrderByRelationAggregateInput
    authoredTasks?: TaskOrderByRelationAggregateInput
    assignedTasks?: TaskOrderByRelationAggregateInput
    authoredSubTasks?: SubtaskOrderByRelationAggregateInput
    assignedSubTasks?: SubtaskOrderByRelationAggregateInput
    taskAssignment?: TaskAssignmentOrderByRelationAggregateInput
    attachments?: AttachmentOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    teamMembers?: TeamMembersOrderByRelationAggregateInput
    userProjects?: UserProjectsOrderByRelationAggregateInput
    reportsTo?: UserOrderByWithRelationInput
    reports?: UserOrderByRelationAggregateInput
    taskHistory?: TaskHistoryOrderByRelationAggregateInput
    screenshot?: ScreenshotsOrderByRelationAggregateInput
    project?: ProjectOrderByWithRelationInput
    profilePicture?: ProfilePictureOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    email?: string
    username?: string
    profilePictureId?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    designation?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    resetPasswordOTP?: StringNullableFilter<"User"> | string | null
    otpExpires?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    reportsToId?: IntNullableFilter<"User"> | number | null
    projects?: ProjectListRelationFilter
    teams?: TeamListRelationFilter
    roles?: RoleListRelationFilter
    authoredTasks?: TaskListRelationFilter
    assignedTasks?: TaskListRelationFilter
    authoredSubTasks?: SubtaskListRelationFilter
    assignedSubTasks?: SubtaskListRelationFilter
    taskAssignment?: TaskAssignmentListRelationFilter
    attachments?: AttachmentListRelationFilter
    comments?: CommentListRelationFilter
    teamMembers?: TeamMembersListRelationFilter
    userProjects?: UserProjectsListRelationFilter
    reportsTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    reports?: UserListRelationFilter
    taskHistory?: TaskHistoryListRelationFilter
    screenshot?: ScreenshotsListRelationFilter
    project?: XOR<ProjectNullableScalarRelationFilter, ProjectWhereInput> | null
    profilePicture?: XOR<ProfilePictureNullableScalarRelationFilter, ProfilePictureWhereInput> | null
  }, "userId" | "email" | "username" | "profilePictureId">

  export type UserOrderByWithAggregationInput = {
    userId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    designation?: SortOrder
    phoneNumber?: SortOrder
    profilePictureId?: SortOrderInput | SortOrder
    resetPasswordOTP?: SortOrderInput | SortOrder
    otpExpires?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportsToId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    designation?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    profilePictureId?: IntNullableWithAggregatesFilter<"User"> | number | null
    resetPasswordOTP?: StringNullableWithAggregatesFilter<"User"> | string | null
    otpExpires?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    reportsToId?: IntNullableWithAggregatesFilter<"User"> | number | null
  }

  export type ScreenshotsWhereInput = {
    AND?: ScreenshotsWhereInput | ScreenshotsWhereInput[]
    OR?: ScreenshotsWhereInput[]
    NOT?: ScreenshotsWhereInput | ScreenshotsWhereInput[]
    id?: IntFilter<"Screenshots"> | number
    username?: StringFilter<"Screenshots"> | string
    time?: StringFilter<"Screenshots"> | string
    date?: DateTimeNullableFilter<"Screenshots"> | Date | string | null
    base64?: StringFilter<"Screenshots"> | string
    userId?: IntFilter<"Screenshots"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ScreenshotsOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    time?: SortOrder
    date?: SortOrderInput | SortOrder
    base64?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ScreenshotsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScreenshotsWhereInput | ScreenshotsWhereInput[]
    OR?: ScreenshotsWhereInput[]
    NOT?: ScreenshotsWhereInput | ScreenshotsWhereInput[]
    username?: StringFilter<"Screenshots"> | string
    time?: StringFilter<"Screenshots"> | string
    date?: DateTimeNullableFilter<"Screenshots"> | Date | string | null
    base64?: StringFilter<"Screenshots"> | string
    userId?: IntFilter<"Screenshots"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ScreenshotsOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    time?: SortOrder
    date?: SortOrderInput | SortOrder
    base64?: SortOrder
    userId?: SortOrder
    _count?: ScreenshotsCountOrderByAggregateInput
    _avg?: ScreenshotsAvgOrderByAggregateInput
    _max?: ScreenshotsMaxOrderByAggregateInput
    _min?: ScreenshotsMinOrderByAggregateInput
    _sum?: ScreenshotsSumOrderByAggregateInput
  }

  export type ScreenshotsScalarWhereWithAggregatesInput = {
    AND?: ScreenshotsScalarWhereWithAggregatesInput | ScreenshotsScalarWhereWithAggregatesInput[]
    OR?: ScreenshotsScalarWhereWithAggregatesInput[]
    NOT?: ScreenshotsScalarWhereWithAggregatesInput | ScreenshotsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Screenshots"> | number
    username?: StringWithAggregatesFilter<"Screenshots"> | string
    time?: StringWithAggregatesFilter<"Screenshots"> | string
    date?: DateTimeNullableWithAggregatesFilter<"Screenshots"> | Date | string | null
    base64?: StringWithAggregatesFilter<"Screenshots"> | string
    userId?: IntWithAggregatesFilter<"Screenshots"> | number
  }

  export type ProfilePictureWhereInput = {
    AND?: ProfilePictureWhereInput | ProfilePictureWhereInput[]
    OR?: ProfilePictureWhereInput[]
    NOT?: ProfilePictureWhereInput | ProfilePictureWhereInput[]
    id?: IntFilter<"ProfilePicture"> | number
    base64?: StringFilter<"ProfilePicture"> | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ProfilePictureOrderByWithRelationInput = {
    id?: SortOrder
    base64?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProfilePictureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProfilePictureWhereInput | ProfilePictureWhereInput[]
    OR?: ProfilePictureWhereInput[]
    NOT?: ProfilePictureWhereInput | ProfilePictureWhereInput[]
    base64?: StringFilter<"ProfilePicture"> | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ProfilePictureOrderByWithAggregationInput = {
    id?: SortOrder
    base64?: SortOrder
    _count?: ProfilePictureCountOrderByAggregateInput
    _avg?: ProfilePictureAvgOrderByAggregateInput
    _max?: ProfilePictureMaxOrderByAggregateInput
    _min?: ProfilePictureMinOrderByAggregateInput
    _sum?: ProfilePictureSumOrderByAggregateInput
  }

  export type ProfilePictureScalarWhereWithAggregatesInput = {
    AND?: ProfilePictureScalarWhereWithAggregatesInput | ProfilePictureScalarWhereWithAggregatesInput[]
    OR?: ProfilePictureScalarWhereWithAggregatesInput[]
    NOT?: ProfilePictureScalarWhereWithAggregatesInput | ProfilePictureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProfilePicture"> | number
    base64?: StringWithAggregatesFilter<"ProfilePicture"> | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: IntFilter<"Project"> | number
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    projectManager?: IntFilter<"Project"> | number
    startDate?: StringNullableFilter<"Project"> | string | null
    endDate?: StringNullableFilter<"Project"> | string | null
    status?: StringNullableFilter<"Project"> | string | null
    field5?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    tasks?: TaskListRelationFilter
    sprints?: SprintListRelationFilter
    users?: UserListRelationFilter
    userProjects?: UserProjectsListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    projectManager?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    field5?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tasks?: TaskOrderByRelationAggregateInput
    sprints?: SprintOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    userProjects?: UserProjectsOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    projectManager?: number
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    description?: StringNullableFilter<"Project"> | string | null
    startDate?: StringNullableFilter<"Project"> | string | null
    endDate?: StringNullableFilter<"Project"> | string | null
    status?: StringNullableFilter<"Project"> | string | null
    field5?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    tasks?: TaskListRelationFilter
    sprints?: SprintListRelationFilter
    users?: UserListRelationFilter
    userProjects?: UserProjectsListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "name" | "projectManager">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    projectManager?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    field5?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Project"> | number
    name?: StringWithAggregatesFilter<"Project"> | string
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    projectManager?: IntWithAggregatesFilter<"Project"> | number
    startDate?: StringNullableWithAggregatesFilter<"Project"> | string | null
    endDate?: StringNullableWithAggregatesFilter<"Project"> | string | null
    status?: StringNullableWithAggregatesFilter<"Project"> | string | null
    field5?: StringNullableWithAggregatesFilter<"Project"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type SprintWhereInput = {
    AND?: SprintWhereInput | SprintWhereInput[]
    OR?: SprintWhereInput[]
    NOT?: SprintWhereInput | SprintWhereInput[]
    id?: IntFilter<"Sprint"> | number
    title?: StringFilter<"Sprint"> | string
    description?: StringNullableFilter<"Sprint"> | string | null
    startDate?: DateTimeFilter<"Sprint"> | Date | string
    endDate?: DateTimeFilter<"Sprint"> | Date | string
    projectId?: IntFilter<"Sprint"> | number
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    tasks?: TaskListRelationFilter
  }

  export type SprintOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationInput
    tasks?: TaskOrderByRelationAggregateInput
  }

  export type SprintWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SprintWhereInput | SprintWhereInput[]
    OR?: SprintWhereInput[]
    NOT?: SprintWhereInput | SprintWhereInput[]
    title?: StringFilter<"Sprint"> | string
    description?: StringNullableFilter<"Sprint"> | string | null
    startDate?: DateTimeFilter<"Sprint"> | Date | string
    endDate?: DateTimeFilter<"Sprint"> | Date | string
    projectId?: IntFilter<"Sprint"> | number
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    tasks?: TaskListRelationFilter
  }, "id">

  export type SprintOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    projectId?: SortOrder
    _count?: SprintCountOrderByAggregateInput
    _avg?: SprintAvgOrderByAggregateInput
    _max?: SprintMaxOrderByAggregateInput
    _min?: SprintMinOrderByAggregateInput
    _sum?: SprintSumOrderByAggregateInput
  }

  export type SprintScalarWhereWithAggregatesInput = {
    AND?: SprintScalarWhereWithAggregatesInput | SprintScalarWhereWithAggregatesInput[]
    OR?: SprintScalarWhereWithAggregatesInput[]
    NOT?: SprintScalarWhereWithAggregatesInput | SprintScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Sprint"> | number
    title?: StringWithAggregatesFilter<"Sprint"> | string
    description?: StringNullableWithAggregatesFilter<"Sprint"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Sprint"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Sprint"> | Date | string
    projectId?: IntWithAggregatesFilter<"Sprint"> | number
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: IntFilter<"Task"> | number
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: StringNullableFilter<"Task"> | string | null
    priority?: StringNullableFilter<"Task"> | string | null
    tags?: StringNullableFilter<"Task"> | string | null
    startDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    points?: IntNullableFilter<"Task"> | number | null
    projectId?: IntFilter<"Task"> | number
    authorUserId?: IntFilter<"Task"> | number
    assignedUserId?: IntNullableFilter<"Task"> | number | null
    sprintId?: IntNullableFilter<"Task"> | number | null
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    assignee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    taskAssignments?: TaskAssignmentListRelationFilter
    attachments?: AttachmentListRelationFilter
    comments?: CommentListRelationFilter
    taskHistory?: TaskHistoryListRelationFilter
    subTasks?: SubtaskListRelationFilter
    sprint?: XOR<SprintNullableScalarRelationFilter, SprintWhereInput> | null
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    points?: SortOrderInput | SortOrder
    projectId?: SortOrder
    authorUserId?: SortOrder
    assignedUserId?: SortOrderInput | SortOrder
    sprintId?: SortOrderInput | SortOrder
    project?: ProjectOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
    assignee?: UserOrderByWithRelationInput
    taskAssignments?: TaskAssignmentOrderByRelationAggregateInput
    attachments?: AttachmentOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    taskHistory?: TaskHistoryOrderByRelationAggregateInput
    subTasks?: SubtaskOrderByRelationAggregateInput
    sprint?: SprintOrderByWithRelationInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: StringNullableFilter<"Task"> | string | null
    priority?: StringNullableFilter<"Task"> | string | null
    tags?: StringNullableFilter<"Task"> | string | null
    startDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    points?: IntNullableFilter<"Task"> | number | null
    projectId?: IntFilter<"Task"> | number
    authorUserId?: IntFilter<"Task"> | number
    assignedUserId?: IntNullableFilter<"Task"> | number | null
    sprintId?: IntNullableFilter<"Task"> | number | null
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    assignee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    taskAssignments?: TaskAssignmentListRelationFilter
    attachments?: AttachmentListRelationFilter
    comments?: CommentListRelationFilter
    taskHistory?: TaskHistoryListRelationFilter
    subTasks?: SubtaskListRelationFilter
    sprint?: XOR<SprintNullableScalarRelationFilter, SprintWhereInput> | null
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    points?: SortOrderInput | SortOrder
    projectId?: SortOrder
    authorUserId?: SortOrder
    assignedUserId?: SortOrderInput | SortOrder
    sprintId?: SortOrderInput | SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Task"> | number
    title?: StringWithAggregatesFilter<"Task"> | string
    description?: StringNullableWithAggregatesFilter<"Task"> | string | null
    status?: StringNullableWithAggregatesFilter<"Task"> | string | null
    priority?: StringNullableWithAggregatesFilter<"Task"> | string | null
    tags?: StringNullableWithAggregatesFilter<"Task"> | string | null
    startDate?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    points?: IntNullableWithAggregatesFilter<"Task"> | number | null
    projectId?: IntWithAggregatesFilter<"Task"> | number
    authorUserId?: IntWithAggregatesFilter<"Task"> | number
    assignedUserId?: IntNullableWithAggregatesFilter<"Task"> | number | null
    sprintId?: IntNullableWithAggregatesFilter<"Task"> | number | null
  }

  export type SubtaskWhereInput = {
    AND?: SubtaskWhereInput | SubtaskWhereInput[]
    OR?: SubtaskWhereInput[]
    NOT?: SubtaskWhereInput | SubtaskWhereInput[]
    id?: IntFilter<"Subtask"> | number
    title?: StringFilter<"Subtask"> | string
    description?: StringNullableFilter<"Subtask"> | string | null
    status?: StringNullableFilter<"Subtask"> | string | null
    taskId?: IntFilter<"Subtask"> | number
    startDate?: DateTimeNullableFilter<"Subtask"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"Subtask"> | Date | string | null
    authorUserId?: IntFilter<"Subtask"> | number
    assignedUserId?: IntNullableFilter<"Subtask"> | number | null
    attachments?: AttachmentListRelationFilter
    assignee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    comments?: CommentListRelationFilter
  }

  export type SubtaskOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    taskId?: SortOrder
    startDate?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    authorUserId?: SortOrder
    assignedUserId?: SortOrderInput | SortOrder
    attachments?: AttachmentOrderByRelationAggregateInput
    assignee?: UserOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type SubtaskWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubtaskWhereInput | SubtaskWhereInput[]
    OR?: SubtaskWhereInput[]
    NOT?: SubtaskWhereInput | SubtaskWhereInput[]
    title?: StringFilter<"Subtask"> | string
    description?: StringNullableFilter<"Subtask"> | string | null
    status?: StringNullableFilter<"Subtask"> | string | null
    taskId?: IntFilter<"Subtask"> | number
    startDate?: DateTimeNullableFilter<"Subtask"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"Subtask"> | Date | string | null
    authorUserId?: IntFilter<"Subtask"> | number
    assignedUserId?: IntNullableFilter<"Subtask"> | number | null
    attachments?: AttachmentListRelationFilter
    assignee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    comments?: CommentListRelationFilter
  }, "id">

  export type SubtaskOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    taskId?: SortOrder
    startDate?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    authorUserId?: SortOrder
    assignedUserId?: SortOrderInput | SortOrder
    _count?: SubtaskCountOrderByAggregateInput
    _avg?: SubtaskAvgOrderByAggregateInput
    _max?: SubtaskMaxOrderByAggregateInput
    _min?: SubtaskMinOrderByAggregateInput
    _sum?: SubtaskSumOrderByAggregateInput
  }

  export type SubtaskScalarWhereWithAggregatesInput = {
    AND?: SubtaskScalarWhereWithAggregatesInput | SubtaskScalarWhereWithAggregatesInput[]
    OR?: SubtaskScalarWhereWithAggregatesInput[]
    NOT?: SubtaskScalarWhereWithAggregatesInput | SubtaskScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subtask"> | number
    title?: StringWithAggregatesFilter<"Subtask"> | string
    description?: StringNullableWithAggregatesFilter<"Subtask"> | string | null
    status?: StringNullableWithAggregatesFilter<"Subtask"> | string | null
    taskId?: IntWithAggregatesFilter<"Subtask"> | number
    startDate?: DateTimeNullableWithAggregatesFilter<"Subtask"> | Date | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"Subtask"> | Date | string | null
    authorUserId?: IntWithAggregatesFilter<"Subtask"> | number
    assignedUserId?: IntNullableWithAggregatesFilter<"Subtask"> | number | null
  }

  export type TaskHistoryWhereInput = {
    AND?: TaskHistoryWhereInput | TaskHistoryWhereInput[]
    OR?: TaskHistoryWhereInput[]
    NOT?: TaskHistoryWhereInput | TaskHistoryWhereInput[]
    id?: IntFilter<"TaskHistory"> | number
    taskId?: IntFilter<"TaskHistory"> | number
    userId?: IntFilter<"TaskHistory"> | number
    startDate?: DateTimeFilter<"TaskHistory"> | Date | string
    endDate?: DateTimeFilter<"TaskHistory"> | Date | string
    sprint?: StringFilter<"TaskHistory"> | string
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TaskHistoryOrderByWithRelationInput = {
    id?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    sprint?: SortOrder
    task?: TaskOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TaskHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TaskHistoryWhereInput | TaskHistoryWhereInput[]
    OR?: TaskHistoryWhereInput[]
    NOT?: TaskHistoryWhereInput | TaskHistoryWhereInput[]
    taskId?: IntFilter<"TaskHistory"> | number
    userId?: IntFilter<"TaskHistory"> | number
    startDate?: DateTimeFilter<"TaskHistory"> | Date | string
    endDate?: DateTimeFilter<"TaskHistory"> | Date | string
    sprint?: StringFilter<"TaskHistory"> | string
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TaskHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    sprint?: SortOrder
    _count?: TaskHistoryCountOrderByAggregateInput
    _avg?: TaskHistoryAvgOrderByAggregateInput
    _max?: TaskHistoryMaxOrderByAggregateInput
    _min?: TaskHistoryMinOrderByAggregateInput
    _sum?: TaskHistorySumOrderByAggregateInput
  }

  export type TaskHistoryScalarWhereWithAggregatesInput = {
    AND?: TaskHistoryScalarWhereWithAggregatesInput | TaskHistoryScalarWhereWithAggregatesInput[]
    OR?: TaskHistoryScalarWhereWithAggregatesInput[]
    NOT?: TaskHistoryScalarWhereWithAggregatesInput | TaskHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TaskHistory"> | number
    taskId?: IntWithAggregatesFilter<"TaskHistory"> | number
    userId?: IntWithAggregatesFilter<"TaskHistory"> | number
    startDate?: DateTimeWithAggregatesFilter<"TaskHistory"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"TaskHistory"> | Date | string
    sprint?: StringWithAggregatesFilter<"TaskHistory"> | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: IntFilter<"Comment"> | number
    text?: StringFilter<"Comment"> | string
    taskId?: IntFilter<"Comment"> | number
    userId?: IntFilter<"Comment"> | number
    username?: StringFilter<"Comment"> | string
    commentTime?: DateTimeFilter<"Comment"> | Date | string
    subtaskId?: IntNullableFilter<"Comment"> | number | null
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
    subtask?: XOR<SubtaskNullableScalarRelationFilter, SubtaskWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    commentTime?: SortOrder
    subtaskId?: SortOrderInput | SortOrder
    task?: TaskOrderByWithRelationInput
    subtask?: SubtaskOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    text?: StringFilter<"Comment"> | string
    taskId?: IntFilter<"Comment"> | number
    userId?: IntFilter<"Comment"> | number
    username?: StringFilter<"Comment"> | string
    commentTime?: DateTimeFilter<"Comment"> | Date | string
    subtaskId?: IntNullableFilter<"Comment"> | number | null
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
    subtask?: XOR<SubtaskNullableScalarRelationFilter, SubtaskWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    commentTime?: SortOrder
    subtaskId?: SortOrderInput | SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comment"> | number
    text?: StringWithAggregatesFilter<"Comment"> | string
    taskId?: IntWithAggregatesFilter<"Comment"> | number
    userId?: IntWithAggregatesFilter<"Comment"> | number
    username?: StringWithAggregatesFilter<"Comment"> | string
    commentTime?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    subtaskId?: IntNullableWithAggregatesFilter<"Comment"> | number | null
  }

  export type TaskAssignmentWhereInput = {
    AND?: TaskAssignmentWhereInput | TaskAssignmentWhereInput[]
    OR?: TaskAssignmentWhereInput[]
    NOT?: TaskAssignmentWhereInput | TaskAssignmentWhereInput[]
    id?: IntFilter<"TaskAssignment"> | number
    userId?: IntFilter<"TaskAssignment"> | number
    taskId?: IntFilter<"TaskAssignment"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
  }

  export type TaskAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
    user?: UserOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
  }

  export type TaskAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TaskAssignmentWhereInput | TaskAssignmentWhereInput[]
    OR?: TaskAssignmentWhereInput[]
    NOT?: TaskAssignmentWhereInput | TaskAssignmentWhereInput[]
    userId?: IntFilter<"TaskAssignment"> | number
    taskId?: IntFilter<"TaskAssignment"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
  }, "id">

  export type TaskAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
    _count?: TaskAssignmentCountOrderByAggregateInput
    _avg?: TaskAssignmentAvgOrderByAggregateInput
    _max?: TaskAssignmentMaxOrderByAggregateInput
    _min?: TaskAssignmentMinOrderByAggregateInput
    _sum?: TaskAssignmentSumOrderByAggregateInput
  }

  export type TaskAssignmentScalarWhereWithAggregatesInput = {
    AND?: TaskAssignmentScalarWhereWithAggregatesInput | TaskAssignmentScalarWhereWithAggregatesInput[]
    OR?: TaskAssignmentScalarWhereWithAggregatesInput[]
    NOT?: TaskAssignmentScalarWhereWithAggregatesInput | TaskAssignmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TaskAssignment"> | number
    userId?: IntWithAggregatesFilter<"TaskAssignment"> | number
    taskId?: IntWithAggregatesFilter<"TaskAssignment"> | number
  }

  export type AttachmentWhereInput = {
    AND?: AttachmentWhereInput | AttachmentWhereInput[]
    OR?: AttachmentWhereInput[]
    NOT?: AttachmentWhereInput | AttachmentWhereInput[]
    id?: IntFilter<"Attachment"> | number
    fileURL?: StringFilter<"Attachment"> | string
    fileName?: StringNullableFilter<"Attachment"> | string | null
    taskId?: IntNullableFilter<"Attachment"> | number | null
    subTaskId?: IntNullableFilter<"Attachment"> | number | null
    uploadedById?: IntFilter<"Attachment"> | number
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
    subTask?: XOR<SubtaskNullableScalarRelationFilter, SubtaskWhereInput> | null
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AttachmentOrderByWithRelationInput = {
    id?: SortOrder
    fileURL?: SortOrder
    fileName?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    subTaskId?: SortOrderInput | SortOrder
    uploadedById?: SortOrder
    task?: TaskOrderByWithRelationInput
    subTask?: SubtaskOrderByWithRelationInput
    uploadedBy?: UserOrderByWithRelationInput
  }

  export type AttachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AttachmentWhereInput | AttachmentWhereInput[]
    OR?: AttachmentWhereInput[]
    NOT?: AttachmentWhereInput | AttachmentWhereInput[]
    fileURL?: StringFilter<"Attachment"> | string
    fileName?: StringNullableFilter<"Attachment"> | string | null
    taskId?: IntNullableFilter<"Attachment"> | number | null
    subTaskId?: IntNullableFilter<"Attachment"> | number | null
    uploadedById?: IntFilter<"Attachment"> | number
    task?: XOR<TaskNullableScalarRelationFilter, TaskWhereInput> | null
    subTask?: XOR<SubtaskNullableScalarRelationFilter, SubtaskWhereInput> | null
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AttachmentOrderByWithAggregationInput = {
    id?: SortOrder
    fileURL?: SortOrder
    fileName?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    subTaskId?: SortOrderInput | SortOrder
    uploadedById?: SortOrder
    _count?: AttachmentCountOrderByAggregateInput
    _avg?: AttachmentAvgOrderByAggregateInput
    _max?: AttachmentMaxOrderByAggregateInput
    _min?: AttachmentMinOrderByAggregateInput
    _sum?: AttachmentSumOrderByAggregateInput
  }

  export type AttachmentScalarWhereWithAggregatesInput = {
    AND?: AttachmentScalarWhereWithAggregatesInput | AttachmentScalarWhereWithAggregatesInput[]
    OR?: AttachmentScalarWhereWithAggregatesInput[]
    NOT?: AttachmentScalarWhereWithAggregatesInput | AttachmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Attachment"> | number
    fileURL?: StringWithAggregatesFilter<"Attachment"> | string
    fileName?: StringNullableWithAggregatesFilter<"Attachment"> | string | null
    taskId?: IntNullableWithAggregatesFilter<"Attachment"> | number | null
    subTaskId?: IntNullableWithAggregatesFilter<"Attachment"> | number | null
    uploadedById?: IntWithAggregatesFilter<"Attachment"> | number
  }

  export type UserProjectsWhereInput = {
    AND?: UserProjectsWhereInput | UserProjectsWhereInput[]
    OR?: UserProjectsWhereInput[]
    NOT?: UserProjectsWhereInput | UserProjectsWhereInput[]
    userId?: IntFilter<"UserProjects"> | number
    projectId?: IntFilter<"UserProjects"> | number
    role?: StringFilter<"UserProjects"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type UserProjectsOrderByWithRelationInput = {
    userId?: SortOrder
    projectId?: SortOrder
    role?: SortOrder
    user?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type UserProjectsWhereUniqueInput = Prisma.AtLeast<{
    userId_projectId?: UserProjectsUserIdProjectIdCompoundUniqueInput
    AND?: UserProjectsWhereInput | UserProjectsWhereInput[]
    OR?: UserProjectsWhereInput[]
    NOT?: UserProjectsWhereInput | UserProjectsWhereInput[]
    userId?: IntFilter<"UserProjects"> | number
    projectId?: IntFilter<"UserProjects"> | number
    role?: StringFilter<"UserProjects"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "userId_projectId">

  export type UserProjectsOrderByWithAggregationInput = {
    userId?: SortOrder
    projectId?: SortOrder
    role?: SortOrder
    _count?: UserProjectsCountOrderByAggregateInput
    _avg?: UserProjectsAvgOrderByAggregateInput
    _max?: UserProjectsMaxOrderByAggregateInput
    _min?: UserProjectsMinOrderByAggregateInput
    _sum?: UserProjectsSumOrderByAggregateInput
  }

  export type UserProjectsScalarWhereWithAggregatesInput = {
    AND?: UserProjectsScalarWhereWithAggregatesInput | UserProjectsScalarWhereWithAggregatesInput[]
    OR?: UserProjectsScalarWhereWithAggregatesInput[]
    NOT?: UserProjectsScalarWhereWithAggregatesInput | UserProjectsScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"UserProjects"> | number
    projectId?: IntWithAggregatesFilter<"UserProjects"> | number
    role?: StringWithAggregatesFilter<"UserProjects"> | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: IntFilter<"Team"> | number
    name?: StringFilter<"Team"> | string
    description?: StringFilter<"Team"> | string
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    members?: UserListRelationFilter
    teamMembers?: TeamMembersListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    members?: UserOrderByRelationAggregateInput
    teamMembers?: TeamMembersOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    description?: StringFilter<"Team"> | string
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    members?: UserListRelationFilter
    teamMembers?: TeamMembersListRelationFilter
  }, "id" | "name">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Team"> | number
    name?: StringWithAggregatesFilter<"Team"> | string
    description?: StringWithAggregatesFilter<"Team"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
  }

  export type TeamMembersWhereInput = {
    AND?: TeamMembersWhereInput | TeamMembersWhereInput[]
    OR?: TeamMembersWhereInput[]
    NOT?: TeamMembersWhereInput | TeamMembersWhereInput[]
    userId?: IntFilter<"TeamMembers"> | number
    teamId?: IntFilter<"TeamMembers"> | number
    role?: StringFilter<"TeamMembers"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }

  export type TeamMembersOrderByWithRelationInput = {
    userId?: SortOrder
    teamId?: SortOrder
    role?: SortOrder
    user?: UserOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
  }

  export type TeamMembersWhereUniqueInput = Prisma.AtLeast<{
    userId_teamId?: TeamMembersUserIdTeamIdCompoundUniqueInput
    AND?: TeamMembersWhereInput | TeamMembersWhereInput[]
    OR?: TeamMembersWhereInput[]
    NOT?: TeamMembersWhereInput | TeamMembersWhereInput[]
    userId?: IntFilter<"TeamMembers"> | number
    teamId?: IntFilter<"TeamMembers"> | number
    role?: StringFilter<"TeamMembers"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }, "userId_teamId">

  export type TeamMembersOrderByWithAggregationInput = {
    userId?: SortOrder
    teamId?: SortOrder
    role?: SortOrder
    _count?: TeamMembersCountOrderByAggregateInput
    _avg?: TeamMembersAvgOrderByAggregateInput
    _max?: TeamMembersMaxOrderByAggregateInput
    _min?: TeamMembersMinOrderByAggregateInput
    _sum?: TeamMembersSumOrderByAggregateInput
  }

  export type TeamMembersScalarWhereWithAggregatesInput = {
    AND?: TeamMembersScalarWhereWithAggregatesInput | TeamMembersScalarWhereWithAggregatesInput[]
    OR?: TeamMembersScalarWhereWithAggregatesInput[]
    NOT?: TeamMembersScalarWhereWithAggregatesInput | TeamMembersScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"TeamMembers"> | number
    teamId?: IntWithAggregatesFilter<"TeamMembers"> | number
    role?: StringWithAggregatesFilter<"TeamMembers"> | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: IntFilter<"Role"> | number
    name?: StringFilter<"Role"> | string
    code?: StringFilter<"Role"> | string
    description?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    users?: UserListRelationFilter
    authorities?: AuthorityListRelationFilter
    roleAuthorities?: RoleAuthoritiesListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    authorities?: AuthorityOrderByRelationAggregateInput
    roleAuthorities?: RoleAuthoritiesOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    name?: StringFilter<"Role"> | string
    description?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    users?: UserListRelationFilter
    authorities?: AuthorityListRelationFilter
    roleAuthorities?: RoleAuthoritiesListRelationFilter
  }, "id" | "code">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Role"> | number
    name?: StringWithAggregatesFilter<"Role"> | string
    code?: StringWithAggregatesFilter<"Role"> | string
    description?: StringWithAggregatesFilter<"Role"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
  }

  export type AuthorityWhereInput = {
    AND?: AuthorityWhereInput | AuthorityWhereInput[]
    OR?: AuthorityWhereInput[]
    NOT?: AuthorityWhereInput | AuthorityWhereInput[]
    id?: IntFilter<"Authority"> | number
    name?: StringFilter<"Authority"> | string
    code?: StringFilter<"Authority"> | string
    description?: StringFilter<"Authority"> | string
    createdAt?: DateTimeFilter<"Authority"> | Date | string
    updatedAt?: DateTimeFilter<"Authority"> | Date | string
    roles?: RoleListRelationFilter
    roleAuthorities?: RoleAuthoritiesListRelationFilter
  }

  export type AuthorityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roles?: RoleOrderByRelationAggregateInput
    roleAuthorities?: RoleAuthoritiesOrderByRelationAggregateInput
  }

  export type AuthorityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: AuthorityWhereInput | AuthorityWhereInput[]
    OR?: AuthorityWhereInput[]
    NOT?: AuthorityWhereInput | AuthorityWhereInput[]
    name?: StringFilter<"Authority"> | string
    description?: StringFilter<"Authority"> | string
    createdAt?: DateTimeFilter<"Authority"> | Date | string
    updatedAt?: DateTimeFilter<"Authority"> | Date | string
    roles?: RoleListRelationFilter
    roleAuthorities?: RoleAuthoritiesListRelationFilter
  }, "id" | "code">

  export type AuthorityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AuthorityCountOrderByAggregateInput
    _avg?: AuthorityAvgOrderByAggregateInput
    _max?: AuthorityMaxOrderByAggregateInput
    _min?: AuthorityMinOrderByAggregateInput
    _sum?: AuthoritySumOrderByAggregateInput
  }

  export type AuthorityScalarWhereWithAggregatesInput = {
    AND?: AuthorityScalarWhereWithAggregatesInput | AuthorityScalarWhereWithAggregatesInput[]
    OR?: AuthorityScalarWhereWithAggregatesInput[]
    NOT?: AuthorityScalarWhereWithAggregatesInput | AuthorityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Authority"> | number
    name?: StringWithAggregatesFilter<"Authority"> | string
    code?: StringWithAggregatesFilter<"Authority"> | string
    description?: StringWithAggregatesFilter<"Authority"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Authority"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Authority"> | Date | string
  }

  export type RoleAuthoritiesWhereInput = {
    AND?: RoleAuthoritiesWhereInput | RoleAuthoritiesWhereInput[]
    OR?: RoleAuthoritiesWhereInput[]
    NOT?: RoleAuthoritiesWhereInput | RoleAuthoritiesWhereInput[]
    roleId?: IntFilter<"RoleAuthorities"> | number
    authorityId?: IntFilter<"RoleAuthorities"> | number
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    authority?: XOR<AuthorityScalarRelationFilter, AuthorityWhereInput>
  }

  export type RoleAuthoritiesOrderByWithRelationInput = {
    roleId?: SortOrder
    authorityId?: SortOrder
    role?: RoleOrderByWithRelationInput
    authority?: AuthorityOrderByWithRelationInput
  }

  export type RoleAuthoritiesWhereUniqueInput = Prisma.AtLeast<{
    roleId_authorityId?: RoleAuthoritiesRoleIdAuthorityIdCompoundUniqueInput
    AND?: RoleAuthoritiesWhereInput | RoleAuthoritiesWhereInput[]
    OR?: RoleAuthoritiesWhereInput[]
    NOT?: RoleAuthoritiesWhereInput | RoleAuthoritiesWhereInput[]
    roleId?: IntFilter<"RoleAuthorities"> | number
    authorityId?: IntFilter<"RoleAuthorities"> | number
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    authority?: XOR<AuthorityScalarRelationFilter, AuthorityWhereInput>
  }, "roleId_authorityId">

  export type RoleAuthoritiesOrderByWithAggregationInput = {
    roleId?: SortOrder
    authorityId?: SortOrder
    _count?: RoleAuthoritiesCountOrderByAggregateInput
    _avg?: RoleAuthoritiesAvgOrderByAggregateInput
    _max?: RoleAuthoritiesMaxOrderByAggregateInput
    _min?: RoleAuthoritiesMinOrderByAggregateInput
    _sum?: RoleAuthoritiesSumOrderByAggregateInput
  }

  export type RoleAuthoritiesScalarWhereWithAggregatesInput = {
    AND?: RoleAuthoritiesScalarWhereWithAggregatesInput | RoleAuthoritiesScalarWhereWithAggregatesInput[]
    OR?: RoleAuthoritiesScalarWhereWithAggregatesInput[]
    NOT?: RoleAuthoritiesScalarWhereWithAggregatesInput | RoleAuthoritiesScalarWhereWithAggregatesInput[]
    roleId?: IntWithAggregatesFilter<"RoleAuthorities"> | number
    authorityId?: IntWithAggregatesFilter<"RoleAuthorities"> | number
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: IntFilter<"Customer"> | number
    Cust_name?: StringFilter<"Customer"> | string
    Allowed_User_Count?: StringFilter<"Customer"> | string
    Plan?: StringFilter<"Customer"> | string
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    Cust_name?: SortOrder
    Allowed_User_Count?: SortOrder
    Plan?: SortOrder
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    Cust_name?: StringFilter<"Customer"> | string
    Allowed_User_Count?: StringFilter<"Customer"> | string
    Plan?: StringFilter<"Customer"> | string
  }, "id">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    Cust_name?: SortOrder
    Allowed_User_Count?: SortOrder
    Plan?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Customer"> | number
    Cust_name?: StringWithAggregatesFilter<"Customer"> | string
    Allowed_User_Count?: StringWithAggregatesFilter<"Customer"> | string
    Plan?: StringWithAggregatesFilter<"Customer"> | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ScreenshotsCreateInput = {
    username: string
    time: string
    date?: Date | string | null
    base64: string
    user: UserCreateNestedOneWithoutScreenshotInput
  }

  export type ScreenshotsUncheckedCreateInput = {
    id?: number
    username: string
    time: string
    date?: Date | string | null
    base64: string
    userId: number
  }

  export type ScreenshotsUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    base64?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutScreenshotNestedInput
  }

  export type ScreenshotsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    base64?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ScreenshotsCreateManyInput = {
    id?: number
    username: string
    time: string
    date?: Date | string | null
    base64: string
    userId: number
  }

  export type ScreenshotsUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    base64?: StringFieldUpdateOperationsInput | string
  }

  export type ScreenshotsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    base64?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfilePictureCreateInput = {
    base64: string
    user?: UserCreateNestedOneWithoutProfilePictureInput
  }

  export type ProfilePictureUncheckedCreateInput = {
    id?: number
    base64: string
    user?: UserUncheckedCreateNestedOneWithoutProfilePictureInput
  }

  export type ProfilePictureUpdateInput = {
    base64?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutProfilePictureNestedInput
  }

  export type ProfilePictureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    base64?: StringFieldUpdateOperationsInput | string
    user?: UserUncheckedUpdateOneWithoutProfilePictureNestedInput
  }

  export type ProfilePictureCreateManyInput = {
    id?: number
    base64: string
  }

  export type ProfilePictureUpdateManyMutationInput = {
    base64?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilePictureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    base64?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectCreateInput = {
    name: string
    description?: string | null
    startDate?: string | null
    endDate?: string | null
    status?: string | null
    field5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskCreateNestedManyWithoutProjectInput
    sprints?: SprintCreateNestedManyWithoutProjectInput
    users?: UserCreateNestedManyWithoutProjectsInput
    userProjects?: UserProjectsCreateNestedManyWithoutProjectInput
    user: UserCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    projectManager: number
    startDate?: string | null
    endDate?: string | null
    status?: string | null
    field5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintUncheckedCreateNestedManyWithoutProjectInput
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    sprints?: SprintUpdateManyWithoutProjectNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    userProjects?: UserProjectsUpdateManyWithoutProjectNestedInput
    user?: UserUpdateOneRequiredWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectManager?: IntFieldUpdateOperationsInput | number
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintUncheckedUpdateManyWithoutProjectNestedInput
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    projectManager: number
    startDate?: string | null
    endDate?: string | null
    status?: string | null
    field5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectManager?: IntFieldUpdateOperationsInput | number
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintCreateInput = {
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    project: ProjectCreateNestedOneWithoutSprintsInput
    tasks?: TaskCreateNestedManyWithoutSprintInput
  }

  export type SprintUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    projectId: number
    tasks?: TaskUncheckedCreateNestedManyWithoutSprintInput
  }

  export type SprintUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutSprintsNestedInput
    tasks?: TaskUpdateManyWithoutSprintNestedInput
  }

  export type SprintUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: IntFieldUpdateOperationsInput | number
    tasks?: TaskUncheckedUpdateManyWithoutSprintNestedInput
  }

  export type SprintCreateManyInput = {
    id?: number
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    projectId: number
  }

  export type SprintUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SprintUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: IntFieldUpdateOperationsInput | number
  }

  export type TaskCreateInput = {
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    project: ProjectCreateNestedOneWithoutTasksInput
    author: UserCreateNestedOneWithoutAuthoredTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutTaskInput
    attachments?: AttachmentCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskCreateNestedManyWithoutTaskInput
    sprint?: SprintCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    projectId: number
    authorUserId: number
    assignedUserId?: number | null
    sprintId?: number | null
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    author?: UserUpdateOneRequiredWithoutAuthoredTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUpdateManyWithoutTaskNestedInput
    sprint?: SprintUpdateOneWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: IntFieldUpdateOperationsInput | number
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    sprintId?: NullableIntFieldUpdateOperationsInput | number | null
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    projectId: number
    authorUserId: number
    assignedUserId?: number | null
    sprintId?: number | null
  }

  export type TaskUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: IntFieldUpdateOperationsInput | number
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    sprintId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubtaskCreateInput = {
    title: string
    description?: string | null
    status?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    attachments?: AttachmentCreateNestedManyWithoutSubTaskInput
    assignee?: UserCreateNestedOneWithoutAssignedSubTasksInput
    author: UserCreateNestedOneWithoutAuthoredSubTasksInput
    task: TaskCreateNestedOneWithoutSubTasksInput
    comments?: CommentCreateNestedManyWithoutSubtaskInput
  }

  export type SubtaskUncheckedCreateInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    taskId: number
    startDate?: Date | string | null
    dueDate?: Date | string | null
    authorUserId: number
    assignedUserId?: number | null
    attachments?: AttachmentUncheckedCreateNestedManyWithoutSubTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutSubtaskInput
  }

  export type SubtaskUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attachments?: AttachmentUpdateManyWithoutSubTaskNestedInput
    assignee?: UserUpdateOneWithoutAssignedSubTasksNestedInput
    author?: UserUpdateOneRequiredWithoutAuthoredSubTasksNestedInput
    task?: TaskUpdateOneRequiredWithoutSubTasksNestedInput
    comments?: CommentUpdateManyWithoutSubtaskNestedInput
  }

  export type SubtaskUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    attachments?: AttachmentUncheckedUpdateManyWithoutSubTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSubtaskNestedInput
  }

  export type SubtaskCreateManyInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    taskId: number
    startDate?: Date | string | null
    dueDate?: Date | string | null
    authorUserId: number
    assignedUserId?: number | null
  }

  export type SubtaskUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubtaskUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TaskHistoryCreateInput = {
    startDate: Date | string
    endDate: Date | string
    sprint: string
    task: TaskCreateNestedOneWithoutTaskHistoryInput
    user: UserCreateNestedOneWithoutTaskHistoryInput
  }

  export type TaskHistoryUncheckedCreateInput = {
    id?: number
    taskId: number
    userId: number
    startDate: Date | string
    endDate: Date | string
    sprint: string
  }

  export type TaskHistoryUpdateInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sprint?: StringFieldUpdateOperationsInput | string
    task?: TaskUpdateOneRequiredWithoutTaskHistoryNestedInput
    user?: UserUpdateOneRequiredWithoutTaskHistoryNestedInput
  }

  export type TaskHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sprint?: StringFieldUpdateOperationsInput | string
  }

  export type TaskHistoryCreateManyInput = {
    id?: number
    taskId: number
    userId: number
    startDate: Date | string
    endDate: Date | string
    sprint: string
  }

  export type TaskHistoryUpdateManyMutationInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sprint?: StringFieldUpdateOperationsInput | string
  }

  export type TaskHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sprint?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    text: string
    username: string
    commentTime: Date | string
    task?: TaskCreateNestedOneWithoutCommentsInput
    subtask?: SubtaskCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    text: string
    taskId: number
    userId: number
    username: string
    commentTime: Date | string
    subtaskId?: number | null
  }

  export type CommentUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    commentTime?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneWithoutCommentsNestedInput
    subtask?: SubtaskUpdateOneWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    taskId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    commentTime?: DateTimeFieldUpdateOperationsInput | Date | string
    subtaskId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentCreateManyInput = {
    id?: number
    text: string
    taskId: number
    userId: number
    username: string
    commentTime: Date | string
    subtaskId?: number | null
  }

  export type CommentUpdateManyMutationInput = {
    text?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    commentTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    taskId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    commentTime?: DateTimeFieldUpdateOperationsInput | Date | string
    subtaskId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TaskAssignmentCreateInput = {
    user: UserCreateNestedOneWithoutTaskAssignmentInput
    task: TaskCreateNestedOneWithoutTaskAssignmentsInput
  }

  export type TaskAssignmentUncheckedCreateInput = {
    id?: number
    userId: number
    taskId: number
  }

  export type TaskAssignmentUpdateInput = {
    user?: UserUpdateOneRequiredWithoutTaskAssignmentNestedInput
    task?: TaskUpdateOneRequiredWithoutTaskAssignmentsNestedInput
  }

  export type TaskAssignmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
  }

  export type TaskAssignmentCreateManyInput = {
    id?: number
    userId: number
    taskId: number
  }

  export type TaskAssignmentUpdateManyMutationInput = {

  }

  export type TaskAssignmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
  }

  export type AttachmentCreateInput = {
    fileURL: string
    fileName?: string | null
    task?: TaskCreateNestedOneWithoutAttachmentsInput
    subTask?: SubtaskCreateNestedOneWithoutAttachmentsInput
    uploadedBy: UserCreateNestedOneWithoutAttachmentsInput
  }

  export type AttachmentUncheckedCreateInput = {
    id?: number
    fileURL: string
    fileName?: string | null
    taskId?: number | null
    subTaskId?: number | null
    uploadedById: number
  }

  export type AttachmentUpdateInput = {
    fileURL?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    task?: TaskUpdateOneWithoutAttachmentsNestedInput
    subTask?: SubtaskUpdateOneWithoutAttachmentsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type AttachmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileURL?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableIntFieldUpdateOperationsInput | number | null
    subTaskId?: NullableIntFieldUpdateOperationsInput | number | null
    uploadedById?: IntFieldUpdateOperationsInput | number
  }

  export type AttachmentCreateManyInput = {
    id?: number
    fileURL: string
    fileName?: string | null
    taskId?: number | null
    subTaskId?: number | null
    uploadedById: number
  }

  export type AttachmentUpdateManyMutationInput = {
    fileURL?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttachmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileURL?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableIntFieldUpdateOperationsInput | number | null
    subTaskId?: NullableIntFieldUpdateOperationsInput | number | null
    uploadedById?: IntFieldUpdateOperationsInput | number
  }

  export type UserProjectsCreateInput = {
    role: string
    user: UserCreateNestedOneWithoutUserProjectsInput
    project: ProjectCreateNestedOneWithoutUserProjectsInput
  }

  export type UserProjectsUncheckedCreateInput = {
    userId: number
    projectId: number
    role: string
  }

  export type UserProjectsUpdateInput = {
    role?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutUserProjectsNestedInput
    project?: ProjectUpdateOneRequiredWithoutUserProjectsNestedInput
  }

  export type UserProjectsUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserProjectsCreateManyInput = {
    userId: number
    projectId: number
    role: string
  }

  export type UserProjectsUpdateManyMutationInput = {
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserProjectsUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type TeamCreateInput = {
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserCreateNestedManyWithoutTeamsInput
    teamMembers?: TeamMembersCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutTeamsInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUpdateManyWithoutTeamsNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutTeamsNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMembersCreateInput = {
    role: string
    user: UserCreateNestedOneWithoutTeamMembersInput
    team: TeamCreateNestedOneWithoutTeamMembersInput
  }

  export type TeamMembersUncheckedCreateInput = {
    userId: number
    teamId: number
    role: string
  }

  export type TeamMembersUpdateInput = {
    role?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTeamMembersNestedInput
    team?: TeamUpdateOneRequiredWithoutTeamMembersNestedInput
  }

  export type TeamMembersUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type TeamMembersCreateManyInput = {
    userId: number
    teamId: number
    role: string
  }

  export type TeamMembersUpdateManyMutationInput = {
    role?: StringFieldUpdateOperationsInput | string
  }

  export type TeamMembersUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type RoleCreateInput = {
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutRolesInput
    authorities?: AuthorityCreateNestedManyWithoutRolesInput
    roleAuthorities?: RoleAuthoritiesCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutRolesInput
    authorities?: AuthorityUncheckedCreateNestedManyWithoutRolesInput
    roleAuthorities?: RoleAuthoritiesUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutRolesNestedInput
    authorities?: AuthorityUpdateManyWithoutRolesNestedInput
    roleAuthorities?: RoleAuthoritiesUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutRolesNestedInput
    authorities?: AuthorityUncheckedUpdateManyWithoutRolesNestedInput
    roleAuthorities?: RoleAuthoritiesUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: number
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthorityCreateInput = {
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roles?: RoleCreateNestedManyWithoutAuthoritiesInput
    roleAuthorities?: RoleAuthoritiesCreateNestedManyWithoutAuthorityInput
  }

  export type AuthorityUncheckedCreateInput = {
    id?: number
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roles?: RoleUncheckedCreateNestedManyWithoutAuthoritiesInput
    roleAuthorities?: RoleAuthoritiesUncheckedCreateNestedManyWithoutAuthorityInput
  }

  export type AuthorityUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: RoleUpdateManyWithoutAuthoritiesNestedInput
    roleAuthorities?: RoleAuthoritiesUpdateManyWithoutAuthorityNestedInput
  }

  export type AuthorityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: RoleUncheckedUpdateManyWithoutAuthoritiesNestedInput
    roleAuthorities?: RoleAuthoritiesUncheckedUpdateManyWithoutAuthorityNestedInput
  }

  export type AuthorityCreateManyInput = {
    id?: number
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuthorityUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthorityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleAuthoritiesCreateInput = {
    role: RoleCreateNestedOneWithoutRoleAuthoritiesInput
    authority: AuthorityCreateNestedOneWithoutRoleAuthoritiesInput
  }

  export type RoleAuthoritiesUncheckedCreateInput = {
    roleId: number
    authorityId: number
  }

  export type RoleAuthoritiesUpdateInput = {
    role?: RoleUpdateOneRequiredWithoutRoleAuthoritiesNestedInput
    authority?: AuthorityUpdateOneRequiredWithoutRoleAuthoritiesNestedInput
  }

  export type RoleAuthoritiesUncheckedUpdateInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    authorityId?: IntFieldUpdateOperationsInput | number
  }

  export type RoleAuthoritiesCreateManyInput = {
    roleId: number
    authorityId: number
  }

  export type RoleAuthoritiesUpdateManyMutationInput = {

  }

  export type RoleAuthoritiesUncheckedUpdateManyInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    authorityId?: IntFieldUpdateOperationsInput | number
  }

  export type CustomerCreateInput = {
    Cust_name: string
    Allowed_User_Count: string
    Plan: string
  }

  export type CustomerUncheckedCreateInput = {
    id?: number
    Cust_name: string
    Allowed_User_Count: string
    Plan: string
  }

  export type CustomerUpdateInput = {
    Cust_name?: StringFieldUpdateOperationsInput | string
    Allowed_User_Count?: StringFieldUpdateOperationsInput | string
    Plan?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Cust_name?: StringFieldUpdateOperationsInput | string
    Allowed_User_Count?: StringFieldUpdateOperationsInput | string
    Plan?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerCreateManyInput = {
    id?: number
    Cust_name: string
    Allowed_User_Count: string
    Plan: string
  }

  export type CustomerUpdateManyMutationInput = {
    Cust_name?: StringFieldUpdateOperationsInput | string
    Allowed_User_Count?: StringFieldUpdateOperationsInput | string
    Plan?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Cust_name?: StringFieldUpdateOperationsInput | string
    Allowed_User_Count?: StringFieldUpdateOperationsInput | string
    Plan?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type TeamListRelationFilter = {
    every?: TeamWhereInput
    some?: TeamWhereInput
    none?: TeamWhereInput
  }

  export type RoleListRelationFilter = {
    every?: RoleWhereInput
    some?: RoleWhereInput
    none?: RoleWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type SubtaskListRelationFilter = {
    every?: SubtaskWhereInput
    some?: SubtaskWhereInput
    none?: SubtaskWhereInput
  }

  export type TaskAssignmentListRelationFilter = {
    every?: TaskAssignmentWhereInput
    some?: TaskAssignmentWhereInput
    none?: TaskAssignmentWhereInput
  }

  export type AttachmentListRelationFilter = {
    every?: AttachmentWhereInput
    some?: AttachmentWhereInput
    none?: AttachmentWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type TeamMembersListRelationFilter = {
    every?: TeamMembersWhereInput
    some?: TeamMembersWhereInput
    none?: TeamMembersWhereInput
  }

  export type UserProjectsListRelationFilter = {
    every?: UserProjectsWhereInput
    some?: UserProjectsWhereInput
    none?: UserProjectsWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type TaskHistoryListRelationFilter = {
    every?: TaskHistoryWhereInput
    some?: TaskHistoryWhereInput
    none?: TaskHistoryWhereInput
  }

  export type ScreenshotsListRelationFilter = {
    every?: ScreenshotsWhereInput
    some?: ScreenshotsWhereInput
    none?: ScreenshotsWhereInput
  }

  export type ProjectNullableScalarRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type ProfilePictureNullableScalarRelationFilter = {
    is?: ProfilePictureWhereInput | null
    isNot?: ProfilePictureWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubtaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttachmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamMembersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserProjectsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScreenshotsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    designation?: SortOrder
    phoneNumber?: SortOrder
    profilePictureId?: SortOrder
    resetPasswordOTP?: SortOrder
    otpExpires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportsToId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    userId?: SortOrder
    profilePictureId?: SortOrder
    reportsToId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    designation?: SortOrder
    phoneNumber?: SortOrder
    profilePictureId?: SortOrder
    resetPasswordOTP?: SortOrder
    otpExpires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportsToId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    designation?: SortOrder
    phoneNumber?: SortOrder
    profilePictureId?: SortOrder
    resetPasswordOTP?: SortOrder
    otpExpires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportsToId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    userId?: SortOrder
    profilePictureId?: SortOrder
    reportsToId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ScreenshotsCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    time?: SortOrder
    date?: SortOrder
    base64?: SortOrder
    userId?: SortOrder
  }

  export type ScreenshotsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ScreenshotsMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    time?: SortOrder
    date?: SortOrder
    base64?: SortOrder
    userId?: SortOrder
  }

  export type ScreenshotsMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    time?: SortOrder
    date?: SortOrder
    base64?: SortOrder
    userId?: SortOrder
  }

  export type ScreenshotsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ProfilePictureCountOrderByAggregateInput = {
    id?: SortOrder
    base64?: SortOrder
  }

  export type ProfilePictureAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfilePictureMaxOrderByAggregateInput = {
    id?: SortOrder
    base64?: SortOrder
  }

  export type ProfilePictureMinOrderByAggregateInput = {
    id?: SortOrder
    base64?: SortOrder
  }

  export type ProfilePictureSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SprintListRelationFilter = {
    every?: SprintWhereInput
    some?: SprintWhereInput
    none?: SprintWhereInput
  }

  export type SprintOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    projectManager?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    field5?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    id?: SortOrder
    projectManager?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    projectManager?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    field5?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    projectManager?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    field5?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    id?: SortOrder
    projectManager?: SortOrder
  }

  export type ProjectScalarRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type SprintCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    projectId?: SortOrder
  }

  export type SprintAvgOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
  }

  export type SprintMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    projectId?: SortOrder
  }

  export type SprintMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    projectId?: SortOrder
  }

  export type SprintSumOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
  }

  export type SprintNullableScalarRelationFilter = {
    is?: SprintWhereInput | null
    isNot?: SprintWhereInput | null
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    tags?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    points?: SortOrder
    projectId?: SortOrder
    authorUserId?: SortOrder
    assignedUserId?: SortOrder
    sprintId?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    projectId?: SortOrder
    authorUserId?: SortOrder
    assignedUserId?: SortOrder
    sprintId?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    tags?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    points?: SortOrder
    projectId?: SortOrder
    authorUserId?: SortOrder
    assignedUserId?: SortOrder
    sprintId?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    tags?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    points?: SortOrder
    projectId?: SortOrder
    authorUserId?: SortOrder
    assignedUserId?: SortOrder
    sprintId?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    projectId?: SortOrder
    authorUserId?: SortOrder
    assignedUserId?: SortOrder
    sprintId?: SortOrder
  }

  export type TaskScalarRelationFilter = {
    is?: TaskWhereInput
    isNot?: TaskWhereInput
  }

  export type SubtaskCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    taskId?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    authorUserId?: SortOrder
    assignedUserId?: SortOrder
  }

  export type SubtaskAvgOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    authorUserId?: SortOrder
    assignedUserId?: SortOrder
  }

  export type SubtaskMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    taskId?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    authorUserId?: SortOrder
    assignedUserId?: SortOrder
  }

  export type SubtaskMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    taskId?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    authorUserId?: SortOrder
    assignedUserId?: SortOrder
  }

  export type SubtaskSumOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    authorUserId?: SortOrder
    assignedUserId?: SortOrder
  }

  export type TaskHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    sprint?: SortOrder
  }

  export type TaskHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
  }

  export type TaskHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    sprint?: SortOrder
  }

  export type TaskHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    sprint?: SortOrder
  }

  export type TaskHistorySumOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
  }

  export type TaskNullableScalarRelationFilter = {
    is?: TaskWhereInput | null
    isNot?: TaskWhereInput | null
  }

  export type SubtaskNullableScalarRelationFilter = {
    is?: SubtaskWhereInput | null
    isNot?: SubtaskWhereInput | null
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    commentTime?: SortOrder
    subtaskId?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    subtaskId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    commentTime?: SortOrder
    subtaskId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    commentTime?: SortOrder
    subtaskId?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    userId?: SortOrder
    subtaskId?: SortOrder
  }

  export type TaskAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
  }

  export type TaskAssignmentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
  }

  export type TaskAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
  }

  export type TaskAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
  }

  export type TaskAssignmentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    taskId?: SortOrder
  }

  export type AttachmentCountOrderByAggregateInput = {
    id?: SortOrder
    fileURL?: SortOrder
    fileName?: SortOrder
    taskId?: SortOrder
    subTaskId?: SortOrder
    uploadedById?: SortOrder
  }

  export type AttachmentAvgOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    subTaskId?: SortOrder
    uploadedById?: SortOrder
  }

  export type AttachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    fileURL?: SortOrder
    fileName?: SortOrder
    taskId?: SortOrder
    subTaskId?: SortOrder
    uploadedById?: SortOrder
  }

  export type AttachmentMinOrderByAggregateInput = {
    id?: SortOrder
    fileURL?: SortOrder
    fileName?: SortOrder
    taskId?: SortOrder
    subTaskId?: SortOrder
    uploadedById?: SortOrder
  }

  export type AttachmentSumOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    subTaskId?: SortOrder
    uploadedById?: SortOrder
  }

  export type UserProjectsUserIdProjectIdCompoundUniqueInput = {
    userId: number
    projectId: number
  }

  export type UserProjectsCountOrderByAggregateInput = {
    userId?: SortOrder
    projectId?: SortOrder
    role?: SortOrder
  }

  export type UserProjectsAvgOrderByAggregateInput = {
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type UserProjectsMaxOrderByAggregateInput = {
    userId?: SortOrder
    projectId?: SortOrder
    role?: SortOrder
  }

  export type UserProjectsMinOrderByAggregateInput = {
    userId?: SortOrder
    projectId?: SortOrder
    role?: SortOrder
  }

  export type UserProjectsSumOrderByAggregateInput = {
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeamScalarRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type TeamMembersUserIdTeamIdCompoundUniqueInput = {
    userId: number
    teamId: number
  }

  export type TeamMembersCountOrderByAggregateInput = {
    userId?: SortOrder
    teamId?: SortOrder
    role?: SortOrder
  }

  export type TeamMembersAvgOrderByAggregateInput = {
    userId?: SortOrder
    teamId?: SortOrder
  }

  export type TeamMembersMaxOrderByAggregateInput = {
    userId?: SortOrder
    teamId?: SortOrder
    role?: SortOrder
  }

  export type TeamMembersMinOrderByAggregateInput = {
    userId?: SortOrder
    teamId?: SortOrder
    role?: SortOrder
  }

  export type TeamMembersSumOrderByAggregateInput = {
    userId?: SortOrder
    teamId?: SortOrder
  }

  export type AuthorityListRelationFilter = {
    every?: AuthorityWhereInput
    some?: AuthorityWhereInput
    none?: AuthorityWhereInput
  }

  export type RoleAuthoritiesListRelationFilter = {
    every?: RoleAuthoritiesWhereInput
    some?: RoleAuthoritiesWhereInput
    none?: RoleAuthoritiesWhereInput
  }

  export type AuthorityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleAuthoritiesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AuthorityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuthorityAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AuthorityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuthorityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuthoritySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleScalarRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type AuthorityScalarRelationFilter = {
    is?: AuthorityWhereInput
    isNot?: AuthorityWhereInput
  }

  export type RoleAuthoritiesRoleIdAuthorityIdCompoundUniqueInput = {
    roleId: number
    authorityId: number
  }

  export type RoleAuthoritiesCountOrderByAggregateInput = {
    roleId?: SortOrder
    authorityId?: SortOrder
  }

  export type RoleAuthoritiesAvgOrderByAggregateInput = {
    roleId?: SortOrder
    authorityId?: SortOrder
  }

  export type RoleAuthoritiesMaxOrderByAggregateInput = {
    roleId?: SortOrder
    authorityId?: SortOrder
  }

  export type RoleAuthoritiesMinOrderByAggregateInput = {
    roleId?: SortOrder
    authorityId?: SortOrder
  }

  export type RoleAuthoritiesSumOrderByAggregateInput = {
    roleId?: SortOrder
    authorityId?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    Cust_name?: SortOrder
    Allowed_User_Count?: SortOrder
    Plan?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    Cust_name?: SortOrder
    Allowed_User_Count?: SortOrder
    Plan?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    Cust_name?: SortOrder
    Allowed_User_Count?: SortOrder
    Plan?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProjectCreateNestedManyWithoutUsersInput = {
    create?: XOR<ProjectCreateWithoutUsersInput, ProjectUncheckedCreateWithoutUsersInput> | ProjectCreateWithoutUsersInput[] | ProjectUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUsersInput | ProjectCreateOrConnectWithoutUsersInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type TeamCreateNestedManyWithoutMembersInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput> | TeamCreateWithoutMembersInput[] | TeamUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput | TeamCreateOrConnectWithoutMembersInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type RoleCreateNestedManyWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput> | RoleCreateWithoutUsersInput[] | RoleUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput | RoleCreateOrConnectWithoutUsersInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutAuthorInput = {
    create?: XOR<TaskCreateWithoutAuthorInput, TaskUncheckedCreateWithoutAuthorInput> | TaskCreateWithoutAuthorInput[] | TaskUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAuthorInput | TaskCreateOrConnectWithoutAuthorInput[]
    createMany?: TaskCreateManyAuthorInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type SubtaskCreateNestedManyWithoutAuthorInput = {
    create?: XOR<SubtaskCreateWithoutAuthorInput, SubtaskUncheckedCreateWithoutAuthorInput> | SubtaskCreateWithoutAuthorInput[] | SubtaskUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: SubtaskCreateOrConnectWithoutAuthorInput | SubtaskCreateOrConnectWithoutAuthorInput[]
    createMany?: SubtaskCreateManyAuthorInputEnvelope
    connect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
  }

  export type SubtaskCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<SubtaskCreateWithoutAssigneeInput, SubtaskUncheckedCreateWithoutAssigneeInput> | SubtaskCreateWithoutAssigneeInput[] | SubtaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: SubtaskCreateOrConnectWithoutAssigneeInput | SubtaskCreateOrConnectWithoutAssigneeInput[]
    createMany?: SubtaskCreateManyAssigneeInputEnvelope
    connect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
  }

  export type TaskAssignmentCreateNestedManyWithoutUserInput = {
    create?: XOR<TaskAssignmentCreateWithoutUserInput, TaskAssignmentUncheckedCreateWithoutUserInput> | TaskAssignmentCreateWithoutUserInput[] | TaskAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutUserInput | TaskAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: TaskAssignmentCreateManyUserInputEnvelope
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
  }

  export type AttachmentCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<AttachmentCreateWithoutUploadedByInput, AttachmentUncheckedCreateWithoutUploadedByInput> | AttachmentCreateWithoutUploadedByInput[] | AttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutUploadedByInput | AttachmentCreateOrConnectWithoutUploadedByInput[]
    createMany?: AttachmentCreateManyUploadedByInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type TeamMembersCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamMembersCreateWithoutUserInput, TeamMembersUncheckedCreateWithoutUserInput> | TeamMembersCreateWithoutUserInput[] | TeamMembersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutUserInput | TeamMembersCreateOrConnectWithoutUserInput[]
    createMany?: TeamMembersCreateManyUserInputEnvelope
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
  }

  export type UserProjectsCreateNestedManyWithoutUserInput = {
    create?: XOR<UserProjectsCreateWithoutUserInput, UserProjectsUncheckedCreateWithoutUserInput> | UserProjectsCreateWithoutUserInput[] | UserProjectsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProjectsCreateOrConnectWithoutUserInput | UserProjectsCreateOrConnectWithoutUserInput[]
    createMany?: UserProjectsCreateManyUserInputEnvelope
    connect?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutReportsInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutReportsToInput = {
    create?: XOR<UserCreateWithoutReportsToInput, UserUncheckedCreateWithoutReportsToInput> | UserCreateWithoutReportsToInput[] | UserUncheckedCreateWithoutReportsToInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReportsToInput | UserCreateOrConnectWithoutReportsToInput[]
    createMany?: UserCreateManyReportsToInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TaskHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<TaskHistoryCreateWithoutUserInput, TaskHistoryUncheckedCreateWithoutUserInput> | TaskHistoryCreateWithoutUserInput[] | TaskHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskHistoryCreateOrConnectWithoutUserInput | TaskHistoryCreateOrConnectWithoutUserInput[]
    createMany?: TaskHistoryCreateManyUserInputEnvelope
    connect?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
  }

  export type ScreenshotsCreateNestedManyWithoutUserInput = {
    create?: XOR<ScreenshotsCreateWithoutUserInput, ScreenshotsUncheckedCreateWithoutUserInput> | ScreenshotsCreateWithoutUserInput[] | ScreenshotsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScreenshotsCreateOrConnectWithoutUserInput | ScreenshotsCreateOrConnectWithoutUserInput[]
    createMany?: ScreenshotsCreateManyUserInputEnvelope
    connect?: ScreenshotsWhereUniqueInput | ScreenshotsWhereUniqueInput[]
  }

  export type ProjectCreateNestedOneWithoutUserInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProfilePictureCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutUserInput
    connect?: ProfilePictureWhereUniqueInput
  }

  export type ProjectUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ProjectCreateWithoutUsersInput, ProjectUncheckedCreateWithoutUsersInput> | ProjectCreateWithoutUsersInput[] | ProjectUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUsersInput | ProjectCreateOrConnectWithoutUsersInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type TeamUncheckedCreateNestedManyWithoutMembersInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput> | TeamCreateWithoutMembersInput[] | TeamUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput | TeamCreateOrConnectWithoutMembersInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type RoleUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput> | RoleCreateWithoutUsersInput[] | RoleUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput | RoleCreateOrConnectWithoutUsersInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<TaskCreateWithoutAuthorInput, TaskUncheckedCreateWithoutAuthorInput> | TaskCreateWithoutAuthorInput[] | TaskUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAuthorInput | TaskCreateOrConnectWithoutAuthorInput[]
    createMany?: TaskCreateManyAuthorInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type SubtaskUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<SubtaskCreateWithoutAuthorInput, SubtaskUncheckedCreateWithoutAuthorInput> | SubtaskCreateWithoutAuthorInput[] | SubtaskUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: SubtaskCreateOrConnectWithoutAuthorInput | SubtaskCreateOrConnectWithoutAuthorInput[]
    createMany?: SubtaskCreateManyAuthorInputEnvelope
    connect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
  }

  export type SubtaskUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<SubtaskCreateWithoutAssigneeInput, SubtaskUncheckedCreateWithoutAssigneeInput> | SubtaskCreateWithoutAssigneeInput[] | SubtaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: SubtaskCreateOrConnectWithoutAssigneeInput | SubtaskCreateOrConnectWithoutAssigneeInput[]
    createMany?: SubtaskCreateManyAssigneeInputEnvelope
    connect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
  }

  export type TaskAssignmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TaskAssignmentCreateWithoutUserInput, TaskAssignmentUncheckedCreateWithoutUserInput> | TaskAssignmentCreateWithoutUserInput[] | TaskAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutUserInput | TaskAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: TaskAssignmentCreateManyUserInputEnvelope
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
  }

  export type AttachmentUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<AttachmentCreateWithoutUploadedByInput, AttachmentUncheckedCreateWithoutUploadedByInput> | AttachmentCreateWithoutUploadedByInput[] | AttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutUploadedByInput | AttachmentCreateOrConnectWithoutUploadedByInput[]
    createMany?: AttachmentCreateManyUploadedByInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type TeamMembersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamMembersCreateWithoutUserInput, TeamMembersUncheckedCreateWithoutUserInput> | TeamMembersCreateWithoutUserInput[] | TeamMembersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutUserInput | TeamMembersCreateOrConnectWithoutUserInput[]
    createMany?: TeamMembersCreateManyUserInputEnvelope
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
  }

  export type UserProjectsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserProjectsCreateWithoutUserInput, UserProjectsUncheckedCreateWithoutUserInput> | UserProjectsCreateWithoutUserInput[] | UserProjectsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProjectsCreateOrConnectWithoutUserInput | UserProjectsCreateOrConnectWithoutUserInput[]
    createMany?: UserProjectsCreateManyUserInputEnvelope
    connect?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutReportsToInput = {
    create?: XOR<UserCreateWithoutReportsToInput, UserUncheckedCreateWithoutReportsToInput> | UserCreateWithoutReportsToInput[] | UserUncheckedCreateWithoutReportsToInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReportsToInput | UserCreateOrConnectWithoutReportsToInput[]
    createMany?: UserCreateManyReportsToInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TaskHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TaskHistoryCreateWithoutUserInput, TaskHistoryUncheckedCreateWithoutUserInput> | TaskHistoryCreateWithoutUserInput[] | TaskHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskHistoryCreateOrConnectWithoutUserInput | TaskHistoryCreateOrConnectWithoutUserInput[]
    createMany?: TaskHistoryCreateManyUserInputEnvelope
    connect?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
  }

  export type ScreenshotsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ScreenshotsCreateWithoutUserInput, ScreenshotsUncheckedCreateWithoutUserInput> | ScreenshotsCreateWithoutUserInput[] | ScreenshotsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScreenshotsCreateOrConnectWithoutUserInput | ScreenshotsCreateOrConnectWithoutUserInput[]
    createMany?: ScreenshotsCreateManyUserInputEnvelope
    connect?: ScreenshotsWhereUniqueInput | ScreenshotsWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput
    connect?: ProjectWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProjectUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ProjectCreateWithoutUsersInput, ProjectUncheckedCreateWithoutUsersInput> | ProjectCreateWithoutUsersInput[] | ProjectUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUsersInput | ProjectCreateOrConnectWithoutUsersInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutUsersInput | ProjectUpsertWithWhereUniqueWithoutUsersInput[]
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutUsersInput | ProjectUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutUsersInput | ProjectUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type TeamUpdateManyWithoutMembersNestedInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput> | TeamCreateWithoutMembersInput[] | TeamUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput | TeamCreateOrConnectWithoutMembersInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutMembersInput | TeamUpsertWithWhereUniqueWithoutMembersInput[]
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutMembersInput | TeamUpdateWithWhereUniqueWithoutMembersInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutMembersInput | TeamUpdateManyWithWhereWithoutMembersInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type RoleUpdateManyWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput> | RoleCreateWithoutUsersInput[] | RoleUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput | RoleCreateOrConnectWithoutUsersInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutUsersInput | RoleUpsertWithWhereUniqueWithoutUsersInput[]
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutUsersInput | RoleUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutUsersInput | RoleUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<TaskCreateWithoutAuthorInput, TaskUncheckedCreateWithoutAuthorInput> | TaskCreateWithoutAuthorInput[] | TaskUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAuthorInput | TaskCreateOrConnectWithoutAuthorInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAuthorInput | TaskUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: TaskCreateManyAuthorInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAuthorInput | TaskUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAuthorInput | TaskUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAssigneeInput | TaskUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAssigneeInput | TaskUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAssigneeInput | TaskUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type SubtaskUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<SubtaskCreateWithoutAuthorInput, SubtaskUncheckedCreateWithoutAuthorInput> | SubtaskCreateWithoutAuthorInput[] | SubtaskUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: SubtaskCreateOrConnectWithoutAuthorInput | SubtaskCreateOrConnectWithoutAuthorInput[]
    upsert?: SubtaskUpsertWithWhereUniqueWithoutAuthorInput | SubtaskUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: SubtaskCreateManyAuthorInputEnvelope
    set?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    disconnect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    delete?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    connect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    update?: SubtaskUpdateWithWhereUniqueWithoutAuthorInput | SubtaskUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: SubtaskUpdateManyWithWhereWithoutAuthorInput | SubtaskUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: SubtaskScalarWhereInput | SubtaskScalarWhereInput[]
  }

  export type SubtaskUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<SubtaskCreateWithoutAssigneeInput, SubtaskUncheckedCreateWithoutAssigneeInput> | SubtaskCreateWithoutAssigneeInput[] | SubtaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: SubtaskCreateOrConnectWithoutAssigneeInput | SubtaskCreateOrConnectWithoutAssigneeInput[]
    upsert?: SubtaskUpsertWithWhereUniqueWithoutAssigneeInput | SubtaskUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: SubtaskCreateManyAssigneeInputEnvelope
    set?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    disconnect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    delete?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    connect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    update?: SubtaskUpdateWithWhereUniqueWithoutAssigneeInput | SubtaskUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: SubtaskUpdateManyWithWhereWithoutAssigneeInput | SubtaskUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: SubtaskScalarWhereInput | SubtaskScalarWhereInput[]
  }

  export type TaskAssignmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<TaskAssignmentCreateWithoutUserInput, TaskAssignmentUncheckedCreateWithoutUserInput> | TaskAssignmentCreateWithoutUserInput[] | TaskAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutUserInput | TaskAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: TaskAssignmentUpsertWithWhereUniqueWithoutUserInput | TaskAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TaskAssignmentCreateManyUserInputEnvelope
    set?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    disconnect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    delete?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    update?: TaskAssignmentUpdateWithWhereUniqueWithoutUserInput | TaskAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TaskAssignmentUpdateManyWithWhereWithoutUserInput | TaskAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TaskAssignmentScalarWhereInput | TaskAssignmentScalarWhereInput[]
  }

  export type AttachmentUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<AttachmentCreateWithoutUploadedByInput, AttachmentUncheckedCreateWithoutUploadedByInput> | AttachmentCreateWithoutUploadedByInput[] | AttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutUploadedByInput | AttachmentCreateOrConnectWithoutUploadedByInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutUploadedByInput | AttachmentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: AttachmentCreateManyUploadedByInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutUploadedByInput | AttachmentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutUploadedByInput | AttachmentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type TeamMembersUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamMembersCreateWithoutUserInput, TeamMembersUncheckedCreateWithoutUserInput> | TeamMembersCreateWithoutUserInput[] | TeamMembersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutUserInput | TeamMembersCreateOrConnectWithoutUserInput[]
    upsert?: TeamMembersUpsertWithWhereUniqueWithoutUserInput | TeamMembersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamMembersCreateManyUserInputEnvelope
    set?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    disconnect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    delete?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    update?: TeamMembersUpdateWithWhereUniqueWithoutUserInput | TeamMembersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamMembersUpdateManyWithWhereWithoutUserInput | TeamMembersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamMembersScalarWhereInput | TeamMembersScalarWhereInput[]
  }

  export type UserProjectsUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserProjectsCreateWithoutUserInput, UserProjectsUncheckedCreateWithoutUserInput> | UserProjectsCreateWithoutUserInput[] | UserProjectsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProjectsCreateOrConnectWithoutUserInput | UserProjectsCreateOrConnectWithoutUserInput[]
    upsert?: UserProjectsUpsertWithWhereUniqueWithoutUserInput | UserProjectsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserProjectsCreateManyUserInputEnvelope
    set?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    disconnect?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    delete?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    connect?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    update?: UserProjectsUpdateWithWhereUniqueWithoutUserInput | UserProjectsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserProjectsUpdateManyWithWhereWithoutUserInput | UserProjectsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserProjectsScalarWhereInput | UserProjectsScalarWhereInput[]
  }

  export type UserUpdateOneWithoutReportsNestedInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    upsert?: UserUpsertWithoutReportsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportsInput, UserUpdateWithoutReportsInput>, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateManyWithoutReportsToNestedInput = {
    create?: XOR<UserCreateWithoutReportsToInput, UserUncheckedCreateWithoutReportsToInput> | UserCreateWithoutReportsToInput[] | UserUncheckedCreateWithoutReportsToInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReportsToInput | UserCreateOrConnectWithoutReportsToInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReportsToInput | UserUpsertWithWhereUniqueWithoutReportsToInput[]
    createMany?: UserCreateManyReportsToInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReportsToInput | UserUpdateWithWhereUniqueWithoutReportsToInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReportsToInput | UserUpdateManyWithWhereWithoutReportsToInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TaskHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<TaskHistoryCreateWithoutUserInput, TaskHistoryUncheckedCreateWithoutUserInput> | TaskHistoryCreateWithoutUserInput[] | TaskHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskHistoryCreateOrConnectWithoutUserInput | TaskHistoryCreateOrConnectWithoutUserInput[]
    upsert?: TaskHistoryUpsertWithWhereUniqueWithoutUserInput | TaskHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TaskHistoryCreateManyUserInputEnvelope
    set?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    disconnect?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    delete?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    connect?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    update?: TaskHistoryUpdateWithWhereUniqueWithoutUserInput | TaskHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TaskHistoryUpdateManyWithWhereWithoutUserInput | TaskHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TaskHistoryScalarWhereInput | TaskHistoryScalarWhereInput[]
  }

  export type ScreenshotsUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScreenshotsCreateWithoutUserInput, ScreenshotsUncheckedCreateWithoutUserInput> | ScreenshotsCreateWithoutUserInput[] | ScreenshotsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScreenshotsCreateOrConnectWithoutUserInput | ScreenshotsCreateOrConnectWithoutUserInput[]
    upsert?: ScreenshotsUpsertWithWhereUniqueWithoutUserInput | ScreenshotsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScreenshotsCreateManyUserInputEnvelope
    set?: ScreenshotsWhereUniqueInput | ScreenshotsWhereUniqueInput[]
    disconnect?: ScreenshotsWhereUniqueInput | ScreenshotsWhereUniqueInput[]
    delete?: ScreenshotsWhereUniqueInput | ScreenshotsWhereUniqueInput[]
    connect?: ScreenshotsWhereUniqueInput | ScreenshotsWhereUniqueInput[]
    update?: ScreenshotsUpdateWithWhereUniqueWithoutUserInput | ScreenshotsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScreenshotsUpdateManyWithWhereWithoutUserInput | ScreenshotsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScreenshotsScalarWhereInput | ScreenshotsScalarWhereInput[]
  }

  export type ProjectUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput
    upsert?: ProjectUpsertWithoutUserInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutUserInput, ProjectUpdateWithoutUserInput>, ProjectUncheckedUpdateWithoutUserInput>
  }

  export type ProfilePictureUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutUserInput
    upsert?: ProfilePictureUpsertWithoutUserInput
    disconnect?: ProfilePictureWhereInput | boolean
    delete?: ProfilePictureWhereInput | boolean
    connect?: ProfilePictureWhereUniqueInput
    update?: XOR<XOR<ProfilePictureUpdateToOneWithWhereWithoutUserInput, ProfilePictureUpdateWithoutUserInput>, ProfilePictureUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ProjectCreateWithoutUsersInput, ProjectUncheckedCreateWithoutUsersInput> | ProjectCreateWithoutUsersInput[] | ProjectUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUsersInput | ProjectCreateOrConnectWithoutUsersInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutUsersInput | ProjectUpsertWithWhereUniqueWithoutUsersInput[]
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutUsersInput | ProjectUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutUsersInput | ProjectUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type TeamUncheckedUpdateManyWithoutMembersNestedInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput> | TeamCreateWithoutMembersInput[] | TeamUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput | TeamCreateOrConnectWithoutMembersInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutMembersInput | TeamUpsertWithWhereUniqueWithoutMembersInput[]
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutMembersInput | TeamUpdateWithWhereUniqueWithoutMembersInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutMembersInput | TeamUpdateManyWithWhereWithoutMembersInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type RoleUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput> | RoleCreateWithoutUsersInput[] | RoleUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput | RoleCreateOrConnectWithoutUsersInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutUsersInput | RoleUpsertWithWhereUniqueWithoutUsersInput[]
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutUsersInput | RoleUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutUsersInput | RoleUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<TaskCreateWithoutAuthorInput, TaskUncheckedCreateWithoutAuthorInput> | TaskCreateWithoutAuthorInput[] | TaskUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAuthorInput | TaskCreateOrConnectWithoutAuthorInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAuthorInput | TaskUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: TaskCreateManyAuthorInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAuthorInput | TaskUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAuthorInput | TaskUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAssigneeInput | TaskUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAssigneeInput | TaskUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAssigneeInput | TaskUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type SubtaskUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<SubtaskCreateWithoutAuthorInput, SubtaskUncheckedCreateWithoutAuthorInput> | SubtaskCreateWithoutAuthorInput[] | SubtaskUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: SubtaskCreateOrConnectWithoutAuthorInput | SubtaskCreateOrConnectWithoutAuthorInput[]
    upsert?: SubtaskUpsertWithWhereUniqueWithoutAuthorInput | SubtaskUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: SubtaskCreateManyAuthorInputEnvelope
    set?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    disconnect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    delete?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    connect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    update?: SubtaskUpdateWithWhereUniqueWithoutAuthorInput | SubtaskUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: SubtaskUpdateManyWithWhereWithoutAuthorInput | SubtaskUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: SubtaskScalarWhereInput | SubtaskScalarWhereInput[]
  }

  export type SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<SubtaskCreateWithoutAssigneeInput, SubtaskUncheckedCreateWithoutAssigneeInput> | SubtaskCreateWithoutAssigneeInput[] | SubtaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: SubtaskCreateOrConnectWithoutAssigneeInput | SubtaskCreateOrConnectWithoutAssigneeInput[]
    upsert?: SubtaskUpsertWithWhereUniqueWithoutAssigneeInput | SubtaskUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: SubtaskCreateManyAssigneeInputEnvelope
    set?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    disconnect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    delete?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    connect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    update?: SubtaskUpdateWithWhereUniqueWithoutAssigneeInput | SubtaskUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: SubtaskUpdateManyWithWhereWithoutAssigneeInput | SubtaskUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: SubtaskScalarWhereInput | SubtaskScalarWhereInput[]
  }

  export type TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TaskAssignmentCreateWithoutUserInput, TaskAssignmentUncheckedCreateWithoutUserInput> | TaskAssignmentCreateWithoutUserInput[] | TaskAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutUserInput | TaskAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: TaskAssignmentUpsertWithWhereUniqueWithoutUserInput | TaskAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TaskAssignmentCreateManyUserInputEnvelope
    set?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    disconnect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    delete?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    update?: TaskAssignmentUpdateWithWhereUniqueWithoutUserInput | TaskAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TaskAssignmentUpdateManyWithWhereWithoutUserInput | TaskAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TaskAssignmentScalarWhereInput | TaskAssignmentScalarWhereInput[]
  }

  export type AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<AttachmentCreateWithoutUploadedByInput, AttachmentUncheckedCreateWithoutUploadedByInput> | AttachmentCreateWithoutUploadedByInput[] | AttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutUploadedByInput | AttachmentCreateOrConnectWithoutUploadedByInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutUploadedByInput | AttachmentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: AttachmentCreateManyUploadedByInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutUploadedByInput | AttachmentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutUploadedByInput | AttachmentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type TeamMembersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamMembersCreateWithoutUserInput, TeamMembersUncheckedCreateWithoutUserInput> | TeamMembersCreateWithoutUserInput[] | TeamMembersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutUserInput | TeamMembersCreateOrConnectWithoutUserInput[]
    upsert?: TeamMembersUpsertWithWhereUniqueWithoutUserInput | TeamMembersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamMembersCreateManyUserInputEnvelope
    set?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    disconnect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    delete?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    update?: TeamMembersUpdateWithWhereUniqueWithoutUserInput | TeamMembersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamMembersUpdateManyWithWhereWithoutUserInput | TeamMembersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamMembersScalarWhereInput | TeamMembersScalarWhereInput[]
  }

  export type UserProjectsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserProjectsCreateWithoutUserInput, UserProjectsUncheckedCreateWithoutUserInput> | UserProjectsCreateWithoutUserInput[] | UserProjectsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserProjectsCreateOrConnectWithoutUserInput | UserProjectsCreateOrConnectWithoutUserInput[]
    upsert?: UserProjectsUpsertWithWhereUniqueWithoutUserInput | UserProjectsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserProjectsCreateManyUserInputEnvelope
    set?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    disconnect?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    delete?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    connect?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    update?: UserProjectsUpdateWithWhereUniqueWithoutUserInput | UserProjectsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserProjectsUpdateManyWithWhereWithoutUserInput | UserProjectsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserProjectsScalarWhereInput | UserProjectsScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutReportsToNestedInput = {
    create?: XOR<UserCreateWithoutReportsToInput, UserUncheckedCreateWithoutReportsToInput> | UserCreateWithoutReportsToInput[] | UserUncheckedCreateWithoutReportsToInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReportsToInput | UserCreateOrConnectWithoutReportsToInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReportsToInput | UserUpsertWithWhereUniqueWithoutReportsToInput[]
    createMany?: UserCreateManyReportsToInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReportsToInput | UserUpdateWithWhereUniqueWithoutReportsToInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReportsToInput | UserUpdateManyWithWhereWithoutReportsToInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TaskHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TaskHistoryCreateWithoutUserInput, TaskHistoryUncheckedCreateWithoutUserInput> | TaskHistoryCreateWithoutUserInput[] | TaskHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TaskHistoryCreateOrConnectWithoutUserInput | TaskHistoryCreateOrConnectWithoutUserInput[]
    upsert?: TaskHistoryUpsertWithWhereUniqueWithoutUserInput | TaskHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TaskHistoryCreateManyUserInputEnvelope
    set?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    disconnect?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    delete?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    connect?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    update?: TaskHistoryUpdateWithWhereUniqueWithoutUserInput | TaskHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TaskHistoryUpdateManyWithWhereWithoutUserInput | TaskHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TaskHistoryScalarWhereInput | TaskHistoryScalarWhereInput[]
  }

  export type ScreenshotsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScreenshotsCreateWithoutUserInput, ScreenshotsUncheckedCreateWithoutUserInput> | ScreenshotsCreateWithoutUserInput[] | ScreenshotsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScreenshotsCreateOrConnectWithoutUserInput | ScreenshotsCreateOrConnectWithoutUserInput[]
    upsert?: ScreenshotsUpsertWithWhereUniqueWithoutUserInput | ScreenshotsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScreenshotsCreateManyUserInputEnvelope
    set?: ScreenshotsWhereUniqueInput | ScreenshotsWhereUniqueInput[]
    disconnect?: ScreenshotsWhereUniqueInput | ScreenshotsWhereUniqueInput[]
    delete?: ScreenshotsWhereUniqueInput | ScreenshotsWhereUniqueInput[]
    connect?: ScreenshotsWhereUniqueInput | ScreenshotsWhereUniqueInput[]
    update?: ScreenshotsUpdateWithWhereUniqueWithoutUserInput | ScreenshotsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScreenshotsUpdateManyWithWhereWithoutUserInput | ScreenshotsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScreenshotsScalarWhereInput | ScreenshotsScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput
    upsert?: ProjectUpsertWithoutUserInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutUserInput, ProjectUpdateWithoutUserInput>, ProjectUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutScreenshotInput = {
    create?: XOR<UserCreateWithoutScreenshotInput, UserUncheckedCreateWithoutScreenshotInput>
    connectOrCreate?: UserCreateOrConnectWithoutScreenshotInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutScreenshotNestedInput = {
    create?: XOR<UserCreateWithoutScreenshotInput, UserUncheckedCreateWithoutScreenshotInput>
    connectOrCreate?: UserCreateOrConnectWithoutScreenshotInput
    upsert?: UserUpsertWithoutScreenshotInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutScreenshotInput, UserUpdateWithoutScreenshotInput>, UserUncheckedUpdateWithoutScreenshotInput>
  }

  export type UserCreateNestedOneWithoutProfilePictureInput = {
    create?: XOR<UserCreateWithoutProfilePictureInput, UserUncheckedCreateWithoutProfilePictureInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilePictureInput
    connect?: UserWhereUniqueInput
  }

  export type UserUncheckedCreateNestedOneWithoutProfilePictureInput = {
    create?: XOR<UserCreateWithoutProfilePictureInput, UserUncheckedCreateWithoutProfilePictureInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilePictureInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutProfilePictureNestedInput = {
    create?: XOR<UserCreateWithoutProfilePictureInput, UserUncheckedCreateWithoutProfilePictureInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilePictureInput
    upsert?: UserUpsertWithoutProfilePictureInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfilePictureInput, UserUpdateWithoutProfilePictureInput>, UserUncheckedUpdateWithoutProfilePictureInput>
  }

  export type UserUncheckedUpdateOneWithoutProfilePictureNestedInput = {
    create?: XOR<UserCreateWithoutProfilePictureInput, UserUncheckedCreateWithoutProfilePictureInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilePictureInput
    upsert?: UserUpsertWithoutProfilePictureInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfilePictureInput, UserUpdateWithoutProfilePictureInput>, UserUncheckedUpdateWithoutProfilePictureInput>
  }

  export type TaskCreateNestedManyWithoutProjectInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type SprintCreateNestedManyWithoutProjectInput = {
    create?: XOR<SprintCreateWithoutProjectInput, SprintUncheckedCreateWithoutProjectInput> | SprintCreateWithoutProjectInput[] | SprintUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SprintCreateOrConnectWithoutProjectInput | SprintCreateOrConnectWithoutProjectInput[]
    createMany?: SprintCreateManyProjectInputEnvelope
    connect?: SprintWhereUniqueInput | SprintWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput> | UserCreateWithoutProjectsInput[] | UserUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput | UserCreateOrConnectWithoutProjectsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserProjectsCreateNestedManyWithoutProjectInput = {
    create?: XOR<UserProjectsCreateWithoutProjectInput, UserProjectsUncheckedCreateWithoutProjectInput> | UserProjectsCreateWithoutProjectInput[] | UserProjectsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserProjectsCreateOrConnectWithoutProjectInput | UserProjectsCreateOrConnectWithoutProjectInput[]
    createMany?: UserProjectsCreateManyProjectInputEnvelope
    connect?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutProjectInput = {
    create?: XOR<UserCreateWithoutProjectInput, UserUncheckedCreateWithoutProjectInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectInput
    connect?: UserWhereUniqueInput
  }

  export type TaskUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type SprintUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<SprintCreateWithoutProjectInput, SprintUncheckedCreateWithoutProjectInput> | SprintCreateWithoutProjectInput[] | SprintUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SprintCreateOrConnectWithoutProjectInput | SprintCreateOrConnectWithoutProjectInput[]
    createMany?: SprintCreateManyProjectInputEnvelope
    connect?: SprintWhereUniqueInput | SprintWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput> | UserCreateWithoutProjectsInput[] | UserUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput | UserCreateOrConnectWithoutProjectsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserProjectsUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<UserProjectsCreateWithoutProjectInput, UserProjectsUncheckedCreateWithoutProjectInput> | UserProjectsCreateWithoutProjectInput[] | UserProjectsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserProjectsCreateOrConnectWithoutProjectInput | UserProjectsCreateOrConnectWithoutProjectInput[]
    createMany?: UserProjectsCreateManyProjectInputEnvelope
    connect?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
  }

  export type TaskUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProjectInput | TaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProjectInput | TaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProjectInput | TaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type SprintUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SprintCreateWithoutProjectInput, SprintUncheckedCreateWithoutProjectInput> | SprintCreateWithoutProjectInput[] | SprintUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SprintCreateOrConnectWithoutProjectInput | SprintCreateOrConnectWithoutProjectInput[]
    upsert?: SprintUpsertWithWhereUniqueWithoutProjectInput | SprintUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SprintCreateManyProjectInputEnvelope
    set?: SprintWhereUniqueInput | SprintWhereUniqueInput[]
    disconnect?: SprintWhereUniqueInput | SprintWhereUniqueInput[]
    delete?: SprintWhereUniqueInput | SprintWhereUniqueInput[]
    connect?: SprintWhereUniqueInput | SprintWhereUniqueInput[]
    update?: SprintUpdateWithWhereUniqueWithoutProjectInput | SprintUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SprintUpdateManyWithWhereWithoutProjectInput | SprintUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SprintScalarWhereInput | SprintScalarWhereInput[]
  }

  export type UserUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput> | UserCreateWithoutProjectsInput[] | UserUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput | UserCreateOrConnectWithoutProjectsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProjectsInput | UserUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProjectsInput | UserUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProjectsInput | UserUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserProjectsUpdateManyWithoutProjectNestedInput = {
    create?: XOR<UserProjectsCreateWithoutProjectInput, UserProjectsUncheckedCreateWithoutProjectInput> | UserProjectsCreateWithoutProjectInput[] | UserProjectsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserProjectsCreateOrConnectWithoutProjectInput | UserProjectsCreateOrConnectWithoutProjectInput[]
    upsert?: UserProjectsUpsertWithWhereUniqueWithoutProjectInput | UserProjectsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: UserProjectsCreateManyProjectInputEnvelope
    set?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    disconnect?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    delete?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    connect?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    update?: UserProjectsUpdateWithWhereUniqueWithoutProjectInput | UserProjectsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: UserProjectsUpdateManyWithWhereWithoutProjectInput | UserProjectsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: UserProjectsScalarWhereInput | UserProjectsScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutProjectNestedInput = {
    create?: XOR<UserCreateWithoutProjectInput, UserUncheckedCreateWithoutProjectInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectInput
    upsert?: UserUpsertWithoutProjectInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectInput, UserUpdateWithoutProjectInput>, UserUncheckedUpdateWithoutProjectInput>
  }

  export type TaskUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProjectInput | TaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProjectInput | TaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProjectInput | TaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type SprintUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<SprintCreateWithoutProjectInput, SprintUncheckedCreateWithoutProjectInput> | SprintCreateWithoutProjectInput[] | SprintUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: SprintCreateOrConnectWithoutProjectInput | SprintCreateOrConnectWithoutProjectInput[]
    upsert?: SprintUpsertWithWhereUniqueWithoutProjectInput | SprintUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: SprintCreateManyProjectInputEnvelope
    set?: SprintWhereUniqueInput | SprintWhereUniqueInput[]
    disconnect?: SprintWhereUniqueInput | SprintWhereUniqueInput[]
    delete?: SprintWhereUniqueInput | SprintWhereUniqueInput[]
    connect?: SprintWhereUniqueInput | SprintWhereUniqueInput[]
    update?: SprintUpdateWithWhereUniqueWithoutProjectInput | SprintUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: SprintUpdateManyWithWhereWithoutProjectInput | SprintUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: SprintScalarWhereInput | SprintScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput> | UserCreateWithoutProjectsInput[] | UserUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput | UserCreateOrConnectWithoutProjectsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProjectsInput | UserUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProjectsInput | UserUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProjectsInput | UserUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserProjectsUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<UserProjectsCreateWithoutProjectInput, UserProjectsUncheckedCreateWithoutProjectInput> | UserProjectsCreateWithoutProjectInput[] | UserProjectsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserProjectsCreateOrConnectWithoutProjectInput | UserProjectsCreateOrConnectWithoutProjectInput[]
    upsert?: UserProjectsUpsertWithWhereUniqueWithoutProjectInput | UserProjectsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: UserProjectsCreateManyProjectInputEnvelope
    set?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    disconnect?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    delete?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    connect?: UserProjectsWhereUniqueInput | UserProjectsWhereUniqueInput[]
    update?: UserProjectsUpdateWithWhereUniqueWithoutProjectInput | UserProjectsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: UserProjectsUpdateManyWithWhereWithoutProjectInput | UserProjectsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: UserProjectsScalarWhereInput | UserProjectsScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutSprintsInput = {
    create?: XOR<ProjectCreateWithoutSprintsInput, ProjectUncheckedCreateWithoutSprintsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutSprintsInput
    connect?: ProjectWhereUniqueInput
  }

  export type TaskCreateNestedManyWithoutSprintInput = {
    create?: XOR<TaskCreateWithoutSprintInput, TaskUncheckedCreateWithoutSprintInput> | TaskCreateWithoutSprintInput[] | TaskUncheckedCreateWithoutSprintInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutSprintInput | TaskCreateOrConnectWithoutSprintInput[]
    createMany?: TaskCreateManySprintInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutSprintInput = {
    create?: XOR<TaskCreateWithoutSprintInput, TaskUncheckedCreateWithoutSprintInput> | TaskCreateWithoutSprintInput[] | TaskUncheckedCreateWithoutSprintInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutSprintInput | TaskCreateOrConnectWithoutSprintInput[]
    createMany?: TaskCreateManySprintInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ProjectUpdateOneRequiredWithoutSprintsNestedInput = {
    create?: XOR<ProjectCreateWithoutSprintsInput, ProjectUncheckedCreateWithoutSprintsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutSprintsInput
    upsert?: ProjectUpsertWithoutSprintsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutSprintsInput, ProjectUpdateWithoutSprintsInput>, ProjectUncheckedUpdateWithoutSprintsInput>
  }

  export type TaskUpdateManyWithoutSprintNestedInput = {
    create?: XOR<TaskCreateWithoutSprintInput, TaskUncheckedCreateWithoutSprintInput> | TaskCreateWithoutSprintInput[] | TaskUncheckedCreateWithoutSprintInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutSprintInput | TaskCreateOrConnectWithoutSprintInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutSprintInput | TaskUpsertWithWhereUniqueWithoutSprintInput[]
    createMany?: TaskCreateManySprintInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutSprintInput | TaskUpdateWithWhereUniqueWithoutSprintInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutSprintInput | TaskUpdateManyWithWhereWithoutSprintInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutSprintNestedInput = {
    create?: XOR<TaskCreateWithoutSprintInput, TaskUncheckedCreateWithoutSprintInput> | TaskCreateWithoutSprintInput[] | TaskUncheckedCreateWithoutSprintInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutSprintInput | TaskCreateOrConnectWithoutSprintInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutSprintInput | TaskUpsertWithWhereUniqueWithoutSprintInput[]
    createMany?: TaskCreateManySprintInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutSprintInput | TaskUpdateWithWhereUniqueWithoutSprintInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutSprintInput | TaskUpdateManyWithWhereWithoutSprintInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutTasksInput = {
    create?: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAuthoredTasksInput = {
    create?: XOR<UserCreateWithoutAuthoredTasksInput, UserUncheckedCreateWithoutAuthoredTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthoredTasksInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedTasksInput = {
    create?: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTasksInput
    connect?: UserWhereUniqueInput
  }

  export type TaskAssignmentCreateNestedManyWithoutTaskInput = {
    create?: XOR<TaskAssignmentCreateWithoutTaskInput, TaskAssignmentUncheckedCreateWithoutTaskInput> | TaskAssignmentCreateWithoutTaskInput[] | TaskAssignmentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutTaskInput | TaskAssignmentCreateOrConnectWithoutTaskInput[]
    createMany?: TaskAssignmentCreateManyTaskInputEnvelope
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
  }

  export type AttachmentCreateNestedManyWithoutTaskInput = {
    create?: XOR<AttachmentCreateWithoutTaskInput, AttachmentUncheckedCreateWithoutTaskInput> | AttachmentCreateWithoutTaskInput[] | AttachmentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutTaskInput | AttachmentCreateOrConnectWithoutTaskInput[]
    createMany?: AttachmentCreateManyTaskInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutTaskInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type TaskHistoryCreateNestedManyWithoutTaskInput = {
    create?: XOR<TaskHistoryCreateWithoutTaskInput, TaskHistoryUncheckedCreateWithoutTaskInput> | TaskHistoryCreateWithoutTaskInput[] | TaskHistoryUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskHistoryCreateOrConnectWithoutTaskInput | TaskHistoryCreateOrConnectWithoutTaskInput[]
    createMany?: TaskHistoryCreateManyTaskInputEnvelope
    connect?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
  }

  export type SubtaskCreateNestedManyWithoutTaskInput = {
    create?: XOR<SubtaskCreateWithoutTaskInput, SubtaskUncheckedCreateWithoutTaskInput> | SubtaskCreateWithoutTaskInput[] | SubtaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: SubtaskCreateOrConnectWithoutTaskInput | SubtaskCreateOrConnectWithoutTaskInput[]
    createMany?: SubtaskCreateManyTaskInputEnvelope
    connect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
  }

  export type SprintCreateNestedOneWithoutTasksInput = {
    create?: XOR<SprintCreateWithoutTasksInput, SprintUncheckedCreateWithoutTasksInput>
    connectOrCreate?: SprintCreateOrConnectWithoutTasksInput
    connect?: SprintWhereUniqueInput
  }

  export type TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<TaskAssignmentCreateWithoutTaskInput, TaskAssignmentUncheckedCreateWithoutTaskInput> | TaskAssignmentCreateWithoutTaskInput[] | TaskAssignmentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutTaskInput | TaskAssignmentCreateOrConnectWithoutTaskInput[]
    createMany?: TaskAssignmentCreateManyTaskInputEnvelope
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
  }

  export type AttachmentUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<AttachmentCreateWithoutTaskInput, AttachmentUncheckedCreateWithoutTaskInput> | AttachmentCreateWithoutTaskInput[] | AttachmentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutTaskInput | AttachmentCreateOrConnectWithoutTaskInput[]
    createMany?: AttachmentCreateManyTaskInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type TaskHistoryUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<TaskHistoryCreateWithoutTaskInput, TaskHistoryUncheckedCreateWithoutTaskInput> | TaskHistoryCreateWithoutTaskInput[] | TaskHistoryUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskHistoryCreateOrConnectWithoutTaskInput | TaskHistoryCreateOrConnectWithoutTaskInput[]
    createMany?: TaskHistoryCreateManyTaskInputEnvelope
    connect?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
  }

  export type SubtaskUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<SubtaskCreateWithoutTaskInput, SubtaskUncheckedCreateWithoutTaskInput> | SubtaskCreateWithoutTaskInput[] | SubtaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: SubtaskCreateOrConnectWithoutTaskInput | SubtaskCreateOrConnectWithoutTaskInput[]
    createMany?: SubtaskCreateManyTaskInputEnvelope
    connect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
  }

  export type ProjectUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput
    upsert?: ProjectUpsertWithoutTasksInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutTasksInput, ProjectUpdateWithoutTasksInput>, ProjectUncheckedUpdateWithoutTasksInput>
  }

  export type UserUpdateOneRequiredWithoutAuthoredTasksNestedInput = {
    create?: XOR<UserCreateWithoutAuthoredTasksInput, UserUncheckedCreateWithoutAuthoredTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthoredTasksInput
    upsert?: UserUpsertWithoutAuthoredTasksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuthoredTasksInput, UserUpdateWithoutAuthoredTasksInput>, UserUncheckedUpdateWithoutAuthoredTasksInput>
  }

  export type UserUpdateOneWithoutAssignedTasksNestedInput = {
    create?: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTasksInput
    upsert?: UserUpsertWithoutAssignedTasksInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedTasksInput, UserUpdateWithoutAssignedTasksInput>, UserUncheckedUpdateWithoutAssignedTasksInput>
  }

  export type TaskAssignmentUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TaskAssignmentCreateWithoutTaskInput, TaskAssignmentUncheckedCreateWithoutTaskInput> | TaskAssignmentCreateWithoutTaskInput[] | TaskAssignmentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutTaskInput | TaskAssignmentCreateOrConnectWithoutTaskInput[]
    upsert?: TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput | TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TaskAssignmentCreateManyTaskInputEnvelope
    set?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    disconnect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    delete?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    update?: TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput | TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TaskAssignmentUpdateManyWithWhereWithoutTaskInput | TaskAssignmentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TaskAssignmentScalarWhereInput | TaskAssignmentScalarWhereInput[]
  }

  export type AttachmentUpdateManyWithoutTaskNestedInput = {
    create?: XOR<AttachmentCreateWithoutTaskInput, AttachmentUncheckedCreateWithoutTaskInput> | AttachmentCreateWithoutTaskInput[] | AttachmentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutTaskInput | AttachmentCreateOrConnectWithoutTaskInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutTaskInput | AttachmentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: AttachmentCreateManyTaskInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutTaskInput | AttachmentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutTaskInput | AttachmentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutTaskNestedInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutTaskInput | CommentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutTaskInput | CommentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutTaskInput | CommentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type TaskHistoryUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TaskHistoryCreateWithoutTaskInput, TaskHistoryUncheckedCreateWithoutTaskInput> | TaskHistoryCreateWithoutTaskInput[] | TaskHistoryUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskHistoryCreateOrConnectWithoutTaskInput | TaskHistoryCreateOrConnectWithoutTaskInput[]
    upsert?: TaskHistoryUpsertWithWhereUniqueWithoutTaskInput | TaskHistoryUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TaskHistoryCreateManyTaskInputEnvelope
    set?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    disconnect?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    delete?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    connect?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    update?: TaskHistoryUpdateWithWhereUniqueWithoutTaskInput | TaskHistoryUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TaskHistoryUpdateManyWithWhereWithoutTaskInput | TaskHistoryUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TaskHistoryScalarWhereInput | TaskHistoryScalarWhereInput[]
  }

  export type SubtaskUpdateManyWithoutTaskNestedInput = {
    create?: XOR<SubtaskCreateWithoutTaskInput, SubtaskUncheckedCreateWithoutTaskInput> | SubtaskCreateWithoutTaskInput[] | SubtaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: SubtaskCreateOrConnectWithoutTaskInput | SubtaskCreateOrConnectWithoutTaskInput[]
    upsert?: SubtaskUpsertWithWhereUniqueWithoutTaskInput | SubtaskUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: SubtaskCreateManyTaskInputEnvelope
    set?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    disconnect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    delete?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    connect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    update?: SubtaskUpdateWithWhereUniqueWithoutTaskInput | SubtaskUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: SubtaskUpdateManyWithWhereWithoutTaskInput | SubtaskUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: SubtaskScalarWhereInput | SubtaskScalarWhereInput[]
  }

  export type SprintUpdateOneWithoutTasksNestedInput = {
    create?: XOR<SprintCreateWithoutTasksInput, SprintUncheckedCreateWithoutTasksInput>
    connectOrCreate?: SprintCreateOrConnectWithoutTasksInput
    upsert?: SprintUpsertWithoutTasksInput
    disconnect?: SprintWhereInput | boolean
    delete?: SprintWhereInput | boolean
    connect?: SprintWhereUniqueInput
    update?: XOR<XOR<SprintUpdateToOneWithWhereWithoutTasksInput, SprintUpdateWithoutTasksInput>, SprintUncheckedUpdateWithoutTasksInput>
  }

  export type TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TaskAssignmentCreateWithoutTaskInput, TaskAssignmentUncheckedCreateWithoutTaskInput> | TaskAssignmentCreateWithoutTaskInput[] | TaskAssignmentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskAssignmentCreateOrConnectWithoutTaskInput | TaskAssignmentCreateOrConnectWithoutTaskInput[]
    upsert?: TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput | TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TaskAssignmentCreateManyTaskInputEnvelope
    set?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    disconnect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    delete?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    connect?: TaskAssignmentWhereUniqueInput | TaskAssignmentWhereUniqueInput[]
    update?: TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput | TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TaskAssignmentUpdateManyWithWhereWithoutTaskInput | TaskAssignmentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TaskAssignmentScalarWhereInput | TaskAssignmentScalarWhereInput[]
  }

  export type AttachmentUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<AttachmentCreateWithoutTaskInput, AttachmentUncheckedCreateWithoutTaskInput> | AttachmentCreateWithoutTaskInput[] | AttachmentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutTaskInput | AttachmentCreateOrConnectWithoutTaskInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutTaskInput | AttachmentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: AttachmentCreateManyTaskInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutTaskInput | AttachmentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutTaskInput | AttachmentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutTaskInput | CommentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutTaskInput | CommentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutTaskInput | CommentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type TaskHistoryUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<TaskHistoryCreateWithoutTaskInput, TaskHistoryUncheckedCreateWithoutTaskInput> | TaskHistoryCreateWithoutTaskInput[] | TaskHistoryUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: TaskHistoryCreateOrConnectWithoutTaskInput | TaskHistoryCreateOrConnectWithoutTaskInput[]
    upsert?: TaskHistoryUpsertWithWhereUniqueWithoutTaskInput | TaskHistoryUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: TaskHistoryCreateManyTaskInputEnvelope
    set?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    disconnect?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    delete?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    connect?: TaskHistoryWhereUniqueInput | TaskHistoryWhereUniqueInput[]
    update?: TaskHistoryUpdateWithWhereUniqueWithoutTaskInput | TaskHistoryUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: TaskHistoryUpdateManyWithWhereWithoutTaskInput | TaskHistoryUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: TaskHistoryScalarWhereInput | TaskHistoryScalarWhereInput[]
  }

  export type SubtaskUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<SubtaskCreateWithoutTaskInput, SubtaskUncheckedCreateWithoutTaskInput> | SubtaskCreateWithoutTaskInput[] | SubtaskUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: SubtaskCreateOrConnectWithoutTaskInput | SubtaskCreateOrConnectWithoutTaskInput[]
    upsert?: SubtaskUpsertWithWhereUniqueWithoutTaskInput | SubtaskUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: SubtaskCreateManyTaskInputEnvelope
    set?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    disconnect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    delete?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    connect?: SubtaskWhereUniqueInput | SubtaskWhereUniqueInput[]
    update?: SubtaskUpdateWithWhereUniqueWithoutTaskInput | SubtaskUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: SubtaskUpdateManyWithWhereWithoutTaskInput | SubtaskUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: SubtaskScalarWhereInput | SubtaskScalarWhereInput[]
  }

  export type AttachmentCreateNestedManyWithoutSubTaskInput = {
    create?: XOR<AttachmentCreateWithoutSubTaskInput, AttachmentUncheckedCreateWithoutSubTaskInput> | AttachmentCreateWithoutSubTaskInput[] | AttachmentUncheckedCreateWithoutSubTaskInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutSubTaskInput | AttachmentCreateOrConnectWithoutSubTaskInput[]
    createMany?: AttachmentCreateManySubTaskInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutAssignedSubTasksInput = {
    create?: XOR<UserCreateWithoutAssignedSubTasksInput, UserUncheckedCreateWithoutAssignedSubTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedSubTasksInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAuthoredSubTasksInput = {
    create?: XOR<UserCreateWithoutAuthoredSubTasksInput, UserUncheckedCreateWithoutAuthoredSubTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthoredSubTasksInput
    connect?: UserWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutSubTasksInput = {
    create?: XOR<TaskCreateWithoutSubTasksInput, TaskUncheckedCreateWithoutSubTasksInput>
    connectOrCreate?: TaskCreateOrConnectWithoutSubTasksInput
    connect?: TaskWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutSubtaskInput = {
    create?: XOR<CommentCreateWithoutSubtaskInput, CommentUncheckedCreateWithoutSubtaskInput> | CommentCreateWithoutSubtaskInput[] | CommentUncheckedCreateWithoutSubtaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutSubtaskInput | CommentCreateOrConnectWithoutSubtaskInput[]
    createMany?: CommentCreateManySubtaskInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type AttachmentUncheckedCreateNestedManyWithoutSubTaskInput = {
    create?: XOR<AttachmentCreateWithoutSubTaskInput, AttachmentUncheckedCreateWithoutSubTaskInput> | AttachmentCreateWithoutSubTaskInput[] | AttachmentUncheckedCreateWithoutSubTaskInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutSubTaskInput | AttachmentCreateOrConnectWithoutSubTaskInput[]
    createMany?: AttachmentCreateManySubTaskInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutSubtaskInput = {
    create?: XOR<CommentCreateWithoutSubtaskInput, CommentUncheckedCreateWithoutSubtaskInput> | CommentCreateWithoutSubtaskInput[] | CommentUncheckedCreateWithoutSubtaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutSubtaskInput | CommentCreateOrConnectWithoutSubtaskInput[]
    createMany?: CommentCreateManySubtaskInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type AttachmentUpdateManyWithoutSubTaskNestedInput = {
    create?: XOR<AttachmentCreateWithoutSubTaskInput, AttachmentUncheckedCreateWithoutSubTaskInput> | AttachmentCreateWithoutSubTaskInput[] | AttachmentUncheckedCreateWithoutSubTaskInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutSubTaskInput | AttachmentCreateOrConnectWithoutSubTaskInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutSubTaskInput | AttachmentUpsertWithWhereUniqueWithoutSubTaskInput[]
    createMany?: AttachmentCreateManySubTaskInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutSubTaskInput | AttachmentUpdateWithWhereUniqueWithoutSubTaskInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutSubTaskInput | AttachmentUpdateManyWithWhereWithoutSubTaskInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type UserUpdateOneWithoutAssignedSubTasksNestedInput = {
    create?: XOR<UserCreateWithoutAssignedSubTasksInput, UserUncheckedCreateWithoutAssignedSubTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedSubTasksInput
    upsert?: UserUpsertWithoutAssignedSubTasksInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedSubTasksInput, UserUpdateWithoutAssignedSubTasksInput>, UserUncheckedUpdateWithoutAssignedSubTasksInput>
  }

  export type UserUpdateOneRequiredWithoutAuthoredSubTasksNestedInput = {
    create?: XOR<UserCreateWithoutAuthoredSubTasksInput, UserUncheckedCreateWithoutAuthoredSubTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthoredSubTasksInput
    upsert?: UserUpsertWithoutAuthoredSubTasksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuthoredSubTasksInput, UserUpdateWithoutAuthoredSubTasksInput>, UserUncheckedUpdateWithoutAuthoredSubTasksInput>
  }

  export type TaskUpdateOneRequiredWithoutSubTasksNestedInput = {
    create?: XOR<TaskCreateWithoutSubTasksInput, TaskUncheckedCreateWithoutSubTasksInput>
    connectOrCreate?: TaskCreateOrConnectWithoutSubTasksInput
    upsert?: TaskUpsertWithoutSubTasksInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutSubTasksInput, TaskUpdateWithoutSubTasksInput>, TaskUncheckedUpdateWithoutSubTasksInput>
  }

  export type CommentUpdateManyWithoutSubtaskNestedInput = {
    create?: XOR<CommentCreateWithoutSubtaskInput, CommentUncheckedCreateWithoutSubtaskInput> | CommentCreateWithoutSubtaskInput[] | CommentUncheckedCreateWithoutSubtaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutSubtaskInput | CommentCreateOrConnectWithoutSubtaskInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutSubtaskInput | CommentUpsertWithWhereUniqueWithoutSubtaskInput[]
    createMany?: CommentCreateManySubtaskInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutSubtaskInput | CommentUpdateWithWhereUniqueWithoutSubtaskInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutSubtaskInput | CommentUpdateManyWithWhereWithoutSubtaskInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type AttachmentUncheckedUpdateManyWithoutSubTaskNestedInput = {
    create?: XOR<AttachmentCreateWithoutSubTaskInput, AttachmentUncheckedCreateWithoutSubTaskInput> | AttachmentCreateWithoutSubTaskInput[] | AttachmentUncheckedCreateWithoutSubTaskInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutSubTaskInput | AttachmentCreateOrConnectWithoutSubTaskInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutSubTaskInput | AttachmentUpsertWithWhereUniqueWithoutSubTaskInput[]
    createMany?: AttachmentCreateManySubTaskInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutSubTaskInput | AttachmentUpdateWithWhereUniqueWithoutSubTaskInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutSubTaskInput | AttachmentUpdateManyWithWhereWithoutSubTaskInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutSubtaskNestedInput = {
    create?: XOR<CommentCreateWithoutSubtaskInput, CommentUncheckedCreateWithoutSubtaskInput> | CommentCreateWithoutSubtaskInput[] | CommentUncheckedCreateWithoutSubtaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutSubtaskInput | CommentCreateOrConnectWithoutSubtaskInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutSubtaskInput | CommentUpsertWithWhereUniqueWithoutSubtaskInput[]
    createMany?: CommentCreateManySubtaskInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutSubtaskInput | CommentUpdateWithWhereUniqueWithoutSubtaskInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutSubtaskInput | CommentUpdateManyWithWhereWithoutSubtaskInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type TaskCreateNestedOneWithoutTaskHistoryInput = {
    create?: XOR<TaskCreateWithoutTaskHistoryInput, TaskUncheckedCreateWithoutTaskHistoryInput>
    connectOrCreate?: TaskCreateOrConnectWithoutTaskHistoryInput
    connect?: TaskWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTaskHistoryInput = {
    create?: XOR<UserCreateWithoutTaskHistoryInput, UserUncheckedCreateWithoutTaskHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutTaskHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type TaskUpdateOneRequiredWithoutTaskHistoryNestedInput = {
    create?: XOR<TaskCreateWithoutTaskHistoryInput, TaskUncheckedCreateWithoutTaskHistoryInput>
    connectOrCreate?: TaskCreateOrConnectWithoutTaskHistoryInput
    upsert?: TaskUpsertWithoutTaskHistoryInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutTaskHistoryInput, TaskUpdateWithoutTaskHistoryInput>, TaskUncheckedUpdateWithoutTaskHistoryInput>
  }

  export type UserUpdateOneRequiredWithoutTaskHistoryNestedInput = {
    create?: XOR<UserCreateWithoutTaskHistoryInput, UserUncheckedCreateWithoutTaskHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutTaskHistoryInput
    upsert?: UserUpsertWithoutTaskHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTaskHistoryInput, UserUpdateWithoutTaskHistoryInput>, UserUncheckedUpdateWithoutTaskHistoryInput>
  }

  export type TaskCreateNestedOneWithoutCommentsInput = {
    create?: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutCommentsInput
    connect?: TaskWhereUniqueInput
  }

  export type SubtaskCreateNestedOneWithoutCommentsInput = {
    create?: XOR<SubtaskCreateWithoutCommentsInput, SubtaskUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: SubtaskCreateOrConnectWithoutCommentsInput
    connect?: SubtaskWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type TaskUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutCommentsInput
    upsert?: TaskUpsertWithoutCommentsInput
    disconnect?: TaskWhereInput | boolean
    delete?: TaskWhereInput | boolean
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutCommentsInput, TaskUpdateWithoutCommentsInput>, TaskUncheckedUpdateWithoutCommentsInput>
  }

  export type SubtaskUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<SubtaskCreateWithoutCommentsInput, SubtaskUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: SubtaskCreateOrConnectWithoutCommentsInput
    upsert?: SubtaskUpsertWithoutCommentsInput
    disconnect?: SubtaskWhereInput | boolean
    delete?: SubtaskWhereInput | boolean
    connect?: SubtaskWhereUniqueInput
    update?: XOR<XOR<SubtaskUpdateToOneWithWhereWithoutCommentsInput, SubtaskUpdateWithoutCommentsInput>, SubtaskUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserCreateNestedOneWithoutTaskAssignmentInput = {
    create?: XOR<UserCreateWithoutTaskAssignmentInput, UserUncheckedCreateWithoutTaskAssignmentInput>
    connectOrCreate?: UserCreateOrConnectWithoutTaskAssignmentInput
    connect?: UserWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutTaskAssignmentsInput = {
    create?: XOR<TaskCreateWithoutTaskAssignmentsInput, TaskUncheckedCreateWithoutTaskAssignmentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutTaskAssignmentsInput
    connect?: TaskWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTaskAssignmentNestedInput = {
    create?: XOR<UserCreateWithoutTaskAssignmentInput, UserUncheckedCreateWithoutTaskAssignmentInput>
    connectOrCreate?: UserCreateOrConnectWithoutTaskAssignmentInput
    upsert?: UserUpsertWithoutTaskAssignmentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTaskAssignmentInput, UserUpdateWithoutTaskAssignmentInput>, UserUncheckedUpdateWithoutTaskAssignmentInput>
  }

  export type TaskUpdateOneRequiredWithoutTaskAssignmentsNestedInput = {
    create?: XOR<TaskCreateWithoutTaskAssignmentsInput, TaskUncheckedCreateWithoutTaskAssignmentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutTaskAssignmentsInput
    upsert?: TaskUpsertWithoutTaskAssignmentsInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutTaskAssignmentsInput, TaskUpdateWithoutTaskAssignmentsInput>, TaskUncheckedUpdateWithoutTaskAssignmentsInput>
  }

  export type TaskCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<TaskCreateWithoutAttachmentsInput, TaskUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutAttachmentsInput
    connect?: TaskWhereUniqueInput
  }

  export type SubtaskCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<SubtaskCreateWithoutAttachmentsInput, SubtaskUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: SubtaskCreateOrConnectWithoutAttachmentsInput
    connect?: SubtaskWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<UserCreateWithoutAttachmentsInput, UserUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttachmentsInput
    connect?: UserWhereUniqueInput
  }

  export type TaskUpdateOneWithoutAttachmentsNestedInput = {
    create?: XOR<TaskCreateWithoutAttachmentsInput, TaskUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutAttachmentsInput
    upsert?: TaskUpsertWithoutAttachmentsInput
    disconnect?: TaskWhereInput | boolean
    delete?: TaskWhereInput | boolean
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutAttachmentsInput, TaskUpdateWithoutAttachmentsInput>, TaskUncheckedUpdateWithoutAttachmentsInput>
  }

  export type SubtaskUpdateOneWithoutAttachmentsNestedInput = {
    create?: XOR<SubtaskCreateWithoutAttachmentsInput, SubtaskUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: SubtaskCreateOrConnectWithoutAttachmentsInput
    upsert?: SubtaskUpsertWithoutAttachmentsInput
    disconnect?: SubtaskWhereInput | boolean
    delete?: SubtaskWhereInput | boolean
    connect?: SubtaskWhereUniqueInput
    update?: XOR<XOR<SubtaskUpdateToOneWithWhereWithoutAttachmentsInput, SubtaskUpdateWithoutAttachmentsInput>, SubtaskUncheckedUpdateWithoutAttachmentsInput>
  }

  export type UserUpdateOneRequiredWithoutAttachmentsNestedInput = {
    create?: XOR<UserCreateWithoutAttachmentsInput, UserUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttachmentsInput
    upsert?: UserUpsertWithoutAttachmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttachmentsInput, UserUpdateWithoutAttachmentsInput>, UserUncheckedUpdateWithoutAttachmentsInput>
  }

  export type UserCreateNestedOneWithoutUserProjectsInput = {
    create?: XOR<UserCreateWithoutUserProjectsInput, UserUncheckedCreateWithoutUserProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutUserProjectsInput = {
    create?: XOR<ProjectCreateWithoutUserProjectsInput, ProjectUncheckedCreateWithoutUserProjectsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUserProjectsInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserProjectsNestedInput = {
    create?: XOR<UserCreateWithoutUserProjectsInput, UserUncheckedCreateWithoutUserProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserProjectsInput
    upsert?: UserUpsertWithoutUserProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserProjectsInput, UserUpdateWithoutUserProjectsInput>, UserUncheckedUpdateWithoutUserProjectsInput>
  }

  export type ProjectUpdateOneRequiredWithoutUserProjectsNestedInput = {
    create?: XOR<ProjectCreateWithoutUserProjectsInput, ProjectUncheckedCreateWithoutUserProjectsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUserProjectsInput
    upsert?: ProjectUpsertWithoutUserProjectsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutUserProjectsInput, ProjectUpdateWithoutUserProjectsInput>, ProjectUncheckedUpdateWithoutUserProjectsInput>
  }

  export type UserCreateNestedManyWithoutTeamsInput = {
    create?: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput> | UserCreateWithoutTeamsInput[] | UserUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamsInput | UserCreateOrConnectWithoutTeamsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TeamMembersCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamMembersCreateWithoutTeamInput, TeamMembersUncheckedCreateWithoutTeamInput> | TeamMembersCreateWithoutTeamInput[] | TeamMembersUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutTeamInput | TeamMembersCreateOrConnectWithoutTeamInput[]
    createMany?: TeamMembersCreateManyTeamInputEnvelope
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTeamsInput = {
    create?: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput> | UserCreateWithoutTeamsInput[] | UserUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamsInput | UserCreateOrConnectWithoutTeamsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TeamMembersUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamMembersCreateWithoutTeamInput, TeamMembersUncheckedCreateWithoutTeamInput> | TeamMembersCreateWithoutTeamInput[] | TeamMembersUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutTeamInput | TeamMembersCreateOrConnectWithoutTeamInput[]
    createMany?: TeamMembersCreateManyTeamInputEnvelope
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput> | UserCreateWithoutTeamsInput[] | UserUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamsInput | UserCreateOrConnectWithoutTeamsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTeamsInput | UserUpsertWithWhereUniqueWithoutTeamsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTeamsInput | UserUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTeamsInput | UserUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TeamMembersUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamMembersCreateWithoutTeamInput, TeamMembersUncheckedCreateWithoutTeamInput> | TeamMembersCreateWithoutTeamInput[] | TeamMembersUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutTeamInput | TeamMembersCreateOrConnectWithoutTeamInput[]
    upsert?: TeamMembersUpsertWithWhereUniqueWithoutTeamInput | TeamMembersUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamMembersCreateManyTeamInputEnvelope
    set?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    disconnect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    delete?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    update?: TeamMembersUpdateWithWhereUniqueWithoutTeamInput | TeamMembersUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamMembersUpdateManyWithWhereWithoutTeamInput | TeamMembersUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamMembersScalarWhereInput | TeamMembersScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput> | UserCreateWithoutTeamsInput[] | UserUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamsInput | UserCreateOrConnectWithoutTeamsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTeamsInput | UserUpsertWithWhereUniqueWithoutTeamsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTeamsInput | UserUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTeamsInput | UserUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TeamMembersUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamMembersCreateWithoutTeamInput, TeamMembersUncheckedCreateWithoutTeamInput> | TeamMembersCreateWithoutTeamInput[] | TeamMembersUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMembersCreateOrConnectWithoutTeamInput | TeamMembersCreateOrConnectWithoutTeamInput[]
    upsert?: TeamMembersUpsertWithWhereUniqueWithoutTeamInput | TeamMembersUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamMembersCreateManyTeamInputEnvelope
    set?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    disconnect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    delete?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    connect?: TeamMembersWhereUniqueInput | TeamMembersWhereUniqueInput[]
    update?: TeamMembersUpdateWithWhereUniqueWithoutTeamInput | TeamMembersUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamMembersUpdateManyWithWhereWithoutTeamInput | TeamMembersUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamMembersScalarWhereInput | TeamMembersScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTeamMembersInput = {
    create?: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMembersInput
    connect?: UserWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutTeamMembersInput = {
    create?: XOR<TeamCreateWithoutTeamMembersInput, TeamUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamMembersInput
    connect?: TeamWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTeamMembersNestedInput = {
    create?: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMembersInput
    upsert?: UserUpsertWithoutTeamMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamMembersInput, UserUpdateWithoutTeamMembersInput>, UserUncheckedUpdateWithoutTeamMembersInput>
  }

  export type TeamUpdateOneRequiredWithoutTeamMembersNestedInput = {
    create?: XOR<TeamCreateWithoutTeamMembersInput, TeamUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamMembersInput
    upsert?: TeamUpsertWithoutTeamMembersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutTeamMembersInput, TeamUpdateWithoutTeamMembersInput>, TeamUncheckedUpdateWithoutTeamMembersInput>
  }

  export type UserCreateNestedManyWithoutRolesInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput> | UserCreateWithoutRolesInput[] | UserUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput | UserCreateOrConnectWithoutRolesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AuthorityCreateNestedManyWithoutRolesInput = {
    create?: XOR<AuthorityCreateWithoutRolesInput, AuthorityUncheckedCreateWithoutRolesInput> | AuthorityCreateWithoutRolesInput[] | AuthorityUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: AuthorityCreateOrConnectWithoutRolesInput | AuthorityCreateOrConnectWithoutRolesInput[]
    connect?: AuthorityWhereUniqueInput | AuthorityWhereUniqueInput[]
  }

  export type RoleAuthoritiesCreateNestedManyWithoutRoleInput = {
    create?: XOR<RoleAuthoritiesCreateWithoutRoleInput, RoleAuthoritiesUncheckedCreateWithoutRoleInput> | RoleAuthoritiesCreateWithoutRoleInput[] | RoleAuthoritiesUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RoleAuthoritiesCreateOrConnectWithoutRoleInput | RoleAuthoritiesCreateOrConnectWithoutRoleInput[]
    createMany?: RoleAuthoritiesCreateManyRoleInputEnvelope
    connect?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput> | UserCreateWithoutRolesInput[] | UserUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput | UserCreateOrConnectWithoutRolesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AuthorityUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<AuthorityCreateWithoutRolesInput, AuthorityUncheckedCreateWithoutRolesInput> | AuthorityCreateWithoutRolesInput[] | AuthorityUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: AuthorityCreateOrConnectWithoutRolesInput | AuthorityCreateOrConnectWithoutRolesInput[]
    connect?: AuthorityWhereUniqueInput | AuthorityWhereUniqueInput[]
  }

  export type RoleAuthoritiesUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<RoleAuthoritiesCreateWithoutRoleInput, RoleAuthoritiesUncheckedCreateWithoutRoleInput> | RoleAuthoritiesCreateWithoutRoleInput[] | RoleAuthoritiesUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RoleAuthoritiesCreateOrConnectWithoutRoleInput | RoleAuthoritiesCreateOrConnectWithoutRoleInput[]
    createMany?: RoleAuthoritiesCreateManyRoleInputEnvelope
    connect?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutRolesNestedInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput> | UserCreateWithoutRolesInput[] | UserUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput | UserCreateOrConnectWithoutRolesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRolesInput | UserUpsertWithWhereUniqueWithoutRolesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRolesInput | UserUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRolesInput | UserUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AuthorityUpdateManyWithoutRolesNestedInput = {
    create?: XOR<AuthorityCreateWithoutRolesInput, AuthorityUncheckedCreateWithoutRolesInput> | AuthorityCreateWithoutRolesInput[] | AuthorityUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: AuthorityCreateOrConnectWithoutRolesInput | AuthorityCreateOrConnectWithoutRolesInput[]
    upsert?: AuthorityUpsertWithWhereUniqueWithoutRolesInput | AuthorityUpsertWithWhereUniqueWithoutRolesInput[]
    set?: AuthorityWhereUniqueInput | AuthorityWhereUniqueInput[]
    disconnect?: AuthorityWhereUniqueInput | AuthorityWhereUniqueInput[]
    delete?: AuthorityWhereUniqueInput | AuthorityWhereUniqueInput[]
    connect?: AuthorityWhereUniqueInput | AuthorityWhereUniqueInput[]
    update?: AuthorityUpdateWithWhereUniqueWithoutRolesInput | AuthorityUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: AuthorityUpdateManyWithWhereWithoutRolesInput | AuthorityUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: AuthorityScalarWhereInput | AuthorityScalarWhereInput[]
  }

  export type RoleAuthoritiesUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RoleAuthoritiesCreateWithoutRoleInput, RoleAuthoritiesUncheckedCreateWithoutRoleInput> | RoleAuthoritiesCreateWithoutRoleInput[] | RoleAuthoritiesUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RoleAuthoritiesCreateOrConnectWithoutRoleInput | RoleAuthoritiesCreateOrConnectWithoutRoleInput[]
    upsert?: RoleAuthoritiesUpsertWithWhereUniqueWithoutRoleInput | RoleAuthoritiesUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RoleAuthoritiesCreateManyRoleInputEnvelope
    set?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    disconnect?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    delete?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    connect?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    update?: RoleAuthoritiesUpdateWithWhereUniqueWithoutRoleInput | RoleAuthoritiesUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RoleAuthoritiesUpdateManyWithWhereWithoutRoleInput | RoleAuthoritiesUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RoleAuthoritiesScalarWhereInput | RoleAuthoritiesScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput> | UserCreateWithoutRolesInput[] | UserUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput | UserCreateOrConnectWithoutRolesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRolesInput | UserUpsertWithWhereUniqueWithoutRolesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRolesInput | UserUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRolesInput | UserUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AuthorityUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<AuthorityCreateWithoutRolesInput, AuthorityUncheckedCreateWithoutRolesInput> | AuthorityCreateWithoutRolesInput[] | AuthorityUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: AuthorityCreateOrConnectWithoutRolesInput | AuthorityCreateOrConnectWithoutRolesInput[]
    upsert?: AuthorityUpsertWithWhereUniqueWithoutRolesInput | AuthorityUpsertWithWhereUniqueWithoutRolesInput[]
    set?: AuthorityWhereUniqueInput | AuthorityWhereUniqueInput[]
    disconnect?: AuthorityWhereUniqueInput | AuthorityWhereUniqueInput[]
    delete?: AuthorityWhereUniqueInput | AuthorityWhereUniqueInput[]
    connect?: AuthorityWhereUniqueInput | AuthorityWhereUniqueInput[]
    update?: AuthorityUpdateWithWhereUniqueWithoutRolesInput | AuthorityUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: AuthorityUpdateManyWithWhereWithoutRolesInput | AuthorityUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: AuthorityScalarWhereInput | AuthorityScalarWhereInput[]
  }

  export type RoleAuthoritiesUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RoleAuthoritiesCreateWithoutRoleInput, RoleAuthoritiesUncheckedCreateWithoutRoleInput> | RoleAuthoritiesCreateWithoutRoleInput[] | RoleAuthoritiesUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RoleAuthoritiesCreateOrConnectWithoutRoleInput | RoleAuthoritiesCreateOrConnectWithoutRoleInput[]
    upsert?: RoleAuthoritiesUpsertWithWhereUniqueWithoutRoleInput | RoleAuthoritiesUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RoleAuthoritiesCreateManyRoleInputEnvelope
    set?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    disconnect?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    delete?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    connect?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    update?: RoleAuthoritiesUpdateWithWhereUniqueWithoutRoleInput | RoleAuthoritiesUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RoleAuthoritiesUpdateManyWithWhereWithoutRoleInput | RoleAuthoritiesUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RoleAuthoritiesScalarWhereInput | RoleAuthoritiesScalarWhereInput[]
  }

  export type RoleCreateNestedManyWithoutAuthoritiesInput = {
    create?: XOR<RoleCreateWithoutAuthoritiesInput, RoleUncheckedCreateWithoutAuthoritiesInput> | RoleCreateWithoutAuthoritiesInput[] | RoleUncheckedCreateWithoutAuthoritiesInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutAuthoritiesInput | RoleCreateOrConnectWithoutAuthoritiesInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type RoleAuthoritiesCreateNestedManyWithoutAuthorityInput = {
    create?: XOR<RoleAuthoritiesCreateWithoutAuthorityInput, RoleAuthoritiesUncheckedCreateWithoutAuthorityInput> | RoleAuthoritiesCreateWithoutAuthorityInput[] | RoleAuthoritiesUncheckedCreateWithoutAuthorityInput[]
    connectOrCreate?: RoleAuthoritiesCreateOrConnectWithoutAuthorityInput | RoleAuthoritiesCreateOrConnectWithoutAuthorityInput[]
    createMany?: RoleAuthoritiesCreateManyAuthorityInputEnvelope
    connect?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
  }

  export type RoleUncheckedCreateNestedManyWithoutAuthoritiesInput = {
    create?: XOR<RoleCreateWithoutAuthoritiesInput, RoleUncheckedCreateWithoutAuthoritiesInput> | RoleCreateWithoutAuthoritiesInput[] | RoleUncheckedCreateWithoutAuthoritiesInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutAuthoritiesInput | RoleCreateOrConnectWithoutAuthoritiesInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type RoleAuthoritiesUncheckedCreateNestedManyWithoutAuthorityInput = {
    create?: XOR<RoleAuthoritiesCreateWithoutAuthorityInput, RoleAuthoritiesUncheckedCreateWithoutAuthorityInput> | RoleAuthoritiesCreateWithoutAuthorityInput[] | RoleAuthoritiesUncheckedCreateWithoutAuthorityInput[]
    connectOrCreate?: RoleAuthoritiesCreateOrConnectWithoutAuthorityInput | RoleAuthoritiesCreateOrConnectWithoutAuthorityInput[]
    createMany?: RoleAuthoritiesCreateManyAuthorityInputEnvelope
    connect?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
  }

  export type RoleUpdateManyWithoutAuthoritiesNestedInput = {
    create?: XOR<RoleCreateWithoutAuthoritiesInput, RoleUncheckedCreateWithoutAuthoritiesInput> | RoleCreateWithoutAuthoritiesInput[] | RoleUncheckedCreateWithoutAuthoritiesInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutAuthoritiesInput | RoleCreateOrConnectWithoutAuthoritiesInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutAuthoritiesInput | RoleUpsertWithWhereUniqueWithoutAuthoritiesInput[]
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutAuthoritiesInput | RoleUpdateWithWhereUniqueWithoutAuthoritiesInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutAuthoritiesInput | RoleUpdateManyWithWhereWithoutAuthoritiesInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type RoleAuthoritiesUpdateManyWithoutAuthorityNestedInput = {
    create?: XOR<RoleAuthoritiesCreateWithoutAuthorityInput, RoleAuthoritiesUncheckedCreateWithoutAuthorityInput> | RoleAuthoritiesCreateWithoutAuthorityInput[] | RoleAuthoritiesUncheckedCreateWithoutAuthorityInput[]
    connectOrCreate?: RoleAuthoritiesCreateOrConnectWithoutAuthorityInput | RoleAuthoritiesCreateOrConnectWithoutAuthorityInput[]
    upsert?: RoleAuthoritiesUpsertWithWhereUniqueWithoutAuthorityInput | RoleAuthoritiesUpsertWithWhereUniqueWithoutAuthorityInput[]
    createMany?: RoleAuthoritiesCreateManyAuthorityInputEnvelope
    set?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    disconnect?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    delete?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    connect?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    update?: RoleAuthoritiesUpdateWithWhereUniqueWithoutAuthorityInput | RoleAuthoritiesUpdateWithWhereUniqueWithoutAuthorityInput[]
    updateMany?: RoleAuthoritiesUpdateManyWithWhereWithoutAuthorityInput | RoleAuthoritiesUpdateManyWithWhereWithoutAuthorityInput[]
    deleteMany?: RoleAuthoritiesScalarWhereInput | RoleAuthoritiesScalarWhereInput[]
  }

  export type RoleUncheckedUpdateManyWithoutAuthoritiesNestedInput = {
    create?: XOR<RoleCreateWithoutAuthoritiesInput, RoleUncheckedCreateWithoutAuthoritiesInput> | RoleCreateWithoutAuthoritiesInput[] | RoleUncheckedCreateWithoutAuthoritiesInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutAuthoritiesInput | RoleCreateOrConnectWithoutAuthoritiesInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutAuthoritiesInput | RoleUpsertWithWhereUniqueWithoutAuthoritiesInput[]
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutAuthoritiesInput | RoleUpdateWithWhereUniqueWithoutAuthoritiesInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutAuthoritiesInput | RoleUpdateManyWithWhereWithoutAuthoritiesInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type RoleAuthoritiesUncheckedUpdateManyWithoutAuthorityNestedInput = {
    create?: XOR<RoleAuthoritiesCreateWithoutAuthorityInput, RoleAuthoritiesUncheckedCreateWithoutAuthorityInput> | RoleAuthoritiesCreateWithoutAuthorityInput[] | RoleAuthoritiesUncheckedCreateWithoutAuthorityInput[]
    connectOrCreate?: RoleAuthoritiesCreateOrConnectWithoutAuthorityInput | RoleAuthoritiesCreateOrConnectWithoutAuthorityInput[]
    upsert?: RoleAuthoritiesUpsertWithWhereUniqueWithoutAuthorityInput | RoleAuthoritiesUpsertWithWhereUniqueWithoutAuthorityInput[]
    createMany?: RoleAuthoritiesCreateManyAuthorityInputEnvelope
    set?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    disconnect?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    delete?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    connect?: RoleAuthoritiesWhereUniqueInput | RoleAuthoritiesWhereUniqueInput[]
    update?: RoleAuthoritiesUpdateWithWhereUniqueWithoutAuthorityInput | RoleAuthoritiesUpdateWithWhereUniqueWithoutAuthorityInput[]
    updateMany?: RoleAuthoritiesUpdateManyWithWhereWithoutAuthorityInput | RoleAuthoritiesUpdateManyWithWhereWithoutAuthorityInput[]
    deleteMany?: RoleAuthoritiesScalarWhereInput | RoleAuthoritiesScalarWhereInput[]
  }

  export type RoleCreateNestedOneWithoutRoleAuthoritiesInput = {
    create?: XOR<RoleCreateWithoutRoleAuthoritiesInput, RoleUncheckedCreateWithoutRoleAuthoritiesInput>
    connectOrCreate?: RoleCreateOrConnectWithoutRoleAuthoritiesInput
    connect?: RoleWhereUniqueInput
  }

  export type AuthorityCreateNestedOneWithoutRoleAuthoritiesInput = {
    create?: XOR<AuthorityCreateWithoutRoleAuthoritiesInput, AuthorityUncheckedCreateWithoutRoleAuthoritiesInput>
    connectOrCreate?: AuthorityCreateOrConnectWithoutRoleAuthoritiesInput
    connect?: AuthorityWhereUniqueInput
  }

  export type RoleUpdateOneRequiredWithoutRoleAuthoritiesNestedInput = {
    create?: XOR<RoleCreateWithoutRoleAuthoritiesInput, RoleUncheckedCreateWithoutRoleAuthoritiesInput>
    connectOrCreate?: RoleCreateOrConnectWithoutRoleAuthoritiesInput
    upsert?: RoleUpsertWithoutRoleAuthoritiesInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutRoleAuthoritiesInput, RoleUpdateWithoutRoleAuthoritiesInput>, RoleUncheckedUpdateWithoutRoleAuthoritiesInput>
  }

  export type AuthorityUpdateOneRequiredWithoutRoleAuthoritiesNestedInput = {
    create?: XOR<AuthorityCreateWithoutRoleAuthoritiesInput, AuthorityUncheckedCreateWithoutRoleAuthoritiesInput>
    connectOrCreate?: AuthorityCreateOrConnectWithoutRoleAuthoritiesInput
    upsert?: AuthorityUpsertWithoutRoleAuthoritiesInput
    connect?: AuthorityWhereUniqueInput
    update?: XOR<XOR<AuthorityUpdateToOneWithWhereWithoutRoleAuthoritiesInput, AuthorityUpdateWithoutRoleAuthoritiesInput>, AuthorityUncheckedUpdateWithoutRoleAuthoritiesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ProjectCreateWithoutUsersInput = {
    name: string
    description?: string | null
    startDate?: string | null
    endDate?: string | null
    status?: string | null
    field5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskCreateNestedManyWithoutProjectInput
    sprints?: SprintCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectsCreateNestedManyWithoutProjectInput
    user: UserCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    description?: string | null
    projectManager: number
    startDate?: string | null
    endDate?: string | null
    status?: string | null
    field5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintUncheckedCreateNestedManyWithoutProjectInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutUsersInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUsersInput, ProjectUncheckedCreateWithoutUsersInput>
  }

  export type TeamCreateWithoutMembersInput = {
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    teamMembers?: TeamMembersCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutMembersInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutMembersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
  }

  export type RoleCreateWithoutUsersInput = {
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorities?: AuthorityCreateNestedManyWithoutRolesInput
    roleAuthorities?: RoleAuthoritiesCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorities?: AuthorityUncheckedCreateNestedManyWithoutRolesInput
    roleAuthorities?: RoleAuthoritiesUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type TaskCreateWithoutAuthorInput = {
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    project: ProjectCreateNestedOneWithoutTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutTaskInput
    attachments?: AttachmentCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskCreateNestedManyWithoutTaskInput
    sprint?: SprintCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutAuthorInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    projectId: number
    assignedUserId?: number | null
    sprintId?: number | null
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutAuthorInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutAuthorInput, TaskUncheckedCreateWithoutAuthorInput>
  }

  export type TaskCreateManyAuthorInputEnvelope = {
    data: TaskCreateManyAuthorInput | TaskCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutAssigneeInput = {
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    project: ProjectCreateNestedOneWithoutTasksInput
    author: UserCreateNestedOneWithoutAuthoredTasksInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutTaskInput
    attachments?: AttachmentCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskCreateNestedManyWithoutTaskInput
    sprint?: SprintCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutAssigneeInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    projectId: number
    authorUserId: number
    sprintId?: number | null
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput>
  }

  export type TaskCreateManyAssigneeInputEnvelope = {
    data: TaskCreateManyAssigneeInput | TaskCreateManyAssigneeInput[]
    skipDuplicates?: boolean
  }

  export type SubtaskCreateWithoutAuthorInput = {
    title: string
    description?: string | null
    status?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    attachments?: AttachmentCreateNestedManyWithoutSubTaskInput
    assignee?: UserCreateNestedOneWithoutAssignedSubTasksInput
    task: TaskCreateNestedOneWithoutSubTasksInput
    comments?: CommentCreateNestedManyWithoutSubtaskInput
  }

  export type SubtaskUncheckedCreateWithoutAuthorInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    taskId: number
    startDate?: Date | string | null
    dueDate?: Date | string | null
    assignedUserId?: number | null
    attachments?: AttachmentUncheckedCreateNestedManyWithoutSubTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutSubtaskInput
  }

  export type SubtaskCreateOrConnectWithoutAuthorInput = {
    where: SubtaskWhereUniqueInput
    create: XOR<SubtaskCreateWithoutAuthorInput, SubtaskUncheckedCreateWithoutAuthorInput>
  }

  export type SubtaskCreateManyAuthorInputEnvelope = {
    data: SubtaskCreateManyAuthorInput | SubtaskCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type SubtaskCreateWithoutAssigneeInput = {
    title: string
    description?: string | null
    status?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    attachments?: AttachmentCreateNestedManyWithoutSubTaskInput
    author: UserCreateNestedOneWithoutAuthoredSubTasksInput
    task: TaskCreateNestedOneWithoutSubTasksInput
    comments?: CommentCreateNestedManyWithoutSubtaskInput
  }

  export type SubtaskUncheckedCreateWithoutAssigneeInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    taskId: number
    startDate?: Date | string | null
    dueDate?: Date | string | null
    authorUserId: number
    attachments?: AttachmentUncheckedCreateNestedManyWithoutSubTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutSubtaskInput
  }

  export type SubtaskCreateOrConnectWithoutAssigneeInput = {
    where: SubtaskWhereUniqueInput
    create: XOR<SubtaskCreateWithoutAssigneeInput, SubtaskUncheckedCreateWithoutAssigneeInput>
  }

  export type SubtaskCreateManyAssigneeInputEnvelope = {
    data: SubtaskCreateManyAssigneeInput | SubtaskCreateManyAssigneeInput[]
    skipDuplicates?: boolean
  }

  export type TaskAssignmentCreateWithoutUserInput = {
    task: TaskCreateNestedOneWithoutTaskAssignmentsInput
  }

  export type TaskAssignmentUncheckedCreateWithoutUserInput = {
    id?: number
    taskId: number
  }

  export type TaskAssignmentCreateOrConnectWithoutUserInput = {
    where: TaskAssignmentWhereUniqueInput
    create: XOR<TaskAssignmentCreateWithoutUserInput, TaskAssignmentUncheckedCreateWithoutUserInput>
  }

  export type TaskAssignmentCreateManyUserInputEnvelope = {
    data: TaskAssignmentCreateManyUserInput | TaskAssignmentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AttachmentCreateWithoutUploadedByInput = {
    fileURL: string
    fileName?: string | null
    task?: TaskCreateNestedOneWithoutAttachmentsInput
    subTask?: SubtaskCreateNestedOneWithoutAttachmentsInput
  }

  export type AttachmentUncheckedCreateWithoutUploadedByInput = {
    id?: number
    fileURL: string
    fileName?: string | null
    taskId?: number | null
    subTaskId?: number | null
  }

  export type AttachmentCreateOrConnectWithoutUploadedByInput = {
    where: AttachmentWhereUniqueInput
    create: XOR<AttachmentCreateWithoutUploadedByInput, AttachmentUncheckedCreateWithoutUploadedByInput>
  }

  export type AttachmentCreateManyUploadedByInputEnvelope = {
    data: AttachmentCreateManyUploadedByInput | AttachmentCreateManyUploadedByInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    text: string
    username: string
    commentTime: Date | string
    task?: TaskCreateNestedOneWithoutCommentsInput
    subtask?: SubtaskCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: number
    text: string
    taskId: number
    username: string
    commentTime: Date | string
    subtaskId?: number | null
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TeamMembersCreateWithoutUserInput = {
    role: string
    team: TeamCreateNestedOneWithoutTeamMembersInput
  }

  export type TeamMembersUncheckedCreateWithoutUserInput = {
    teamId: number
    role: string
  }

  export type TeamMembersCreateOrConnectWithoutUserInput = {
    where: TeamMembersWhereUniqueInput
    create: XOR<TeamMembersCreateWithoutUserInput, TeamMembersUncheckedCreateWithoutUserInput>
  }

  export type TeamMembersCreateManyUserInputEnvelope = {
    data: TeamMembersCreateManyUserInput | TeamMembersCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserProjectsCreateWithoutUserInput = {
    role: string
    project: ProjectCreateNestedOneWithoutUserProjectsInput
  }

  export type UserProjectsUncheckedCreateWithoutUserInput = {
    projectId: number
    role: string
  }

  export type UserProjectsCreateOrConnectWithoutUserInput = {
    where: UserProjectsWhereUniqueInput
    create: XOR<UserProjectsCreateWithoutUserInput, UserProjectsUncheckedCreateWithoutUserInput>
  }

  export type UserProjectsCreateManyUserInputEnvelope = {
    data: UserProjectsCreateManyUserInput | UserProjectsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutReportsInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReportsInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
  }

  export type UserCreateWithoutReportsToInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReportsToInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReportsToInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsToInput, UserUncheckedCreateWithoutReportsToInput>
  }

  export type UserCreateManyReportsToInputEnvelope = {
    data: UserCreateManyReportsToInput | UserCreateManyReportsToInput[]
    skipDuplicates?: boolean
  }

  export type TaskHistoryCreateWithoutUserInput = {
    startDate: Date | string
    endDate: Date | string
    sprint: string
    task: TaskCreateNestedOneWithoutTaskHistoryInput
  }

  export type TaskHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    taskId: number
    startDate: Date | string
    endDate: Date | string
    sprint: string
  }

  export type TaskHistoryCreateOrConnectWithoutUserInput = {
    where: TaskHistoryWhereUniqueInput
    create: XOR<TaskHistoryCreateWithoutUserInput, TaskHistoryUncheckedCreateWithoutUserInput>
  }

  export type TaskHistoryCreateManyUserInputEnvelope = {
    data: TaskHistoryCreateManyUserInput | TaskHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ScreenshotsCreateWithoutUserInput = {
    username: string
    time: string
    date?: Date | string | null
    base64: string
  }

  export type ScreenshotsUncheckedCreateWithoutUserInput = {
    id?: number
    username: string
    time: string
    date?: Date | string | null
    base64: string
  }

  export type ScreenshotsCreateOrConnectWithoutUserInput = {
    where: ScreenshotsWhereUniqueInput
    create: XOR<ScreenshotsCreateWithoutUserInput, ScreenshotsUncheckedCreateWithoutUserInput>
  }

  export type ScreenshotsCreateManyUserInputEnvelope = {
    data: ScreenshotsCreateManyUserInput | ScreenshotsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutUserInput = {
    name: string
    description?: string | null
    startDate?: string | null
    endDate?: string | null
    status?: string | null
    field5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskCreateNestedManyWithoutProjectInput
    sprints?: SprintCreateNestedManyWithoutProjectInput
    users?: UserCreateNestedManyWithoutProjectsInput
    userProjects?: UserProjectsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    description?: string | null
    startDate?: string | null
    endDate?: string | null
    status?: string | null
    field5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintUncheckedCreateNestedManyWithoutProjectInput
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutUserInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput>
  }

  export type ProfilePictureCreateWithoutUserInput = {
    base64: string
  }

  export type ProfilePictureUncheckedCreateWithoutUserInput = {
    id?: number
    base64: string
  }

  export type ProfilePictureCreateOrConnectWithoutUserInput = {
    where: ProfilePictureWhereUniqueInput
    create: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutUsersInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutUsersInput, ProjectUncheckedUpdateWithoutUsersInput>
    create: XOR<ProjectCreateWithoutUsersInput, ProjectUncheckedCreateWithoutUsersInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutUsersInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutUsersInput, ProjectUncheckedUpdateWithoutUsersInput>
  }

  export type ProjectUpdateManyWithWhereWithoutUsersInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutUsersInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: IntFilter<"Project"> | number
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    projectManager?: IntFilter<"Project"> | number
    startDate?: StringNullableFilter<"Project"> | string | null
    endDate?: StringNullableFilter<"Project"> | string | null
    status?: StringNullableFilter<"Project"> | string | null
    field5?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
  }

  export type TeamUpsertWithWhereUniqueWithoutMembersInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutMembersInput, TeamUncheckedUpdateWithoutMembersInput>
    create: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutMembersInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutMembersInput, TeamUncheckedUpdateWithoutMembersInput>
  }

  export type TeamUpdateManyWithWhereWithoutMembersInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutMembersInput>
  }

  export type TeamScalarWhereInput = {
    AND?: TeamScalarWhereInput | TeamScalarWhereInput[]
    OR?: TeamScalarWhereInput[]
    NOT?: TeamScalarWhereInput | TeamScalarWhereInput[]
    id?: IntFilter<"Team"> | number
    name?: StringFilter<"Team"> | string
    description?: StringFilter<"Team"> | string
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
  }

  export type RoleUpsertWithWhereUniqueWithoutUsersInput = {
    where: RoleWhereUniqueInput
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type RoleUpdateWithWhereUniqueWithoutUsersInput = {
    where: RoleWhereUniqueInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateManyWithWhereWithoutUsersInput = {
    where: RoleScalarWhereInput
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyWithoutUsersInput>
  }

  export type RoleScalarWhereInput = {
    AND?: RoleScalarWhereInput | RoleScalarWhereInput[]
    OR?: RoleScalarWhereInput[]
    NOT?: RoleScalarWhereInput | RoleScalarWhereInput[]
    id?: IntFilter<"Role"> | number
    name?: StringFilter<"Role"> | string
    code?: StringFilter<"Role"> | string
    description?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
  }

  export type TaskUpsertWithWhereUniqueWithoutAuthorInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutAuthorInput, TaskUncheckedUpdateWithoutAuthorInput>
    create: XOR<TaskCreateWithoutAuthorInput, TaskUncheckedCreateWithoutAuthorInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutAuthorInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutAuthorInput, TaskUncheckedUpdateWithoutAuthorInput>
  }

  export type TaskUpdateManyWithWhereWithoutAuthorInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutAuthorInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: IntFilter<"Task"> | number
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: StringNullableFilter<"Task"> | string | null
    priority?: StringNullableFilter<"Task"> | string | null
    tags?: StringNullableFilter<"Task"> | string | null
    startDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    points?: IntNullableFilter<"Task"> | number | null
    projectId?: IntFilter<"Task"> | number
    authorUserId?: IntFilter<"Task"> | number
    assignedUserId?: IntNullableFilter<"Task"> | number | null
    sprintId?: IntNullableFilter<"Task"> | number | null
  }

  export type TaskUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutAssigneeInput, TaskUncheckedUpdateWithoutAssigneeInput>
    create: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutAssigneeInput, TaskUncheckedUpdateWithoutAssigneeInput>
  }

  export type TaskUpdateManyWithWhereWithoutAssigneeInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type SubtaskUpsertWithWhereUniqueWithoutAuthorInput = {
    where: SubtaskWhereUniqueInput
    update: XOR<SubtaskUpdateWithoutAuthorInput, SubtaskUncheckedUpdateWithoutAuthorInput>
    create: XOR<SubtaskCreateWithoutAuthorInput, SubtaskUncheckedCreateWithoutAuthorInput>
  }

  export type SubtaskUpdateWithWhereUniqueWithoutAuthorInput = {
    where: SubtaskWhereUniqueInput
    data: XOR<SubtaskUpdateWithoutAuthorInput, SubtaskUncheckedUpdateWithoutAuthorInput>
  }

  export type SubtaskUpdateManyWithWhereWithoutAuthorInput = {
    where: SubtaskScalarWhereInput
    data: XOR<SubtaskUpdateManyMutationInput, SubtaskUncheckedUpdateManyWithoutAuthorInput>
  }

  export type SubtaskScalarWhereInput = {
    AND?: SubtaskScalarWhereInput | SubtaskScalarWhereInput[]
    OR?: SubtaskScalarWhereInput[]
    NOT?: SubtaskScalarWhereInput | SubtaskScalarWhereInput[]
    id?: IntFilter<"Subtask"> | number
    title?: StringFilter<"Subtask"> | string
    description?: StringNullableFilter<"Subtask"> | string | null
    status?: StringNullableFilter<"Subtask"> | string | null
    taskId?: IntFilter<"Subtask"> | number
    startDate?: DateTimeNullableFilter<"Subtask"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"Subtask"> | Date | string | null
    authorUserId?: IntFilter<"Subtask"> | number
    assignedUserId?: IntNullableFilter<"Subtask"> | number | null
  }

  export type SubtaskUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: SubtaskWhereUniqueInput
    update: XOR<SubtaskUpdateWithoutAssigneeInput, SubtaskUncheckedUpdateWithoutAssigneeInput>
    create: XOR<SubtaskCreateWithoutAssigneeInput, SubtaskUncheckedCreateWithoutAssigneeInput>
  }

  export type SubtaskUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: SubtaskWhereUniqueInput
    data: XOR<SubtaskUpdateWithoutAssigneeInput, SubtaskUncheckedUpdateWithoutAssigneeInput>
  }

  export type SubtaskUpdateManyWithWhereWithoutAssigneeInput = {
    where: SubtaskScalarWhereInput
    data: XOR<SubtaskUpdateManyMutationInput, SubtaskUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type TaskAssignmentUpsertWithWhereUniqueWithoutUserInput = {
    where: TaskAssignmentWhereUniqueInput
    update: XOR<TaskAssignmentUpdateWithoutUserInput, TaskAssignmentUncheckedUpdateWithoutUserInput>
    create: XOR<TaskAssignmentCreateWithoutUserInput, TaskAssignmentUncheckedCreateWithoutUserInput>
  }

  export type TaskAssignmentUpdateWithWhereUniqueWithoutUserInput = {
    where: TaskAssignmentWhereUniqueInput
    data: XOR<TaskAssignmentUpdateWithoutUserInput, TaskAssignmentUncheckedUpdateWithoutUserInput>
  }

  export type TaskAssignmentUpdateManyWithWhereWithoutUserInput = {
    where: TaskAssignmentScalarWhereInput
    data: XOR<TaskAssignmentUpdateManyMutationInput, TaskAssignmentUncheckedUpdateManyWithoutUserInput>
  }

  export type TaskAssignmentScalarWhereInput = {
    AND?: TaskAssignmentScalarWhereInput | TaskAssignmentScalarWhereInput[]
    OR?: TaskAssignmentScalarWhereInput[]
    NOT?: TaskAssignmentScalarWhereInput | TaskAssignmentScalarWhereInput[]
    id?: IntFilter<"TaskAssignment"> | number
    userId?: IntFilter<"TaskAssignment"> | number
    taskId?: IntFilter<"TaskAssignment"> | number
  }

  export type AttachmentUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: AttachmentWhereUniqueInput
    update: XOR<AttachmentUpdateWithoutUploadedByInput, AttachmentUncheckedUpdateWithoutUploadedByInput>
    create: XOR<AttachmentCreateWithoutUploadedByInput, AttachmentUncheckedCreateWithoutUploadedByInput>
  }

  export type AttachmentUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: AttachmentWhereUniqueInput
    data: XOR<AttachmentUpdateWithoutUploadedByInput, AttachmentUncheckedUpdateWithoutUploadedByInput>
  }

  export type AttachmentUpdateManyWithWhereWithoutUploadedByInput = {
    where: AttachmentScalarWhereInput
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type AttachmentScalarWhereInput = {
    AND?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
    OR?: AttachmentScalarWhereInput[]
    NOT?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
    id?: IntFilter<"Attachment"> | number
    fileURL?: StringFilter<"Attachment"> | string
    fileName?: StringNullableFilter<"Attachment"> | string | null
    taskId?: IntNullableFilter<"Attachment"> | number | null
    subTaskId?: IntNullableFilter<"Attachment"> | number | null
    uploadedById?: IntFilter<"Attachment"> | number
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: IntFilter<"Comment"> | number
    text?: StringFilter<"Comment"> | string
    taskId?: IntFilter<"Comment"> | number
    userId?: IntFilter<"Comment"> | number
    username?: StringFilter<"Comment"> | string
    commentTime?: DateTimeFilter<"Comment"> | Date | string
    subtaskId?: IntNullableFilter<"Comment"> | number | null
  }

  export type TeamMembersUpsertWithWhereUniqueWithoutUserInput = {
    where: TeamMembersWhereUniqueInput
    update: XOR<TeamMembersUpdateWithoutUserInput, TeamMembersUncheckedUpdateWithoutUserInput>
    create: XOR<TeamMembersCreateWithoutUserInput, TeamMembersUncheckedCreateWithoutUserInput>
  }

  export type TeamMembersUpdateWithWhereUniqueWithoutUserInput = {
    where: TeamMembersWhereUniqueInput
    data: XOR<TeamMembersUpdateWithoutUserInput, TeamMembersUncheckedUpdateWithoutUserInput>
  }

  export type TeamMembersUpdateManyWithWhereWithoutUserInput = {
    where: TeamMembersScalarWhereInput
    data: XOR<TeamMembersUpdateManyMutationInput, TeamMembersUncheckedUpdateManyWithoutUserInput>
  }

  export type TeamMembersScalarWhereInput = {
    AND?: TeamMembersScalarWhereInput | TeamMembersScalarWhereInput[]
    OR?: TeamMembersScalarWhereInput[]
    NOT?: TeamMembersScalarWhereInput | TeamMembersScalarWhereInput[]
    userId?: IntFilter<"TeamMembers"> | number
    teamId?: IntFilter<"TeamMembers"> | number
    role?: StringFilter<"TeamMembers"> | string
  }

  export type UserProjectsUpsertWithWhereUniqueWithoutUserInput = {
    where: UserProjectsWhereUniqueInput
    update: XOR<UserProjectsUpdateWithoutUserInput, UserProjectsUncheckedUpdateWithoutUserInput>
    create: XOR<UserProjectsCreateWithoutUserInput, UserProjectsUncheckedCreateWithoutUserInput>
  }

  export type UserProjectsUpdateWithWhereUniqueWithoutUserInput = {
    where: UserProjectsWhereUniqueInput
    data: XOR<UserProjectsUpdateWithoutUserInput, UserProjectsUncheckedUpdateWithoutUserInput>
  }

  export type UserProjectsUpdateManyWithWhereWithoutUserInput = {
    where: UserProjectsScalarWhereInput
    data: XOR<UserProjectsUpdateManyMutationInput, UserProjectsUncheckedUpdateManyWithoutUserInput>
  }

  export type UserProjectsScalarWhereInput = {
    AND?: UserProjectsScalarWhereInput | UserProjectsScalarWhereInput[]
    OR?: UserProjectsScalarWhereInput[]
    NOT?: UserProjectsScalarWhereInput | UserProjectsScalarWhereInput[]
    userId?: IntFilter<"UserProjects"> | number
    projectId?: IntFilter<"UserProjects"> | number
    role?: StringFilter<"UserProjects"> | string
  }

  export type UserUpsertWithoutReportsInput = {
    update: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateWithoutReportsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutReportsToInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutReportsToInput, UserUncheckedUpdateWithoutReportsToInput>
    create: XOR<UserCreateWithoutReportsToInput, UserUncheckedCreateWithoutReportsToInput>
  }

  export type UserUpdateWithWhereUniqueWithoutReportsToInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutReportsToInput, UserUncheckedUpdateWithoutReportsToInput>
  }

  export type UserUpdateManyWithWhereWithoutReportsToInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutReportsToInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    userId?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    designation?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    profilePictureId?: IntNullableFilter<"User"> | number | null
    resetPasswordOTP?: StringNullableFilter<"User"> | string | null
    otpExpires?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    reportsToId?: IntNullableFilter<"User"> | number | null
  }

  export type TaskHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: TaskHistoryWhereUniqueInput
    update: XOR<TaskHistoryUpdateWithoutUserInput, TaskHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<TaskHistoryCreateWithoutUserInput, TaskHistoryUncheckedCreateWithoutUserInput>
  }

  export type TaskHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: TaskHistoryWhereUniqueInput
    data: XOR<TaskHistoryUpdateWithoutUserInput, TaskHistoryUncheckedUpdateWithoutUserInput>
  }

  export type TaskHistoryUpdateManyWithWhereWithoutUserInput = {
    where: TaskHistoryScalarWhereInput
    data: XOR<TaskHistoryUpdateManyMutationInput, TaskHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type TaskHistoryScalarWhereInput = {
    AND?: TaskHistoryScalarWhereInput | TaskHistoryScalarWhereInput[]
    OR?: TaskHistoryScalarWhereInput[]
    NOT?: TaskHistoryScalarWhereInput | TaskHistoryScalarWhereInput[]
    id?: IntFilter<"TaskHistory"> | number
    taskId?: IntFilter<"TaskHistory"> | number
    userId?: IntFilter<"TaskHistory"> | number
    startDate?: DateTimeFilter<"TaskHistory"> | Date | string
    endDate?: DateTimeFilter<"TaskHistory"> | Date | string
    sprint?: StringFilter<"TaskHistory"> | string
  }

  export type ScreenshotsUpsertWithWhereUniqueWithoutUserInput = {
    where: ScreenshotsWhereUniqueInput
    update: XOR<ScreenshotsUpdateWithoutUserInput, ScreenshotsUncheckedUpdateWithoutUserInput>
    create: XOR<ScreenshotsCreateWithoutUserInput, ScreenshotsUncheckedCreateWithoutUserInput>
  }

  export type ScreenshotsUpdateWithWhereUniqueWithoutUserInput = {
    where: ScreenshotsWhereUniqueInput
    data: XOR<ScreenshotsUpdateWithoutUserInput, ScreenshotsUncheckedUpdateWithoutUserInput>
  }

  export type ScreenshotsUpdateManyWithWhereWithoutUserInput = {
    where: ScreenshotsScalarWhereInput
    data: XOR<ScreenshotsUpdateManyMutationInput, ScreenshotsUncheckedUpdateManyWithoutUserInput>
  }

  export type ScreenshotsScalarWhereInput = {
    AND?: ScreenshotsScalarWhereInput | ScreenshotsScalarWhereInput[]
    OR?: ScreenshotsScalarWhereInput[]
    NOT?: ScreenshotsScalarWhereInput | ScreenshotsScalarWhereInput[]
    id?: IntFilter<"Screenshots"> | number
    username?: StringFilter<"Screenshots"> | string
    time?: StringFilter<"Screenshots"> | string
    date?: DateTimeNullableFilter<"Screenshots"> | Date | string | null
    base64?: StringFilter<"Screenshots"> | string
    userId?: IntFilter<"Screenshots"> | number
  }

  export type ProjectUpsertWithoutUserInput = {
    update: XOR<ProjectUpdateWithoutUserInput, ProjectUncheckedUpdateWithoutUserInput>
    create: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutUserInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutUserInput, ProjectUncheckedUpdateWithoutUserInput>
  }

  export type ProjectUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    sprints?: SprintUpdateManyWithoutProjectNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    userProjects?: UserProjectsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintUncheckedUpdateManyWithoutProjectNestedInput
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProfilePictureUpsertWithoutUserInput = {
    update: XOR<ProfilePictureUpdateWithoutUserInput, ProfilePictureUncheckedUpdateWithoutUserInput>
    create: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput>
    where?: ProfilePictureWhereInput
  }

  export type ProfilePictureUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfilePictureWhereInput
    data: XOR<ProfilePictureUpdateWithoutUserInput, ProfilePictureUncheckedUpdateWithoutUserInput>
  }

  export type ProfilePictureUpdateWithoutUserInput = {
    base64?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilePictureUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    base64?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutScreenshotInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutScreenshotInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutScreenshotInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutScreenshotInput, UserUncheckedCreateWithoutScreenshotInput>
  }

  export type UserUpsertWithoutScreenshotInput = {
    update: XOR<UserUpdateWithoutScreenshotInput, UserUncheckedUpdateWithoutScreenshotInput>
    create: XOR<UserCreateWithoutScreenshotInput, UserUncheckedCreateWithoutScreenshotInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutScreenshotInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutScreenshotInput, UserUncheckedUpdateWithoutScreenshotInput>
  }

  export type UserUpdateWithoutScreenshotInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutScreenshotInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutProfilePictureInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfilePictureInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfilePictureInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfilePictureInput, UserUncheckedCreateWithoutProfilePictureInput>
  }

  export type UserUpsertWithoutProfilePictureInput = {
    update: XOR<UserUpdateWithoutProfilePictureInput, UserUncheckedUpdateWithoutProfilePictureInput>
    create: XOR<UserCreateWithoutProfilePictureInput, UserUncheckedCreateWithoutProfilePictureInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfilePictureInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfilePictureInput, UserUncheckedUpdateWithoutProfilePictureInput>
  }

  export type UserUpdateWithoutProfilePictureInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfilePictureInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type TaskCreateWithoutProjectInput = {
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    author: UserCreateNestedOneWithoutAuthoredTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutTaskInput
    attachments?: AttachmentCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskCreateNestedManyWithoutTaskInput
    sprint?: SprintCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutProjectInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    authorUserId: number
    assignedUserId?: number | null
    sprintId?: number | null
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutProjectInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput>
  }

  export type TaskCreateManyProjectInputEnvelope = {
    data: TaskCreateManyProjectInput | TaskCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type SprintCreateWithoutProjectInput = {
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    tasks?: TaskCreateNestedManyWithoutSprintInput
  }

  export type SprintUncheckedCreateWithoutProjectInput = {
    id?: number
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutSprintInput
  }

  export type SprintCreateOrConnectWithoutProjectInput = {
    where: SprintWhereUniqueInput
    create: XOR<SprintCreateWithoutProjectInput, SprintUncheckedCreateWithoutProjectInput>
  }

  export type SprintCreateManyProjectInputEnvelope = {
    data: SprintCreateManyProjectInput | SprintCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutProjectsInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type UserProjectsCreateWithoutProjectInput = {
    role: string
    user: UserCreateNestedOneWithoutUserProjectsInput
  }

  export type UserProjectsUncheckedCreateWithoutProjectInput = {
    userId: number
    role: string
  }

  export type UserProjectsCreateOrConnectWithoutProjectInput = {
    where: UserProjectsWhereUniqueInput
    create: XOR<UserProjectsCreateWithoutProjectInput, UserProjectsUncheckedCreateWithoutProjectInput>
  }

  export type UserProjectsCreateManyProjectInputEnvelope = {
    data: UserProjectsCreateManyProjectInput | UserProjectsCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutProjectInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectInput, UserUncheckedCreateWithoutProjectInput>
  }

  export type TaskUpsertWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutProjectInput, TaskUncheckedUpdateWithoutProjectInput>
    create: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutProjectInput, TaskUncheckedUpdateWithoutProjectInput>
  }

  export type TaskUpdateManyWithWhereWithoutProjectInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutProjectInput>
  }

  export type SprintUpsertWithWhereUniqueWithoutProjectInput = {
    where: SprintWhereUniqueInput
    update: XOR<SprintUpdateWithoutProjectInput, SprintUncheckedUpdateWithoutProjectInput>
    create: XOR<SprintCreateWithoutProjectInput, SprintUncheckedCreateWithoutProjectInput>
  }

  export type SprintUpdateWithWhereUniqueWithoutProjectInput = {
    where: SprintWhereUniqueInput
    data: XOR<SprintUpdateWithoutProjectInput, SprintUncheckedUpdateWithoutProjectInput>
  }

  export type SprintUpdateManyWithWhereWithoutProjectInput = {
    where: SprintScalarWhereInput
    data: XOR<SprintUpdateManyMutationInput, SprintUncheckedUpdateManyWithoutProjectInput>
  }

  export type SprintScalarWhereInput = {
    AND?: SprintScalarWhereInput | SprintScalarWhereInput[]
    OR?: SprintScalarWhereInput[]
    NOT?: SprintScalarWhereInput | SprintScalarWhereInput[]
    id?: IntFilter<"Sprint"> | number
    title?: StringFilter<"Sprint"> | string
    description?: StringNullableFilter<"Sprint"> | string | null
    startDate?: DateTimeFilter<"Sprint"> | Date | string
    endDate?: DateTimeFilter<"Sprint"> | Date | string
    projectId?: IntFilter<"Sprint"> | number
  }

  export type UserUpsertWithWhereUniqueWithoutProjectsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutProjectsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type UserUpdateManyWithWhereWithoutProjectsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutProjectsInput>
  }

  export type UserProjectsUpsertWithWhereUniqueWithoutProjectInput = {
    where: UserProjectsWhereUniqueInput
    update: XOR<UserProjectsUpdateWithoutProjectInput, UserProjectsUncheckedUpdateWithoutProjectInput>
    create: XOR<UserProjectsCreateWithoutProjectInput, UserProjectsUncheckedCreateWithoutProjectInput>
  }

  export type UserProjectsUpdateWithWhereUniqueWithoutProjectInput = {
    where: UserProjectsWhereUniqueInput
    data: XOR<UserProjectsUpdateWithoutProjectInput, UserProjectsUncheckedUpdateWithoutProjectInput>
  }

  export type UserProjectsUpdateManyWithWhereWithoutProjectInput = {
    where: UserProjectsScalarWhereInput
    data: XOR<UserProjectsUpdateManyMutationInput, UserProjectsUncheckedUpdateManyWithoutProjectInput>
  }

  export type UserUpsertWithoutProjectInput = {
    update: XOR<UserUpdateWithoutProjectInput, UserUncheckedUpdateWithoutProjectInput>
    create: XOR<UserCreateWithoutProjectInput, UserUncheckedCreateWithoutProjectInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectInput, UserUncheckedUpdateWithoutProjectInput>
  }

  export type UserUpdateWithoutProjectInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectCreateWithoutSprintsInput = {
    name: string
    description?: string | null
    startDate?: string | null
    endDate?: string | null
    status?: string | null
    field5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskCreateNestedManyWithoutProjectInput
    users?: UserCreateNestedManyWithoutProjectsInput
    userProjects?: UserProjectsCreateNestedManyWithoutProjectInput
    user: UserCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutSprintsInput = {
    id?: number
    name: string
    description?: string | null
    projectManager: number
    startDate?: string | null
    endDate?: string | null
    status?: string | null
    field5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutSprintsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutSprintsInput, ProjectUncheckedCreateWithoutSprintsInput>
  }

  export type TaskCreateWithoutSprintInput = {
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    project: ProjectCreateNestedOneWithoutTasksInput
    author: UserCreateNestedOneWithoutAuthoredTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutTaskInput
    attachments?: AttachmentCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutSprintInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    projectId: number
    authorUserId: number
    assignedUserId?: number | null
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutSprintInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutSprintInput, TaskUncheckedCreateWithoutSprintInput>
  }

  export type TaskCreateManySprintInputEnvelope = {
    data: TaskCreateManySprintInput | TaskCreateManySprintInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutSprintsInput = {
    update: XOR<ProjectUpdateWithoutSprintsInput, ProjectUncheckedUpdateWithoutSprintsInput>
    create: XOR<ProjectCreateWithoutSprintsInput, ProjectUncheckedCreateWithoutSprintsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutSprintsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutSprintsInput, ProjectUncheckedUpdateWithoutSprintsInput>
  }

  export type ProjectUpdateWithoutSprintsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    userProjects?: UserProjectsUpdateManyWithoutProjectNestedInput
    user?: UserUpdateOneRequiredWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutSprintsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectManager?: IntFieldUpdateOperationsInput | number
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type TaskUpsertWithWhereUniqueWithoutSprintInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutSprintInput, TaskUncheckedUpdateWithoutSprintInput>
    create: XOR<TaskCreateWithoutSprintInput, TaskUncheckedCreateWithoutSprintInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutSprintInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutSprintInput, TaskUncheckedUpdateWithoutSprintInput>
  }

  export type TaskUpdateManyWithWhereWithoutSprintInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutSprintInput>
  }

  export type ProjectCreateWithoutTasksInput = {
    name: string
    description?: string | null
    startDate?: string | null
    endDate?: string | null
    status?: string | null
    field5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sprints?: SprintCreateNestedManyWithoutProjectInput
    users?: UserCreateNestedManyWithoutProjectsInput
    userProjects?: UserProjectsCreateNestedManyWithoutProjectInput
    user: UserCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutTasksInput = {
    id?: number
    name: string
    description?: string | null
    projectManager: number
    startDate?: string | null
    endDate?: string | null
    status?: string | null
    field5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sprints?: SprintUncheckedCreateNestedManyWithoutProjectInput
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutTasksInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
  }

  export type UserCreateWithoutAuthoredTasksInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuthoredTasksInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuthoredTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuthoredTasksInput, UserUncheckedCreateWithoutAuthoredTasksInput>
  }

  export type UserCreateWithoutAssignedTasksInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedTasksInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
  }

  export type TaskAssignmentCreateWithoutTaskInput = {
    user: UserCreateNestedOneWithoutTaskAssignmentInput
  }

  export type TaskAssignmentUncheckedCreateWithoutTaskInput = {
    id?: number
    userId: number
  }

  export type TaskAssignmentCreateOrConnectWithoutTaskInput = {
    where: TaskAssignmentWhereUniqueInput
    create: XOR<TaskAssignmentCreateWithoutTaskInput, TaskAssignmentUncheckedCreateWithoutTaskInput>
  }

  export type TaskAssignmentCreateManyTaskInputEnvelope = {
    data: TaskAssignmentCreateManyTaskInput | TaskAssignmentCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type AttachmentCreateWithoutTaskInput = {
    fileURL: string
    fileName?: string | null
    subTask?: SubtaskCreateNestedOneWithoutAttachmentsInput
    uploadedBy: UserCreateNestedOneWithoutAttachmentsInput
  }

  export type AttachmentUncheckedCreateWithoutTaskInput = {
    id?: number
    fileURL: string
    fileName?: string | null
    subTaskId?: number | null
    uploadedById: number
  }

  export type AttachmentCreateOrConnectWithoutTaskInput = {
    where: AttachmentWhereUniqueInput
    create: XOR<AttachmentCreateWithoutTaskInput, AttachmentUncheckedCreateWithoutTaskInput>
  }

  export type AttachmentCreateManyTaskInputEnvelope = {
    data: AttachmentCreateManyTaskInput | AttachmentCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutTaskInput = {
    text: string
    username: string
    commentTime: Date | string
    subtask?: SubtaskCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutTaskInput = {
    id?: number
    text: string
    userId: number
    username: string
    commentTime: Date | string
    subtaskId?: number | null
  }

  export type CommentCreateOrConnectWithoutTaskInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput>
  }

  export type CommentCreateManyTaskInputEnvelope = {
    data: CommentCreateManyTaskInput | CommentCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type TaskHistoryCreateWithoutTaskInput = {
    startDate: Date | string
    endDate: Date | string
    sprint: string
    user: UserCreateNestedOneWithoutTaskHistoryInput
  }

  export type TaskHistoryUncheckedCreateWithoutTaskInput = {
    id?: number
    userId: number
    startDate: Date | string
    endDate: Date | string
    sprint: string
  }

  export type TaskHistoryCreateOrConnectWithoutTaskInput = {
    where: TaskHistoryWhereUniqueInput
    create: XOR<TaskHistoryCreateWithoutTaskInput, TaskHistoryUncheckedCreateWithoutTaskInput>
  }

  export type TaskHistoryCreateManyTaskInputEnvelope = {
    data: TaskHistoryCreateManyTaskInput | TaskHistoryCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type SubtaskCreateWithoutTaskInput = {
    title: string
    description?: string | null
    status?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    attachments?: AttachmentCreateNestedManyWithoutSubTaskInput
    assignee?: UserCreateNestedOneWithoutAssignedSubTasksInput
    author: UserCreateNestedOneWithoutAuthoredSubTasksInput
    comments?: CommentCreateNestedManyWithoutSubtaskInput
  }

  export type SubtaskUncheckedCreateWithoutTaskInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    authorUserId: number
    assignedUserId?: number | null
    attachments?: AttachmentUncheckedCreateNestedManyWithoutSubTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutSubtaskInput
  }

  export type SubtaskCreateOrConnectWithoutTaskInput = {
    where: SubtaskWhereUniqueInput
    create: XOR<SubtaskCreateWithoutTaskInput, SubtaskUncheckedCreateWithoutTaskInput>
  }

  export type SubtaskCreateManyTaskInputEnvelope = {
    data: SubtaskCreateManyTaskInput | SubtaskCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type SprintCreateWithoutTasksInput = {
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    project: ProjectCreateNestedOneWithoutSprintsInput
  }

  export type SprintUncheckedCreateWithoutTasksInput = {
    id?: number
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    projectId: number
  }

  export type SprintCreateOrConnectWithoutTasksInput = {
    where: SprintWhereUniqueInput
    create: XOR<SprintCreateWithoutTasksInput, SprintUncheckedCreateWithoutTasksInput>
  }

  export type ProjectUpsertWithoutTasksInput = {
    update: XOR<ProjectUpdateWithoutTasksInput, ProjectUncheckedUpdateWithoutTasksInput>
    create: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutTasksInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutTasksInput, ProjectUncheckedUpdateWithoutTasksInput>
  }

  export type ProjectUpdateWithoutTasksInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sprints?: SprintUpdateManyWithoutProjectNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    userProjects?: UserProjectsUpdateManyWithoutProjectNestedInput
    user?: UserUpdateOneRequiredWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectManager?: IntFieldUpdateOperationsInput | number
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sprints?: SprintUncheckedUpdateManyWithoutProjectNestedInput
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutAuthoredTasksInput = {
    update: XOR<UserUpdateWithoutAuthoredTasksInput, UserUncheckedUpdateWithoutAuthoredTasksInput>
    create: XOR<UserCreateWithoutAuthoredTasksInput, UserUncheckedCreateWithoutAuthoredTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuthoredTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuthoredTasksInput, UserUncheckedUpdateWithoutAuthoredTasksInput>
  }

  export type UserUpdateWithoutAuthoredTasksInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuthoredTasksInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpsertWithoutAssignedTasksInput = {
    update: XOR<UserUpdateWithoutAssignedTasksInput, UserUncheckedUpdateWithoutAssignedTasksInput>
    create: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedTasksInput, UserUncheckedUpdateWithoutAssignedTasksInput>
  }

  export type UserUpdateWithoutAssignedTasksInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedTasksInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type TaskAssignmentUpsertWithWhereUniqueWithoutTaskInput = {
    where: TaskAssignmentWhereUniqueInput
    update: XOR<TaskAssignmentUpdateWithoutTaskInput, TaskAssignmentUncheckedUpdateWithoutTaskInput>
    create: XOR<TaskAssignmentCreateWithoutTaskInput, TaskAssignmentUncheckedCreateWithoutTaskInput>
  }

  export type TaskAssignmentUpdateWithWhereUniqueWithoutTaskInput = {
    where: TaskAssignmentWhereUniqueInput
    data: XOR<TaskAssignmentUpdateWithoutTaskInput, TaskAssignmentUncheckedUpdateWithoutTaskInput>
  }

  export type TaskAssignmentUpdateManyWithWhereWithoutTaskInput = {
    where: TaskAssignmentScalarWhereInput
    data: XOR<TaskAssignmentUpdateManyMutationInput, TaskAssignmentUncheckedUpdateManyWithoutTaskInput>
  }

  export type AttachmentUpsertWithWhereUniqueWithoutTaskInput = {
    where: AttachmentWhereUniqueInput
    update: XOR<AttachmentUpdateWithoutTaskInput, AttachmentUncheckedUpdateWithoutTaskInput>
    create: XOR<AttachmentCreateWithoutTaskInput, AttachmentUncheckedCreateWithoutTaskInput>
  }

  export type AttachmentUpdateWithWhereUniqueWithoutTaskInput = {
    where: AttachmentWhereUniqueInput
    data: XOR<AttachmentUpdateWithoutTaskInput, AttachmentUncheckedUpdateWithoutTaskInput>
  }

  export type AttachmentUpdateManyWithWhereWithoutTaskInput = {
    where: AttachmentScalarWhereInput
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyWithoutTaskInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutTaskInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutTaskInput, CommentUncheckedUpdateWithoutTaskInput>
    create: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutTaskInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutTaskInput, CommentUncheckedUpdateWithoutTaskInput>
  }

  export type CommentUpdateManyWithWhereWithoutTaskInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutTaskInput>
  }

  export type TaskHistoryUpsertWithWhereUniqueWithoutTaskInput = {
    where: TaskHistoryWhereUniqueInput
    update: XOR<TaskHistoryUpdateWithoutTaskInput, TaskHistoryUncheckedUpdateWithoutTaskInput>
    create: XOR<TaskHistoryCreateWithoutTaskInput, TaskHistoryUncheckedCreateWithoutTaskInput>
  }

  export type TaskHistoryUpdateWithWhereUniqueWithoutTaskInput = {
    where: TaskHistoryWhereUniqueInput
    data: XOR<TaskHistoryUpdateWithoutTaskInput, TaskHistoryUncheckedUpdateWithoutTaskInput>
  }

  export type TaskHistoryUpdateManyWithWhereWithoutTaskInput = {
    where: TaskHistoryScalarWhereInput
    data: XOR<TaskHistoryUpdateManyMutationInput, TaskHistoryUncheckedUpdateManyWithoutTaskInput>
  }

  export type SubtaskUpsertWithWhereUniqueWithoutTaskInput = {
    where: SubtaskWhereUniqueInput
    update: XOR<SubtaskUpdateWithoutTaskInput, SubtaskUncheckedUpdateWithoutTaskInput>
    create: XOR<SubtaskCreateWithoutTaskInput, SubtaskUncheckedCreateWithoutTaskInput>
  }

  export type SubtaskUpdateWithWhereUniqueWithoutTaskInput = {
    where: SubtaskWhereUniqueInput
    data: XOR<SubtaskUpdateWithoutTaskInput, SubtaskUncheckedUpdateWithoutTaskInput>
  }

  export type SubtaskUpdateManyWithWhereWithoutTaskInput = {
    where: SubtaskScalarWhereInput
    data: XOR<SubtaskUpdateManyMutationInput, SubtaskUncheckedUpdateManyWithoutTaskInput>
  }

  export type SprintUpsertWithoutTasksInput = {
    update: XOR<SprintUpdateWithoutTasksInput, SprintUncheckedUpdateWithoutTasksInput>
    create: XOR<SprintCreateWithoutTasksInput, SprintUncheckedCreateWithoutTasksInput>
    where?: SprintWhereInput
  }

  export type SprintUpdateToOneWithWhereWithoutTasksInput = {
    where?: SprintWhereInput
    data: XOR<SprintUpdateWithoutTasksInput, SprintUncheckedUpdateWithoutTasksInput>
  }

  export type SprintUpdateWithoutTasksInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutSprintsNestedInput
  }

  export type SprintUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: IntFieldUpdateOperationsInput | number
  }

  export type AttachmentCreateWithoutSubTaskInput = {
    fileURL: string
    fileName?: string | null
    task?: TaskCreateNestedOneWithoutAttachmentsInput
    uploadedBy: UserCreateNestedOneWithoutAttachmentsInput
  }

  export type AttachmentUncheckedCreateWithoutSubTaskInput = {
    id?: number
    fileURL: string
    fileName?: string | null
    taskId?: number | null
    uploadedById: number
  }

  export type AttachmentCreateOrConnectWithoutSubTaskInput = {
    where: AttachmentWhereUniqueInput
    create: XOR<AttachmentCreateWithoutSubTaskInput, AttachmentUncheckedCreateWithoutSubTaskInput>
  }

  export type AttachmentCreateManySubTaskInputEnvelope = {
    data: AttachmentCreateManySubTaskInput | AttachmentCreateManySubTaskInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutAssignedSubTasksInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedSubTasksInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedSubTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedSubTasksInput, UserUncheckedCreateWithoutAssignedSubTasksInput>
  }

  export type UserCreateWithoutAuthoredSubTasksInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuthoredSubTasksInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuthoredSubTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuthoredSubTasksInput, UserUncheckedCreateWithoutAuthoredSubTasksInput>
  }

  export type TaskCreateWithoutSubTasksInput = {
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    project: ProjectCreateNestedOneWithoutTasksInput
    author: UserCreateNestedOneWithoutAuthoredTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutTaskInput
    attachments?: AttachmentCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutTaskInput
    sprint?: SprintCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutSubTasksInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    projectId: number
    authorUserId: number
    assignedUserId?: number | null
    sprintId?: number | null
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutSubTasksInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutSubTasksInput, TaskUncheckedCreateWithoutSubTasksInput>
  }

  export type CommentCreateWithoutSubtaskInput = {
    text: string
    username: string
    commentTime: Date | string
    task?: TaskCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutSubtaskInput = {
    id?: number
    text: string
    taskId: number
    userId: number
    username: string
    commentTime: Date | string
  }

  export type CommentCreateOrConnectWithoutSubtaskInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutSubtaskInput, CommentUncheckedCreateWithoutSubtaskInput>
  }

  export type CommentCreateManySubtaskInputEnvelope = {
    data: CommentCreateManySubtaskInput | CommentCreateManySubtaskInput[]
    skipDuplicates?: boolean
  }

  export type AttachmentUpsertWithWhereUniqueWithoutSubTaskInput = {
    where: AttachmentWhereUniqueInput
    update: XOR<AttachmentUpdateWithoutSubTaskInput, AttachmentUncheckedUpdateWithoutSubTaskInput>
    create: XOR<AttachmentCreateWithoutSubTaskInput, AttachmentUncheckedCreateWithoutSubTaskInput>
  }

  export type AttachmentUpdateWithWhereUniqueWithoutSubTaskInput = {
    where: AttachmentWhereUniqueInput
    data: XOR<AttachmentUpdateWithoutSubTaskInput, AttachmentUncheckedUpdateWithoutSubTaskInput>
  }

  export type AttachmentUpdateManyWithWhereWithoutSubTaskInput = {
    where: AttachmentScalarWhereInput
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyWithoutSubTaskInput>
  }

  export type UserUpsertWithoutAssignedSubTasksInput = {
    update: XOR<UserUpdateWithoutAssignedSubTasksInput, UserUncheckedUpdateWithoutAssignedSubTasksInput>
    create: XOR<UserCreateWithoutAssignedSubTasksInput, UserUncheckedCreateWithoutAssignedSubTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedSubTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedSubTasksInput, UserUncheckedUpdateWithoutAssignedSubTasksInput>
  }

  export type UserUpdateWithoutAssignedSubTasksInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedSubTasksInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpsertWithoutAuthoredSubTasksInput = {
    update: XOR<UserUpdateWithoutAuthoredSubTasksInput, UserUncheckedUpdateWithoutAuthoredSubTasksInput>
    create: XOR<UserCreateWithoutAuthoredSubTasksInput, UserUncheckedCreateWithoutAuthoredSubTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuthoredSubTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuthoredSubTasksInput, UserUncheckedUpdateWithoutAuthoredSubTasksInput>
  }

  export type UserUpdateWithoutAuthoredSubTasksInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuthoredSubTasksInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type TaskUpsertWithoutSubTasksInput = {
    update: XOR<TaskUpdateWithoutSubTasksInput, TaskUncheckedUpdateWithoutSubTasksInput>
    create: XOR<TaskCreateWithoutSubTasksInput, TaskUncheckedCreateWithoutSubTasksInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutSubTasksInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutSubTasksInput, TaskUncheckedUpdateWithoutSubTasksInput>
  }

  export type TaskUpdateWithoutSubTasksInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    author?: UserUpdateOneRequiredWithoutAuthoredTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutTaskNestedInput
    sprint?: SprintUpdateOneWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutSubTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: IntFieldUpdateOperationsInput | number
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    sprintId?: NullableIntFieldUpdateOperationsInput | number | null
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutSubtaskInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutSubtaskInput, CommentUncheckedUpdateWithoutSubtaskInput>
    create: XOR<CommentCreateWithoutSubtaskInput, CommentUncheckedCreateWithoutSubtaskInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutSubtaskInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutSubtaskInput, CommentUncheckedUpdateWithoutSubtaskInput>
  }

  export type CommentUpdateManyWithWhereWithoutSubtaskInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutSubtaskInput>
  }

  export type TaskCreateWithoutTaskHistoryInput = {
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    project: ProjectCreateNestedOneWithoutTasksInput
    author: UserCreateNestedOneWithoutAuthoredTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutTaskInput
    attachments?: AttachmentCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskCreateNestedManyWithoutTaskInput
    sprint?: SprintCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutTaskHistoryInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    projectId: number
    authorUserId: number
    assignedUserId?: number | null
    sprintId?: number | null
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutTaskHistoryInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutTaskHistoryInput, TaskUncheckedCreateWithoutTaskHistoryInput>
  }

  export type UserCreateWithoutTaskHistoryInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTaskHistoryInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTaskHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTaskHistoryInput, UserUncheckedCreateWithoutTaskHistoryInput>
  }

  export type TaskUpsertWithoutTaskHistoryInput = {
    update: XOR<TaskUpdateWithoutTaskHistoryInput, TaskUncheckedUpdateWithoutTaskHistoryInput>
    create: XOR<TaskCreateWithoutTaskHistoryInput, TaskUncheckedCreateWithoutTaskHistoryInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutTaskHistoryInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutTaskHistoryInput, TaskUncheckedUpdateWithoutTaskHistoryInput>
  }

  export type TaskUpdateWithoutTaskHistoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    author?: UserUpdateOneRequiredWithoutAuthoredTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUpdateManyWithoutTaskNestedInput
    sprint?: SprintUpdateOneWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutTaskHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: IntFieldUpdateOperationsInput | number
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    sprintId?: NullableIntFieldUpdateOperationsInput | number | null
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type UserUpsertWithoutTaskHistoryInput = {
    update: XOR<UserUpdateWithoutTaskHistoryInput, UserUncheckedUpdateWithoutTaskHistoryInput>
    create: XOR<UserCreateWithoutTaskHistoryInput, UserUncheckedCreateWithoutTaskHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTaskHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTaskHistoryInput, UserUncheckedUpdateWithoutTaskHistoryInput>
  }

  export type UserUpdateWithoutTaskHistoryInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTaskHistoryInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type TaskCreateWithoutCommentsInput = {
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    project: ProjectCreateNestedOneWithoutTasksInput
    author: UserCreateNestedOneWithoutAuthoredTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutTaskInput
    attachments?: AttachmentCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskCreateNestedManyWithoutTaskInput
    sprint?: SprintCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutCommentsInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    projectId: number
    authorUserId: number
    assignedUserId?: number | null
    sprintId?: number | null
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutCommentsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
  }

  export type SubtaskCreateWithoutCommentsInput = {
    title: string
    description?: string | null
    status?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    attachments?: AttachmentCreateNestedManyWithoutSubTaskInput
    assignee?: UserCreateNestedOneWithoutAssignedSubTasksInput
    author: UserCreateNestedOneWithoutAuthoredSubTasksInput
    task: TaskCreateNestedOneWithoutSubTasksInput
  }

  export type SubtaskUncheckedCreateWithoutCommentsInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    taskId: number
    startDate?: Date | string | null
    dueDate?: Date | string | null
    authorUserId: number
    assignedUserId?: number | null
    attachments?: AttachmentUncheckedCreateNestedManyWithoutSubTaskInput
  }

  export type SubtaskCreateOrConnectWithoutCommentsInput = {
    where: SubtaskWhereUniqueInput
    create: XOR<SubtaskCreateWithoutCommentsInput, SubtaskUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type TaskUpsertWithoutCommentsInput = {
    update: XOR<TaskUpdateWithoutCommentsInput, TaskUncheckedUpdateWithoutCommentsInput>
    create: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutCommentsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutCommentsInput, TaskUncheckedUpdateWithoutCommentsInput>
  }

  export type TaskUpdateWithoutCommentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    author?: UserUpdateOneRequiredWithoutAuthoredTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUpdateManyWithoutTaskNestedInput
    sprint?: SprintUpdateOneWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: IntFieldUpdateOperationsInput | number
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    sprintId?: NullableIntFieldUpdateOperationsInput | number | null
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type SubtaskUpsertWithoutCommentsInput = {
    update: XOR<SubtaskUpdateWithoutCommentsInput, SubtaskUncheckedUpdateWithoutCommentsInput>
    create: XOR<SubtaskCreateWithoutCommentsInput, SubtaskUncheckedCreateWithoutCommentsInput>
    where?: SubtaskWhereInput
  }

  export type SubtaskUpdateToOneWithWhereWithoutCommentsInput = {
    where?: SubtaskWhereInput
    data: XOR<SubtaskUpdateWithoutCommentsInput, SubtaskUncheckedUpdateWithoutCommentsInput>
  }

  export type SubtaskUpdateWithoutCommentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attachments?: AttachmentUpdateManyWithoutSubTaskNestedInput
    assignee?: UserUpdateOneWithoutAssignedSubTasksNestedInput
    author?: UserUpdateOneRequiredWithoutAuthoredSubTasksNestedInput
    task?: TaskUpdateOneRequiredWithoutSubTasksNestedInput
  }

  export type SubtaskUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    attachments?: AttachmentUncheckedUpdateManyWithoutSubTaskNestedInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutTaskAssignmentInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTaskAssignmentInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTaskAssignmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTaskAssignmentInput, UserUncheckedCreateWithoutTaskAssignmentInput>
  }

  export type TaskCreateWithoutTaskAssignmentsInput = {
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    project: ProjectCreateNestedOneWithoutTasksInput
    author: UserCreateNestedOneWithoutAuthoredTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    attachments?: AttachmentCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskCreateNestedManyWithoutTaskInput
    sprint?: SprintCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutTaskAssignmentsInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    projectId: number
    authorUserId: number
    assignedUserId?: number | null
    sprintId?: number | null
    attachments?: AttachmentUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutTaskAssignmentsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutTaskAssignmentsInput, TaskUncheckedCreateWithoutTaskAssignmentsInput>
  }

  export type UserUpsertWithoutTaskAssignmentInput = {
    update: XOR<UserUpdateWithoutTaskAssignmentInput, UserUncheckedUpdateWithoutTaskAssignmentInput>
    create: XOR<UserCreateWithoutTaskAssignmentInput, UserUncheckedCreateWithoutTaskAssignmentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTaskAssignmentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTaskAssignmentInput, UserUncheckedUpdateWithoutTaskAssignmentInput>
  }

  export type UserUpdateWithoutTaskAssignmentInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTaskAssignmentInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type TaskUpsertWithoutTaskAssignmentsInput = {
    update: XOR<TaskUpdateWithoutTaskAssignmentsInput, TaskUncheckedUpdateWithoutTaskAssignmentsInput>
    create: XOR<TaskCreateWithoutTaskAssignmentsInput, TaskUncheckedCreateWithoutTaskAssignmentsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutTaskAssignmentsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutTaskAssignmentsInput, TaskUncheckedUpdateWithoutTaskAssignmentsInput>
  }

  export type TaskUpdateWithoutTaskAssignmentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    author?: UserUpdateOneRequiredWithoutAuthoredTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    attachments?: AttachmentUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUpdateManyWithoutTaskNestedInput
    sprint?: SprintUpdateOneWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutTaskAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: IntFieldUpdateOperationsInput | number
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    sprintId?: NullableIntFieldUpdateOperationsInput | number | null
    attachments?: AttachmentUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateWithoutAttachmentsInput = {
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    project: ProjectCreateNestedOneWithoutTasksInput
    author: UserCreateNestedOneWithoutAuthoredTasksInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    taskAssignments?: TaskAssignmentCreateNestedManyWithoutTaskInput
    comments?: CommentCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskCreateNestedManyWithoutTaskInput
    sprint?: SprintCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutAttachmentsInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    projectId: number
    authorUserId: number
    assignedUserId?: number | null
    sprintId?: number | null
    taskAssignments?: TaskAssignmentUncheckedCreateNestedManyWithoutTaskInput
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutTaskInput
    subTasks?: SubtaskUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutAttachmentsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutAttachmentsInput, TaskUncheckedCreateWithoutAttachmentsInput>
  }

  export type SubtaskCreateWithoutAttachmentsInput = {
    title: string
    description?: string | null
    status?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    assignee?: UserCreateNestedOneWithoutAssignedSubTasksInput
    author: UserCreateNestedOneWithoutAuthoredSubTasksInput
    task: TaskCreateNestedOneWithoutSubTasksInput
    comments?: CommentCreateNestedManyWithoutSubtaskInput
  }

  export type SubtaskUncheckedCreateWithoutAttachmentsInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    taskId: number
    startDate?: Date | string | null
    dueDate?: Date | string | null
    authorUserId: number
    assignedUserId?: number | null
    comments?: CommentUncheckedCreateNestedManyWithoutSubtaskInput
  }

  export type SubtaskCreateOrConnectWithoutAttachmentsInput = {
    where: SubtaskWhereUniqueInput
    create: XOR<SubtaskCreateWithoutAttachmentsInput, SubtaskUncheckedCreateWithoutAttachmentsInput>
  }

  export type UserCreateWithoutAttachmentsInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAttachmentsInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAttachmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttachmentsInput, UserUncheckedCreateWithoutAttachmentsInput>
  }

  export type TaskUpsertWithoutAttachmentsInput = {
    update: XOR<TaskUpdateWithoutAttachmentsInput, TaskUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<TaskCreateWithoutAttachmentsInput, TaskUncheckedCreateWithoutAttachmentsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutAttachmentsInput, TaskUncheckedUpdateWithoutAttachmentsInput>
  }

  export type TaskUpdateWithoutAttachmentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    author?: UserUpdateOneRequiredWithoutAuthoredTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUpdateManyWithoutTaskNestedInput
    sprint?: SprintUpdateOneWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutAttachmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: IntFieldUpdateOperationsInput | number
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    sprintId?: NullableIntFieldUpdateOperationsInput | number | null
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type SubtaskUpsertWithoutAttachmentsInput = {
    update: XOR<SubtaskUpdateWithoutAttachmentsInput, SubtaskUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<SubtaskCreateWithoutAttachmentsInput, SubtaskUncheckedCreateWithoutAttachmentsInput>
    where?: SubtaskWhereInput
  }

  export type SubtaskUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: SubtaskWhereInput
    data: XOR<SubtaskUpdateWithoutAttachmentsInput, SubtaskUncheckedUpdateWithoutAttachmentsInput>
  }

  export type SubtaskUpdateWithoutAttachmentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignee?: UserUpdateOneWithoutAssignedSubTasksNestedInput
    author?: UserUpdateOneRequiredWithoutAuthoredSubTasksNestedInput
    task?: TaskUpdateOneRequiredWithoutSubTasksNestedInput
    comments?: CommentUpdateManyWithoutSubtaskNestedInput
  }

  export type SubtaskUncheckedUpdateWithoutAttachmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    comments?: CommentUncheckedUpdateManyWithoutSubtaskNestedInput
  }

  export type UserUpsertWithoutAttachmentsInput = {
    update: XOR<UserUpdateWithoutAttachmentsInput, UserUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<UserCreateWithoutAttachmentsInput, UserUncheckedCreateWithoutAttachmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttachmentsInput, UserUncheckedUpdateWithoutAttachmentsInput>
  }

  export type UserUpdateWithoutAttachmentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAttachmentsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutUserProjectsInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserProjectsInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserProjectsInput, UserUncheckedCreateWithoutUserProjectsInput>
  }

  export type ProjectCreateWithoutUserProjectsInput = {
    name: string
    description?: string | null
    startDate?: string | null
    endDate?: string | null
    status?: string | null
    field5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskCreateNestedManyWithoutProjectInput
    sprints?: SprintCreateNestedManyWithoutProjectInput
    users?: UserCreateNestedManyWithoutProjectsInput
    user: UserCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutUserProjectsInput = {
    id?: number
    name: string
    description?: string | null
    projectManager: number
    startDate?: string | null
    endDate?: string | null
    status?: string | null
    field5?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    sprints?: SprintUncheckedCreateNestedManyWithoutProjectInput
    users?: UserUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectCreateOrConnectWithoutUserProjectsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUserProjectsInput, ProjectUncheckedCreateWithoutUserProjectsInput>
  }

  export type UserUpsertWithoutUserProjectsInput = {
    update: XOR<UserUpdateWithoutUserProjectsInput, UserUncheckedUpdateWithoutUserProjectsInput>
    create: XOR<UserCreateWithoutUserProjectsInput, UserUncheckedCreateWithoutUserProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserProjectsInput, UserUncheckedUpdateWithoutUserProjectsInput>
  }

  export type UserUpdateWithoutUserProjectsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserProjectsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ProjectUpsertWithoutUserProjectsInput = {
    update: XOR<ProjectUpdateWithoutUserProjectsInput, ProjectUncheckedUpdateWithoutUserProjectsInput>
    create: XOR<ProjectCreateWithoutUserProjectsInput, ProjectUncheckedCreateWithoutUserProjectsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutUserProjectsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutUserProjectsInput, ProjectUncheckedUpdateWithoutUserProjectsInput>
  }

  export type ProjectUpdateWithoutUserProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    sprints?: SprintUpdateManyWithoutProjectNestedInput
    users?: UserUpdateManyWithoutProjectsNestedInput
    user?: UserUpdateOneRequiredWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutUserProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectManager?: IntFieldUpdateOperationsInput | number
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintUncheckedUpdateManyWithoutProjectNestedInput
    users?: UserUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type UserCreateWithoutTeamsInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeamsInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
  }

  export type TeamMembersCreateWithoutTeamInput = {
    role: string
    user: UserCreateNestedOneWithoutTeamMembersInput
  }

  export type TeamMembersUncheckedCreateWithoutTeamInput = {
    userId: number
    role: string
  }

  export type TeamMembersCreateOrConnectWithoutTeamInput = {
    where: TeamMembersWhereUniqueInput
    create: XOR<TeamMembersCreateWithoutTeamInput, TeamMembersUncheckedCreateWithoutTeamInput>
  }

  export type TeamMembersCreateManyTeamInputEnvelope = {
    data: TeamMembersCreateManyTeamInput | TeamMembersCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutTeamsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTeamsInput, UserUncheckedUpdateWithoutTeamsInput>
    create: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTeamsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTeamsInput, UserUncheckedUpdateWithoutTeamsInput>
  }

  export type UserUpdateManyWithWhereWithoutTeamsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTeamsInput>
  }

  export type TeamMembersUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamMembersWhereUniqueInput
    update: XOR<TeamMembersUpdateWithoutTeamInput, TeamMembersUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamMembersCreateWithoutTeamInput, TeamMembersUncheckedCreateWithoutTeamInput>
  }

  export type TeamMembersUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamMembersWhereUniqueInput
    data: XOR<TeamMembersUpdateWithoutTeamInput, TeamMembersUncheckedUpdateWithoutTeamInput>
  }

  export type TeamMembersUpdateManyWithWhereWithoutTeamInput = {
    where: TeamMembersScalarWhereInput
    data: XOR<TeamMembersUpdateManyMutationInput, TeamMembersUncheckedUpdateManyWithoutTeamInput>
  }

  export type UserCreateWithoutTeamMembersInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeamMembersInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
  }

  export type TeamCreateWithoutTeamMembersInput = {
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserCreateNestedManyWithoutTeamsInput
  }

  export type TeamUncheckedCreateWithoutTeamMembersInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type TeamCreateOrConnectWithoutTeamMembersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutTeamMembersInput, TeamUncheckedCreateWithoutTeamMembersInput>
  }

  export type UserUpsertWithoutTeamMembersInput = {
    update: XOR<UserUpdateWithoutTeamMembersInput, UserUncheckedUpdateWithoutTeamMembersInput>
    create: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamMembersInput, UserUncheckedUpdateWithoutTeamMembersInput>
  }

  export type UserUpdateWithoutTeamMembersInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamMembersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type TeamUpsertWithoutTeamMembersInput = {
    update: XOR<TeamUpdateWithoutTeamMembersInput, TeamUncheckedUpdateWithoutTeamMembersInput>
    create: XOR<TeamCreateWithoutTeamMembersInput, TeamUncheckedCreateWithoutTeamMembersInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutTeamMembersInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutTeamMembersInput, TeamUncheckedUpdateWithoutTeamMembersInput>
  }

  export type TeamUpdateWithoutTeamMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUpdateManyWithoutTeamsNestedInput
  }

  export type TeamUncheckedUpdateWithoutTeamMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type UserCreateWithoutRolesInput = {
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutUsersInput
    teams?: TeamCreateNestedManyWithoutMembersInput
    authoredTasks?: TaskCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUploadedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsCreateNestedManyWithoutUserInput
    reportsTo?: UserCreateNestedOneWithoutReportsInput
    reports?: UserCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsCreateNestedManyWithoutUserInput
    project?: ProjectCreateNestedOneWithoutUserInput
    profilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRolesInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportsToId?: number | null
    projects?: ProjectUncheckedCreateNestedManyWithoutUsersInput
    teams?: TeamUncheckedCreateNestedManyWithoutMembersInput
    authoredTasks?: TaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    authoredSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAuthorInput
    assignedSubTasks?: SubtaskUncheckedCreateNestedManyWithoutAssigneeInput
    taskAssignment?: TaskAssignmentUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMembersUncheckedCreateNestedManyWithoutUserInput
    userProjects?: UserProjectsUncheckedCreateNestedManyWithoutUserInput
    reports?: UserUncheckedCreateNestedManyWithoutReportsToInput
    taskHistory?: TaskHistoryUncheckedCreateNestedManyWithoutUserInput
    screenshot?: ScreenshotsUncheckedCreateNestedManyWithoutUserInput
    project?: ProjectUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type AuthorityCreateWithoutRolesInput = {
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roleAuthorities?: RoleAuthoritiesCreateNestedManyWithoutAuthorityInput
  }

  export type AuthorityUncheckedCreateWithoutRolesInput = {
    id?: number
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roleAuthorities?: RoleAuthoritiesUncheckedCreateNestedManyWithoutAuthorityInput
  }

  export type AuthorityCreateOrConnectWithoutRolesInput = {
    where: AuthorityWhereUniqueInput
    create: XOR<AuthorityCreateWithoutRolesInput, AuthorityUncheckedCreateWithoutRolesInput>
  }

  export type RoleAuthoritiesCreateWithoutRoleInput = {
    authority: AuthorityCreateNestedOneWithoutRoleAuthoritiesInput
  }

  export type RoleAuthoritiesUncheckedCreateWithoutRoleInput = {
    authorityId: number
  }

  export type RoleAuthoritiesCreateOrConnectWithoutRoleInput = {
    where: RoleAuthoritiesWhereUniqueInput
    create: XOR<RoleAuthoritiesCreateWithoutRoleInput, RoleAuthoritiesUncheckedCreateWithoutRoleInput>
  }

  export type RoleAuthoritiesCreateManyRoleInputEnvelope = {
    data: RoleAuthoritiesCreateManyRoleInput | RoleAuthoritiesCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRolesInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRolesInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
  }

  export type UserUpdateManyWithWhereWithoutRolesInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRolesInput>
  }

  export type AuthorityUpsertWithWhereUniqueWithoutRolesInput = {
    where: AuthorityWhereUniqueInput
    update: XOR<AuthorityUpdateWithoutRolesInput, AuthorityUncheckedUpdateWithoutRolesInput>
    create: XOR<AuthorityCreateWithoutRolesInput, AuthorityUncheckedCreateWithoutRolesInput>
  }

  export type AuthorityUpdateWithWhereUniqueWithoutRolesInput = {
    where: AuthorityWhereUniqueInput
    data: XOR<AuthorityUpdateWithoutRolesInput, AuthorityUncheckedUpdateWithoutRolesInput>
  }

  export type AuthorityUpdateManyWithWhereWithoutRolesInput = {
    where: AuthorityScalarWhereInput
    data: XOR<AuthorityUpdateManyMutationInput, AuthorityUncheckedUpdateManyWithoutRolesInput>
  }

  export type AuthorityScalarWhereInput = {
    AND?: AuthorityScalarWhereInput | AuthorityScalarWhereInput[]
    OR?: AuthorityScalarWhereInput[]
    NOT?: AuthorityScalarWhereInput | AuthorityScalarWhereInput[]
    id?: IntFilter<"Authority"> | number
    name?: StringFilter<"Authority"> | string
    code?: StringFilter<"Authority"> | string
    description?: StringFilter<"Authority"> | string
    createdAt?: DateTimeFilter<"Authority"> | Date | string
    updatedAt?: DateTimeFilter<"Authority"> | Date | string
  }

  export type RoleAuthoritiesUpsertWithWhereUniqueWithoutRoleInput = {
    where: RoleAuthoritiesWhereUniqueInput
    update: XOR<RoleAuthoritiesUpdateWithoutRoleInput, RoleAuthoritiesUncheckedUpdateWithoutRoleInput>
    create: XOR<RoleAuthoritiesCreateWithoutRoleInput, RoleAuthoritiesUncheckedCreateWithoutRoleInput>
  }

  export type RoleAuthoritiesUpdateWithWhereUniqueWithoutRoleInput = {
    where: RoleAuthoritiesWhereUniqueInput
    data: XOR<RoleAuthoritiesUpdateWithoutRoleInput, RoleAuthoritiesUncheckedUpdateWithoutRoleInput>
  }

  export type RoleAuthoritiesUpdateManyWithWhereWithoutRoleInput = {
    where: RoleAuthoritiesScalarWhereInput
    data: XOR<RoleAuthoritiesUpdateManyMutationInput, RoleAuthoritiesUncheckedUpdateManyWithoutRoleInput>
  }

  export type RoleAuthoritiesScalarWhereInput = {
    AND?: RoleAuthoritiesScalarWhereInput | RoleAuthoritiesScalarWhereInput[]
    OR?: RoleAuthoritiesScalarWhereInput[]
    NOT?: RoleAuthoritiesScalarWhereInput | RoleAuthoritiesScalarWhereInput[]
    roleId?: IntFilter<"RoleAuthorities"> | number
    authorityId?: IntFilter<"RoleAuthorities"> | number
  }

  export type RoleCreateWithoutAuthoritiesInput = {
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutRolesInput
    roleAuthorities?: RoleAuthoritiesCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutAuthoritiesInput = {
    id?: number
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutRolesInput
    roleAuthorities?: RoleAuthoritiesUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutAuthoritiesInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutAuthoritiesInput, RoleUncheckedCreateWithoutAuthoritiesInput>
  }

  export type RoleAuthoritiesCreateWithoutAuthorityInput = {
    role: RoleCreateNestedOneWithoutRoleAuthoritiesInput
  }

  export type RoleAuthoritiesUncheckedCreateWithoutAuthorityInput = {
    roleId: number
  }

  export type RoleAuthoritiesCreateOrConnectWithoutAuthorityInput = {
    where: RoleAuthoritiesWhereUniqueInput
    create: XOR<RoleAuthoritiesCreateWithoutAuthorityInput, RoleAuthoritiesUncheckedCreateWithoutAuthorityInput>
  }

  export type RoleAuthoritiesCreateManyAuthorityInputEnvelope = {
    data: RoleAuthoritiesCreateManyAuthorityInput | RoleAuthoritiesCreateManyAuthorityInput[]
    skipDuplicates?: boolean
  }

  export type RoleUpsertWithWhereUniqueWithoutAuthoritiesInput = {
    where: RoleWhereUniqueInput
    update: XOR<RoleUpdateWithoutAuthoritiesInput, RoleUncheckedUpdateWithoutAuthoritiesInput>
    create: XOR<RoleCreateWithoutAuthoritiesInput, RoleUncheckedCreateWithoutAuthoritiesInput>
  }

  export type RoleUpdateWithWhereUniqueWithoutAuthoritiesInput = {
    where: RoleWhereUniqueInput
    data: XOR<RoleUpdateWithoutAuthoritiesInput, RoleUncheckedUpdateWithoutAuthoritiesInput>
  }

  export type RoleUpdateManyWithWhereWithoutAuthoritiesInput = {
    where: RoleScalarWhereInput
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyWithoutAuthoritiesInput>
  }

  export type RoleAuthoritiesUpsertWithWhereUniqueWithoutAuthorityInput = {
    where: RoleAuthoritiesWhereUniqueInput
    update: XOR<RoleAuthoritiesUpdateWithoutAuthorityInput, RoleAuthoritiesUncheckedUpdateWithoutAuthorityInput>
    create: XOR<RoleAuthoritiesCreateWithoutAuthorityInput, RoleAuthoritiesUncheckedCreateWithoutAuthorityInput>
  }

  export type RoleAuthoritiesUpdateWithWhereUniqueWithoutAuthorityInput = {
    where: RoleAuthoritiesWhereUniqueInput
    data: XOR<RoleAuthoritiesUpdateWithoutAuthorityInput, RoleAuthoritiesUncheckedUpdateWithoutAuthorityInput>
  }

  export type RoleAuthoritiesUpdateManyWithWhereWithoutAuthorityInput = {
    where: RoleAuthoritiesScalarWhereInput
    data: XOR<RoleAuthoritiesUpdateManyMutationInput, RoleAuthoritiesUncheckedUpdateManyWithoutAuthorityInput>
  }

  export type RoleCreateWithoutRoleAuthoritiesInput = {
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutRolesInput
    authorities?: AuthorityCreateNestedManyWithoutRolesInput
  }

  export type RoleUncheckedCreateWithoutRoleAuthoritiesInput = {
    id?: number
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutRolesInput
    authorities?: AuthorityUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RoleCreateOrConnectWithoutRoleAuthoritiesInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutRoleAuthoritiesInput, RoleUncheckedCreateWithoutRoleAuthoritiesInput>
  }

  export type AuthorityCreateWithoutRoleAuthoritiesInput = {
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roles?: RoleCreateNestedManyWithoutAuthoritiesInput
  }

  export type AuthorityUncheckedCreateWithoutRoleAuthoritiesInput = {
    id?: number
    name: string
    code: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roles?: RoleUncheckedCreateNestedManyWithoutAuthoritiesInput
  }

  export type AuthorityCreateOrConnectWithoutRoleAuthoritiesInput = {
    where: AuthorityWhereUniqueInput
    create: XOR<AuthorityCreateWithoutRoleAuthoritiesInput, AuthorityUncheckedCreateWithoutRoleAuthoritiesInput>
  }

  export type RoleUpsertWithoutRoleAuthoritiesInput = {
    update: XOR<RoleUpdateWithoutRoleAuthoritiesInput, RoleUncheckedUpdateWithoutRoleAuthoritiesInput>
    create: XOR<RoleCreateWithoutRoleAuthoritiesInput, RoleUncheckedCreateWithoutRoleAuthoritiesInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutRoleAuthoritiesInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutRoleAuthoritiesInput, RoleUncheckedUpdateWithoutRoleAuthoritiesInput>
  }

  export type RoleUpdateWithoutRoleAuthoritiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutRolesNestedInput
    authorities?: AuthorityUpdateManyWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateWithoutRoleAuthoritiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutRolesNestedInput
    authorities?: AuthorityUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type AuthorityUpsertWithoutRoleAuthoritiesInput = {
    update: XOR<AuthorityUpdateWithoutRoleAuthoritiesInput, AuthorityUncheckedUpdateWithoutRoleAuthoritiesInput>
    create: XOR<AuthorityCreateWithoutRoleAuthoritiesInput, AuthorityUncheckedCreateWithoutRoleAuthoritiesInput>
    where?: AuthorityWhereInput
  }

  export type AuthorityUpdateToOneWithWhereWithoutRoleAuthoritiesInput = {
    where?: AuthorityWhereInput
    data: XOR<AuthorityUpdateWithoutRoleAuthoritiesInput, AuthorityUncheckedUpdateWithoutRoleAuthoritiesInput>
  }

  export type AuthorityUpdateWithoutRoleAuthoritiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: RoleUpdateManyWithoutAuthoritiesNestedInput
  }

  export type AuthorityUncheckedUpdateWithoutRoleAuthoritiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: RoleUncheckedUpdateManyWithoutAuthoritiesNestedInput
  }

  export type TaskCreateManyAuthorInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    projectId: number
    assignedUserId?: number | null
    sprintId?: number | null
  }

  export type TaskCreateManyAssigneeInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    projectId: number
    authorUserId: number
    sprintId?: number | null
  }

  export type SubtaskCreateManyAuthorInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    taskId: number
    startDate?: Date | string | null
    dueDate?: Date | string | null
    assignedUserId?: number | null
  }

  export type SubtaskCreateManyAssigneeInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    taskId: number
    startDate?: Date | string | null
    dueDate?: Date | string | null
    authorUserId: number
  }

  export type TaskAssignmentCreateManyUserInput = {
    id?: number
    taskId: number
  }

  export type AttachmentCreateManyUploadedByInput = {
    id?: number
    fileURL: string
    fileName?: string | null
    taskId?: number | null
    subTaskId?: number | null
  }

  export type CommentCreateManyUserInput = {
    id?: number
    text: string
    taskId: number
    username: string
    commentTime: Date | string
    subtaskId?: number | null
  }

  export type TeamMembersCreateManyUserInput = {
    teamId: number
    role: string
  }

  export type UserProjectsCreateManyUserInput = {
    projectId: number
    role: string
  }

  export type UserCreateManyReportsToInput = {
    userId?: number
    email: string
    password: string
    username: string
    designation: string
    phoneNumber: string
    profilePictureId?: number | null
    resetPasswordOTP?: string | null
    otpExpires?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskHistoryCreateManyUserInput = {
    id?: number
    taskId: number
    startDate: Date | string
    endDate: Date | string
    sprint: string
  }

  export type ScreenshotsCreateManyUserInput = {
    id?: number
    username: string
    time: string
    date?: Date | string | null
    base64: string
  }

  export type ProjectUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    sprints?: SprintUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectsUpdateManyWithoutProjectNestedInput
    user?: UserUpdateOneRequiredWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectManager?: IntFieldUpdateOperationsInput | number
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    sprints?: SprintUncheckedUpdateManyWithoutProjectNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectManager?: IntFieldUpdateOperationsInput | number
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    field5?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUpdateWithoutMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamMembers?: TeamMembersUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateManyWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorities?: AuthorityUpdateManyWithoutRolesNestedInput
    roleAuthorities?: RoleAuthoritiesUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorities?: AuthorityUncheckedUpdateManyWithoutRolesNestedInput
    roleAuthorities?: RoleAuthoritiesUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUpdateManyWithoutTaskNestedInput
    sprint?: SprintUpdateOneWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    sprintId?: NullableIntFieldUpdateOperationsInput | number | null
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    sprintId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TaskUpdateWithoutAssigneeInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    author?: UserUpdateOneRequiredWithoutAuthoredTasksNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUpdateManyWithoutTaskNestedInput
    sprint?: SprintUpdateOneWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutAssigneeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: IntFieldUpdateOperationsInput | number
    authorUserId?: IntFieldUpdateOperationsInput | number
    sprintId?: NullableIntFieldUpdateOperationsInput | number | null
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutAssigneeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: IntFieldUpdateOperationsInput | number
    authorUserId?: IntFieldUpdateOperationsInput | number
    sprintId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubtaskUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attachments?: AttachmentUpdateManyWithoutSubTaskNestedInput
    assignee?: UserUpdateOneWithoutAssignedSubTasksNestedInput
    task?: TaskUpdateOneRequiredWithoutSubTasksNestedInput
    comments?: CommentUpdateManyWithoutSubtaskNestedInput
  }

  export type SubtaskUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    attachments?: AttachmentUncheckedUpdateManyWithoutSubTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSubtaskNestedInput
  }

  export type SubtaskUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubtaskUpdateWithoutAssigneeInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attachments?: AttachmentUpdateManyWithoutSubTaskNestedInput
    author?: UserUpdateOneRequiredWithoutAuthoredSubTasksNestedInput
    task?: TaskUpdateOneRequiredWithoutSubTasksNestedInput
    comments?: CommentUpdateManyWithoutSubtaskNestedInput
  }

  export type SubtaskUncheckedUpdateWithoutAssigneeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    authorUserId?: IntFieldUpdateOperationsInput | number
    attachments?: AttachmentUncheckedUpdateManyWithoutSubTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSubtaskNestedInput
  }

  export type SubtaskUncheckedUpdateManyWithoutAssigneeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    authorUserId?: IntFieldUpdateOperationsInput | number
  }

  export type TaskAssignmentUpdateWithoutUserInput = {
    task?: TaskUpdateOneRequiredWithoutTaskAssignmentsNestedInput
  }

  export type TaskAssignmentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
  }

  export type TaskAssignmentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
  }

  export type AttachmentUpdateWithoutUploadedByInput = {
    fileURL?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    task?: TaskUpdateOneWithoutAttachmentsNestedInput
    subTask?: SubtaskUpdateOneWithoutAttachmentsNestedInput
  }

  export type AttachmentUncheckedUpdateWithoutUploadedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileURL?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableIntFieldUpdateOperationsInput | number | null
    subTaskId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttachmentUncheckedUpdateManyWithoutUploadedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileURL?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableIntFieldUpdateOperationsInput | number | null
    subTaskId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentUpdateWithoutUserInput = {
    text?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    commentTime?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneWithoutCommentsNestedInput
    subtask?: SubtaskUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    taskId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    commentTime?: DateTimeFieldUpdateOperationsInput | Date | string
    subtaskId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    taskId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    commentTime?: DateTimeFieldUpdateOperationsInput | Date | string
    subtaskId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamMembersUpdateWithoutUserInput = {
    role?: StringFieldUpdateOperationsInput | string
    team?: TeamUpdateOneRequiredWithoutTeamMembersNestedInput
  }

  export type TeamMembersUncheckedUpdateWithoutUserInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type TeamMembersUncheckedUpdateManyWithoutUserInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserProjectsUpdateWithoutUserInput = {
    role?: StringFieldUpdateOperationsInput | string
    project?: ProjectUpdateOneRequiredWithoutUserProjectsNestedInput
  }

  export type UserProjectsUncheckedUpdateWithoutUserInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserProjectsUncheckedUpdateManyWithoutUserInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutReportsToInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsToInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutReportsToInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskHistoryUpdateWithoutUserInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sprint?: StringFieldUpdateOperationsInput | string
    task?: TaskUpdateOneRequiredWithoutTaskHistoryNestedInput
  }

  export type TaskHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sprint?: StringFieldUpdateOperationsInput | string
  }

  export type TaskHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    taskId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sprint?: StringFieldUpdateOperationsInput | string
  }

  export type ScreenshotsUpdateWithoutUserInput = {
    username?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    base64?: StringFieldUpdateOperationsInput | string
  }

  export type ScreenshotsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    base64?: StringFieldUpdateOperationsInput | string
  }

  export type ScreenshotsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    base64?: StringFieldUpdateOperationsInput | string
  }

  export type TaskCreateManyProjectInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    authorUserId: number
    assignedUserId?: number | null
    sprintId?: number | null
  }

  export type SprintCreateManyProjectInput = {
    id?: number
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
  }

  export type UserProjectsCreateManyProjectInput = {
    userId: number
    role: string
  }

  export type TaskUpdateWithoutProjectInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    author?: UserUpdateOneRequiredWithoutAuthoredTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUpdateManyWithoutTaskNestedInput
    sprint?: SprintUpdateOneWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    sprintId?: NullableIntFieldUpdateOperationsInput | number | null
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    sprintId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SprintUpdateWithoutProjectInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUpdateManyWithoutSprintNestedInput
  }

  export type SprintUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutSprintNestedInput
  }

  export type SprintUncheckedUpdateManyWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutProjectsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUpdateManyWithoutMembersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutProjectsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserProjectsUpdateWithoutProjectInput = {
    role?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutUserProjectsNestedInput
  }

  export type UserProjectsUncheckedUpdateWithoutProjectInput = {
    userId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserProjectsUncheckedUpdateManyWithoutProjectInput = {
    userId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type TaskCreateManySprintInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    priority?: string | null
    tags?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    points?: number | null
    projectId: number
    authorUserId: number
    assignedUserId?: number | null
  }

  export type TaskUpdateWithoutSprintInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    author?: UserUpdateOneRequiredWithoutAuthoredTasksNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    taskAssignments?: TaskAssignmentUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUpdateManyWithoutTaskNestedInput
    comments?: CommentUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutSprintInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: IntFieldUpdateOperationsInput | number
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    taskAssignments?: TaskAssignmentUncheckedUpdateManyWithoutTaskNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutTaskNestedInput
    subTasks?: SubtaskUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutSprintInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
    projectId?: IntFieldUpdateOperationsInput | number
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TaskAssignmentCreateManyTaskInput = {
    id?: number
    userId: number
  }

  export type AttachmentCreateManyTaskInput = {
    id?: number
    fileURL: string
    fileName?: string | null
    subTaskId?: number | null
    uploadedById: number
  }

  export type CommentCreateManyTaskInput = {
    id?: number
    text: string
    userId: number
    username: string
    commentTime: Date | string
    subtaskId?: number | null
  }

  export type TaskHistoryCreateManyTaskInput = {
    id?: number
    userId: number
    startDate: Date | string
    endDate: Date | string
    sprint: string
  }

  export type SubtaskCreateManyTaskInput = {
    id?: number
    title: string
    description?: string | null
    status?: string | null
    startDate?: Date | string | null
    dueDate?: Date | string | null
    authorUserId: number
    assignedUserId?: number | null
  }

  export type TaskAssignmentUpdateWithoutTaskInput = {
    user?: UserUpdateOneRequiredWithoutTaskAssignmentNestedInput
  }

  export type TaskAssignmentUncheckedUpdateWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type TaskAssignmentUncheckedUpdateManyWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type AttachmentUpdateWithoutTaskInput = {
    fileURL?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    subTask?: SubtaskUpdateOneWithoutAttachmentsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type AttachmentUncheckedUpdateWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileURL?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    subTaskId?: NullableIntFieldUpdateOperationsInput | number | null
    uploadedById?: IntFieldUpdateOperationsInput | number
  }

  export type AttachmentUncheckedUpdateManyWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileURL?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    subTaskId?: NullableIntFieldUpdateOperationsInput | number | null
    uploadedById?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutTaskInput = {
    text?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    commentTime?: DateTimeFieldUpdateOperationsInput | Date | string
    subtask?: SubtaskUpdateOneWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    commentTime?: DateTimeFieldUpdateOperationsInput | Date | string
    subtaskId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentUncheckedUpdateManyWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    commentTime?: DateTimeFieldUpdateOperationsInput | Date | string
    subtaskId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TaskHistoryUpdateWithoutTaskInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sprint?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTaskHistoryNestedInput
  }

  export type TaskHistoryUncheckedUpdateWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sprint?: StringFieldUpdateOperationsInput | string
  }

  export type TaskHistoryUncheckedUpdateManyWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sprint?: StringFieldUpdateOperationsInput | string
  }

  export type SubtaskUpdateWithoutTaskInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attachments?: AttachmentUpdateManyWithoutSubTaskNestedInput
    assignee?: UserUpdateOneWithoutAssignedSubTasksNestedInput
    author?: UserUpdateOneRequiredWithoutAuthoredSubTasksNestedInput
    comments?: CommentUpdateManyWithoutSubtaskNestedInput
  }

  export type SubtaskUncheckedUpdateWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
    attachments?: AttachmentUncheckedUpdateManyWithoutSubTaskNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSubtaskNestedInput
  }

  export type SubtaskUncheckedUpdateManyWithoutTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    authorUserId?: IntFieldUpdateOperationsInput | number
    assignedUserId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttachmentCreateManySubTaskInput = {
    id?: number
    fileURL: string
    fileName?: string | null
    taskId?: number | null
    uploadedById: number
  }

  export type CommentCreateManySubtaskInput = {
    id?: number
    text: string
    taskId: number
    userId: number
    username: string
    commentTime: Date | string
  }

  export type AttachmentUpdateWithoutSubTaskInput = {
    fileURL?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    task?: TaskUpdateOneWithoutAttachmentsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type AttachmentUncheckedUpdateWithoutSubTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileURL?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableIntFieldUpdateOperationsInput | number | null
    uploadedById?: IntFieldUpdateOperationsInput | number
  }

  export type AttachmentUncheckedUpdateManyWithoutSubTaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileURL?: StringFieldUpdateOperationsInput | string
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableIntFieldUpdateOperationsInput | number | null
    uploadedById?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutSubtaskInput = {
    text?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    commentTime?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutSubtaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    taskId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    commentTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutSubtaskInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    taskId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    commentTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMembersCreateManyTeamInput = {
    userId: number
    role: string
  }

  export type UserUpdateWithoutTeamsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTeamsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamMembersUpdateWithoutTeamInput = {
    role?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTeamMembersNestedInput
  }

  export type TeamMembersUncheckedUpdateWithoutTeamInput = {
    userId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type TeamMembersUncheckedUpdateManyWithoutTeamInput = {
    userId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type RoleAuthoritiesCreateManyRoleInput = {
    authorityId: number
  }

  export type UserUpdateWithoutRolesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutUsersNestedInput
    teams?: TeamUpdateManyWithoutMembersNestedInput
    authoredTasks?: TaskUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUpdateManyWithoutUserNestedInput
    reportsTo?: UserUpdateOneWithoutReportsNestedInput
    reports?: UserUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUpdateManyWithoutUserNestedInput
    project?: ProjectUpdateOneWithoutUserNestedInput
    profilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRolesInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
    projects?: ProjectUncheckedUpdateManyWithoutUsersNestedInput
    teams?: TeamUncheckedUpdateManyWithoutMembersNestedInput
    authoredTasks?: TaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    authoredSubTasks?: SubtaskUncheckedUpdateManyWithoutAuthorNestedInput
    assignedSubTasks?: SubtaskUncheckedUpdateManyWithoutAssigneeNestedInput
    taskAssignment?: TaskAssignmentUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMembersUncheckedUpdateManyWithoutUserNestedInput
    userProjects?: UserProjectsUncheckedUpdateManyWithoutUserNestedInput
    reports?: UserUncheckedUpdateManyWithoutReportsToNestedInput
    taskHistory?: TaskHistoryUncheckedUpdateManyWithoutUserNestedInput
    screenshot?: ScreenshotsUncheckedUpdateManyWithoutUserNestedInput
    project?: ProjectUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRolesInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    resetPasswordOTP?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportsToId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AuthorityUpdateWithoutRolesInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roleAuthorities?: RoleAuthoritiesUpdateManyWithoutAuthorityNestedInput
  }

  export type AuthorityUncheckedUpdateWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roleAuthorities?: RoleAuthoritiesUncheckedUpdateManyWithoutAuthorityNestedInput
  }

  export type AuthorityUncheckedUpdateManyWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleAuthoritiesUpdateWithoutRoleInput = {
    authority?: AuthorityUpdateOneRequiredWithoutRoleAuthoritiesNestedInput
  }

  export type RoleAuthoritiesUncheckedUpdateWithoutRoleInput = {
    authorityId?: IntFieldUpdateOperationsInput | number
  }

  export type RoleAuthoritiesUncheckedUpdateManyWithoutRoleInput = {
    authorityId?: IntFieldUpdateOperationsInput | number
  }

  export type RoleAuthoritiesCreateManyAuthorityInput = {
    roleId: number
  }

  export type RoleUpdateWithoutAuthoritiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutRolesNestedInput
    roleAuthorities?: RoleAuthoritiesUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutAuthoritiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutRolesNestedInput
    roleAuthorities?: RoleAuthoritiesUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateManyWithoutAuthoritiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleAuthoritiesUpdateWithoutAuthorityInput = {
    role?: RoleUpdateOneRequiredWithoutRoleAuthoritiesNestedInput
  }

  export type RoleAuthoritiesUncheckedUpdateWithoutAuthorityInput = {
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type RoleAuthoritiesUncheckedUpdateManyWithoutAuthorityInput = {
    roleId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}